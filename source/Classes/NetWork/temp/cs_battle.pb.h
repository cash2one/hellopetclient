// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_battle.proto

#ifndef PROTOBUF_cs_5fbattle_2eproto__INCLUDED
#define PROTOBUF_cs_5fbattle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cs_core.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cs_5fbattle_2eproto();
void protobuf_AssignDesc_cs_5fbattle_2eproto();
void protobuf_ShutdownFile_cs_5fbattle_2eproto();

class CSPoint;
class CSBattleMoveReq;
class CSBattleMoveRsp;
class MonsterMoveValue;
class CSMonsterMoveRsp;
class CSBattleCreateReq;
class MonsterBattleInfo;
class MonsterInfo;
class CSBattleCreateRsp;
class CSBattleMonsterCreateRsp;
class CSBattleUserJoinRsp;
class CSBattleUserLeaveRsp;
class CSBattleLoadCompleteReq;
class CSBattleLoadCompleteRsp;
class CSBattleLeaveReq;
class CSBattleLeaveRsp;
class CSBattleTimeoutRsp;
class CSBattlePlayerDelRsp;
class AttackMonsterInfo;
class CSAttackMonsterBackInfo;
class CSMonsterAttackInfo;
class CSMonsterEffectInfo;
class CSMonsterAttackRsp;
class CSMonsterEffectRsp;
class CSMonsterHitRsp;
class CSMonsterHitRsp_UserInfo;
class CSSkillBeginReq;
class CSSkillBeginRsp;
class CSPlayerAttackReq;
class CSPlayerAttackRsp;
class AttackPlayerInfo;
class CSPlayerHitPlayerReq;
class CSPlayerHitPlayerRsp;
class CSPlayerHPRsp;
class CSMonsterBloodRsp;
class CSMonsterDieRsp;
class CSABMonsterReq;
class CSABMonsterRsp;
class CSABMonsterRsp_MonInfo;
class CSAutoBattleReq;
class CSAutoBattleRsp;
class CSABRewardRsp;
class CSCancelAutoBattleReq;
class CSCancelAutoBattleRsp;

// ===================================================================

class CSPoint : public ::google::protobuf::Message {
 public:
  CSPoint();
  virtual ~CSPoint();

  CSPoint(const CSPoint& from);

  inline CSPoint& operator=(const CSPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPoint& default_instance();

  void Swap(CSPoint* other);

  // implements Message ----------------------------------------------

  CSPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPoint& from);
  void MergeFrom(const CSPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 xpos = 1;
  inline bool has_xpos() const;
  inline void clear_xpos();
  static const int kXposFieldNumber = 1;
  inline ::google::protobuf::int32 xpos() const;
  inline void set_xpos(::google::protobuf::int32 value);

  // required int32 ypos = 2;
  inline bool has_ypos() const;
  inline void clear_ypos();
  static const int kYposFieldNumber = 2;
  inline ::google::protobuf::int32 ypos() const;
  inline void set_ypos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CSPoint)
 private:
  inline void set_has_xpos();
  inline void clear_has_xpos();
  inline void set_has_ypos();
  inline void clear_has_ypos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 xpos_;
  ::google::protobuf::int32 ypos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSPoint* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleMoveReq : public ::google::protobuf::Message {
 public:
  CSBattleMoveReq();
  virtual ~CSBattleMoveReq();

  CSBattleMoveReq(const CSBattleMoveReq& from);

  inline CSBattleMoveReq& operator=(const CSBattleMoveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleMoveReq& default_instance();

  void Swap(CSBattleMoveReq* other);

  // implements Message ----------------------------------------------

  CSBattleMoveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleMoveReq& from);
  void MergeFrom(const CSBattleMoveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required .CSPoint direct = 2;
  inline bool has_direct() const;
  inline void clear_direct();
  static const int kDirectFieldNumber = 2;
  inline const ::CSPoint& direct() const;
  inline ::CSPoint* mutable_direct();
  inline ::CSPoint* release_direct();
  inline void set_allocated_direct(::CSPoint* direct);

  // required .CSPoint pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline const ::CSPoint& pos() const;
  inline ::CSPoint* mutable_pos();
  inline ::CSPoint* release_pos();
  inline void set_allocated_pos(::CSPoint* pos);

  // required uint32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSBattleMoveReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_direct();
  inline void clear_has_direct();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CSPoint* direct_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 time_;
  ::CSPoint* pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSBattleMoveReq* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleMoveRsp : public ::google::protobuf::Message {
 public:
  CSBattleMoveRsp();
  virtual ~CSBattleMoveRsp();

  CSBattleMoveRsp(const CSBattleMoveRsp& from);

  inline CSBattleMoveRsp& operator=(const CSBattleMoveRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleMoveRsp& default_instance();

  void Swap(CSBattleMoveRsp* other);

  // implements Message ----------------------------------------------

  CSBattleMoveRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleMoveRsp& from);
  void MergeFrom(const CSBattleMoveRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required .CSPoint direct = 2;
  inline bool has_direct() const;
  inline void clear_direct();
  static const int kDirectFieldNumber = 2;
  inline const ::CSPoint& direct() const;
  inline ::CSPoint* mutable_direct();
  inline ::CSPoint* release_direct();
  inline void set_allocated_direct(::CSPoint* direct);

  // required .CSPoint pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline const ::CSPoint& pos() const;
  inline ::CSPoint* mutable_pos();
  inline ::CSPoint* release_pos();
  inline void set_allocated_pos(::CSPoint* pos);

  // required uint32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSBattleMoveRsp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_direct();
  inline void clear_has_direct();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CSPoint* direct_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 time_;
  ::CSPoint* pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSBattleMoveRsp* default_instance_;
};
// -------------------------------------------------------------------

class MonsterMoveValue : public ::google::protobuf::Message {
 public:
  MonsterMoveValue();
  virtual ~MonsterMoveValue();

  MonsterMoveValue(const MonsterMoveValue& from);

  inline MonsterMoveValue& operator=(const MonsterMoveValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterMoveValue& default_instance();

  void Swap(MonsterMoveValue* other);

  // implements Message ----------------------------------------------

  MonsterMoveValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterMoveValue& from);
  void MergeFrom(const MonsterMoveValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required .CSPoint direct = 2;
  inline bool has_direct() const;
  inline void clear_direct();
  static const int kDirectFieldNumber = 2;
  inline const ::CSPoint& direct() const;
  inline ::CSPoint* mutable_direct();
  inline ::CSPoint* release_direct();
  inline void set_allocated_direct(::CSPoint* direct);

  // repeated .CSPoint paths = 3;
  inline int paths_size() const;
  inline void clear_paths();
  static const int kPathsFieldNumber = 3;
  inline const ::CSPoint& paths(int index) const;
  inline ::CSPoint* mutable_paths(int index);
  inline ::CSPoint* add_paths();
  inline const ::google::protobuf::RepeatedPtrField< ::CSPoint >&
      paths() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSPoint >*
      mutable_paths();

  // @@protoc_insertion_point(class_scope:MonsterMoveValue)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_direct();
  inline void clear_has_direct();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CSPoint* direct_;
  ::google::protobuf::RepeatedPtrField< ::CSPoint > paths_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static MonsterMoveValue* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterMoveRsp : public ::google::protobuf::Message {
 public:
  CSMonsterMoveRsp();
  virtual ~CSMonsterMoveRsp();

  CSMonsterMoveRsp(const CSMonsterMoveRsp& from);

  inline CSMonsterMoveRsp& operator=(const CSMonsterMoveRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterMoveRsp& default_instance();

  void Swap(CSMonsterMoveRsp* other);

  // implements Message ----------------------------------------------

  CSMonsterMoveRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterMoveRsp& from);
  void MergeFrom(const CSMonsterMoveRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MonsterMoveValue moves = 1;
  inline int moves_size() const;
  inline void clear_moves();
  static const int kMovesFieldNumber = 1;
  inline const ::MonsterMoveValue& moves(int index) const;
  inline ::MonsterMoveValue* mutable_moves(int index);
  inline ::MonsterMoveValue* add_moves();
  inline const ::google::protobuf::RepeatedPtrField< ::MonsterMoveValue >&
      moves() const;
  inline ::google::protobuf::RepeatedPtrField< ::MonsterMoveValue >*
      mutable_moves();

  // @@protoc_insertion_point(class_scope:CSMonsterMoveRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MonsterMoveValue > moves_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSMonsterMoveRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleCreateReq : public ::google::protobuf::Message {
 public:
  CSBattleCreateReq();
  virtual ~CSBattleCreateReq();

  CSBattleCreateReq(const CSBattleCreateReq& from);

  inline CSBattleCreateReq& operator=(const CSBattleCreateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleCreateReq& default_instance();

  void Swap(CSBattleCreateReq* other);

  // implements Message ----------------------------------------------

  CSBattleCreateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleCreateReq& from);
  void MergeFrom(const CSBattleCreateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 battle_id = 1;
  inline bool has_battle_id() const;
  inline void clear_battle_id();
  static const int kBattleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 battle_id() const;
  inline void set_battle_id(::google::protobuf::uint32 value);

  // required uint32 map_id = 2;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 2;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSBattleCreateReq)
 private:
  inline void set_has_battle_id();
  inline void clear_has_battle_id();
  inline void set_has_map_id();
  inline void clear_has_map_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 battle_id_;
  ::google::protobuf::uint32 map_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSBattleCreateReq* default_instance_;
};
// -------------------------------------------------------------------

class MonsterBattleInfo : public ::google::protobuf::Message {
 public:
  MonsterBattleInfo();
  virtual ~MonsterBattleInfo();

  MonsterBattleInfo(const MonsterBattleInfo& from);

  inline MonsterBattleInfo& operator=(const MonsterBattleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterBattleInfo& default_instance();

  void Swap(MonsterBattleInfo* other);

  // implements Message ----------------------------------------------

  MonsterBattleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterBattleInfo& from);
  void MergeFrom(const MonsterBattleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 physical_attack = 1;
  inline bool has_physical_attack() const;
  inline void clear_physical_attack();
  static const int kPhysicalAttackFieldNumber = 1;
  inline ::google::protobuf::uint32 physical_attack() const;
  inline void set_physical_attack(::google::protobuf::uint32 value);

  // required uint32 magic_attack = 2;
  inline bool has_magic_attack() const;
  inline void clear_magic_attack();
  static const int kMagicAttackFieldNumber = 2;
  inline ::google::protobuf::uint32 magic_attack() const;
  inline void set_magic_attack(::google::protobuf::uint32 value);

  // required uint32 skill_attack = 3;
  inline bool has_skill_attack() const;
  inline void clear_skill_attack();
  static const int kSkillAttackFieldNumber = 3;
  inline ::google::protobuf::uint32 skill_attack() const;
  inline void set_skill_attack(::google::protobuf::uint32 value);

  // required uint32 physical_defence = 4;
  inline bool has_physical_defence() const;
  inline void clear_physical_defence();
  static const int kPhysicalDefenceFieldNumber = 4;
  inline ::google::protobuf::uint32 physical_defence() const;
  inline void set_physical_defence(::google::protobuf::uint32 value);

  // required uint32 magic_defence = 5;
  inline bool has_magic_defence() const;
  inline void clear_magic_defence();
  static const int kMagicDefenceFieldNumber = 5;
  inline ::google::protobuf::uint32 magic_defence() const;
  inline void set_magic_defence(::google::protobuf::uint32 value);

  // required uint32 skill_defence = 6;
  inline bool has_skill_defence() const;
  inline void clear_skill_defence();
  static const int kSkillDefenceFieldNumber = 6;
  inline ::google::protobuf::uint32 skill_defence() const;
  inline void set_skill_defence(::google::protobuf::uint32 value);

  // required uint32 health_point = 7;
  inline bool has_health_point() const;
  inline void clear_health_point();
  static const int kHealthPointFieldNumber = 7;
  inline ::google::protobuf::uint32 health_point() const;
  inline void set_health_point(::google::protobuf::uint32 value);

  // required uint32 accurate = 8;
  inline bool has_accurate() const;
  inline void clear_accurate();
  static const int kAccurateFieldNumber = 8;
  inline ::google::protobuf::uint32 accurate() const;
  inline void set_accurate(::google::protobuf::uint32 value);

  // required uint32 dodge = 9;
  inline bool has_dodge() const;
  inline void clear_dodge();
  static const int kDodgeFieldNumber = 9;
  inline ::google::protobuf::uint32 dodge() const;
  inline void set_dodge(::google::protobuf::uint32 value);

  // required uint32 wreck = 10;
  inline bool has_wreck() const;
  inline void clear_wreck();
  static const int kWreckFieldNumber = 10;
  inline ::google::protobuf::uint32 wreck() const;
  inline void set_wreck(::google::protobuf::uint32 value);

  // required uint32 parry = 11;
  inline bool has_parry() const;
  inline void clear_parry();
  static const int kParryFieldNumber = 11;
  inline ::google::protobuf::uint32 parry() const;
  inline void set_parry(::google::protobuf::uint32 value);

  // required uint32 critical_strike = 12;
  inline bool has_critical_strike() const;
  inline void clear_critical_strike();
  static const int kCriticalStrikeFieldNumber = 12;
  inline ::google::protobuf::uint32 critical_strike() const;
  inline void set_critical_strike(::google::protobuf::uint32 value);

  // required uint32 tenacity = 13;
  inline bool has_tenacity() const;
  inline void clear_tenacity();
  static const int kTenacityFieldNumber = 13;
  inline ::google::protobuf::uint32 tenacity() const;
  inline void set_tenacity(::google::protobuf::uint32 value);

  // required uint32 slay = 14;
  inline bool has_slay() const;
  inline void clear_slay();
  static const int kSlayFieldNumber = 14;
  inline ::google::protobuf::uint32 slay() const;
  inline void set_slay(::google::protobuf::uint32 value);

  // required uint32 proficiency = 15;
  inline bool has_proficiency() const;
  inline void clear_proficiency();
  static const int kProficiencyFieldNumber = 15;
  inline ::google::protobuf::uint32 proficiency() const;
  inline void set_proficiency(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MonsterBattleInfo)
 private:
  inline void set_has_physical_attack();
  inline void clear_has_physical_attack();
  inline void set_has_magic_attack();
  inline void clear_has_magic_attack();
  inline void set_has_skill_attack();
  inline void clear_has_skill_attack();
  inline void set_has_physical_defence();
  inline void clear_has_physical_defence();
  inline void set_has_magic_defence();
  inline void clear_has_magic_defence();
  inline void set_has_skill_defence();
  inline void clear_has_skill_defence();
  inline void set_has_health_point();
  inline void clear_has_health_point();
  inline void set_has_accurate();
  inline void clear_has_accurate();
  inline void set_has_dodge();
  inline void clear_has_dodge();
  inline void set_has_wreck();
  inline void clear_has_wreck();
  inline void set_has_parry();
  inline void clear_has_parry();
  inline void set_has_critical_strike();
  inline void clear_has_critical_strike();
  inline void set_has_tenacity();
  inline void clear_has_tenacity();
  inline void set_has_slay();
  inline void clear_has_slay();
  inline void set_has_proficiency();
  inline void clear_has_proficiency();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 physical_attack_;
  ::google::protobuf::uint32 magic_attack_;
  ::google::protobuf::uint32 skill_attack_;
  ::google::protobuf::uint32 physical_defence_;
  ::google::protobuf::uint32 magic_defence_;
  ::google::protobuf::uint32 skill_defence_;
  ::google::protobuf::uint32 health_point_;
  ::google::protobuf::uint32 accurate_;
  ::google::protobuf::uint32 dodge_;
  ::google::protobuf::uint32 wreck_;
  ::google::protobuf::uint32 parry_;
  ::google::protobuf::uint32 critical_strike_;
  ::google::protobuf::uint32 tenacity_;
  ::google::protobuf::uint32 slay_;
  ::google::protobuf::uint32 proficiency_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static MonsterBattleInfo* default_instance_;
};
// -------------------------------------------------------------------

class MonsterInfo : public ::google::protobuf::Message {
 public:
  MonsterInfo();
  virtual ~MonsterInfo();

  MonsterInfo(const MonsterInfo& from);

  inline MonsterInfo& operator=(const MonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterInfo& default_instance();

  void Swap(MonsterInfo* other);

  // implements Message ----------------------------------------------

  MonsterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterInfo& from);
  void MergeFrom(const MonsterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 type_id = 2;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 2;
  inline ::google::protobuf::uint32 type_id() const;
  inline void set_type_id(::google::protobuf::uint32 value);

  // required uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 blood = 4;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 4;
  inline ::google::protobuf::uint32 blood() const;
  inline void set_blood(::google::protobuf::uint32 value);

  // required .CSPoint point = 5;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 5;
  inline const ::CSPoint& point() const;
  inline ::CSPoint* mutable_point();
  inline ::CSPoint* release_point();
  inline void set_allocated_point(::CSPoint* point);

  // required .CSPoint direct = 6;
  inline bool has_direct() const;
  inline void clear_direct();
  static const int kDirectFieldNumber = 6;
  inline const ::CSPoint& direct() const;
  inline ::CSPoint* mutable_direct();
  inline ::CSPoint* release_direct();
  inline void set_allocated_direct(::CSPoint* direct);

  // required uint32 speed = 7;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 7;
  inline ::google::protobuf::uint32 speed() const;
  inline void set_speed(::google::protobuf::uint32 value);

  // required bool boss = 8;
  inline bool has_boss() const;
  inline void clear_boss();
  static const int kBossFieldNumber = 8;
  inline bool boss() const;
  inline void set_boss(bool value);

  // required .MonsterMoveValue moves = 9;
  inline bool has_moves() const;
  inline void clear_moves();
  static const int kMovesFieldNumber = 9;
  inline const ::MonsterMoveValue& moves() const;
  inline ::MonsterMoveValue* mutable_moves();
  inline ::MonsterMoveValue* release_moves();
  inline void set_allocated_moves(::MonsterMoveValue* moves);

  // optional .MonsterBattleInfo battle_info = 10;
  inline bool has_battle_info() const;
  inline void clear_battle_info();
  static const int kBattleInfoFieldNumber = 10;
  inline const ::MonsterBattleInfo& battle_info() const;
  inline ::MonsterBattleInfo* mutable_battle_info();
  inline ::MonsterBattleInfo* release_battle_info();
  inline void set_allocated_battle_info(::MonsterBattleInfo* battle_info);

  // required bool elite = 11;
  inline bool has_elite() const;
  inline void clear_elite();
  static const int kEliteFieldNumber = 11;
  inline bool elite() const;
  inline void set_elite(bool value);

  // @@protoc_insertion_point(class_scope:MonsterInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type_id();
  inline void clear_has_type_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_blood();
  inline void clear_has_blood();
  inline void set_has_point();
  inline void clear_has_point();
  inline void set_has_direct();
  inline void clear_has_direct();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_boss();
  inline void clear_has_boss();
  inline void set_has_moves();
  inline void clear_has_moves();
  inline void set_has_battle_info();
  inline void clear_has_battle_info();
  inline void set_has_elite();
  inline void clear_has_elite();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 type_id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 blood_;
  ::CSPoint* point_;
  ::CSPoint* direct_;
  ::google::protobuf::uint32 speed_;
  bool boss_;
  bool elite_;
  ::MonsterMoveValue* moves_;
  ::MonsterBattleInfo* battle_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static MonsterInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleCreateRsp : public ::google::protobuf::Message {
 public:
  CSBattleCreateRsp();
  virtual ~CSBattleCreateRsp();

  CSBattleCreateRsp(const CSBattleCreateRsp& from);

  inline CSBattleCreateRsp& operator=(const CSBattleCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleCreateRsp& default_instance();

  void Swap(CSBattleCreateRsp* other);

  // implements Message ----------------------------------------------

  CSBattleCreateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleCreateRsp& from);
  void MergeFrom(const CSBattleCreateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MonsterInfo monsterinfo = 1;
  inline int monsterinfo_size() const;
  inline void clear_monsterinfo();
  static const int kMonsterinfoFieldNumber = 1;
  inline const ::MonsterInfo& monsterinfo(int index) const;
  inline ::MonsterInfo* mutable_monsterinfo(int index);
  inline ::MonsterInfo* add_monsterinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::MonsterInfo >&
      monsterinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::MonsterInfo >*
      mutable_monsterinfo();

  // repeated .BasicUserInfo userinfo = 2;
  inline int userinfo_size() const;
  inline void clear_userinfo();
  static const int kUserinfoFieldNumber = 2;
  inline const ::BasicUserInfo& userinfo(int index) const;
  inline ::BasicUserInfo* mutable_userinfo(int index);
  inline ::BasicUserInfo* add_userinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::BasicUserInfo >&
      userinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::BasicUserInfo >*
      mutable_userinfo();

  // required uint32 battle_id = 3;
  inline bool has_battle_id() const;
  inline void clear_battle_id();
  static const int kBattleIdFieldNumber = 3;
  inline ::google::protobuf::uint32 battle_id() const;
  inline void set_battle_id(::google::protobuf::uint32 value);

  // required uint32 map_id = 4;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 4;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);

  // required .CSPoint portal = 5;
  inline bool has_portal() const;
  inline void clear_portal();
  static const int kPortalFieldNumber = 5;
  inline const ::CSPoint& portal() const;
  inline ::CSPoint* mutable_portal();
  inline ::CSPoint* release_portal();
  inline void set_allocated_portal(::CSPoint* portal);

  // required uint32 portal_map_id = 6;
  inline bool has_portal_map_id() const;
  inline void clear_portal_map_id();
  static const int kPortalMapIdFieldNumber = 6;
  inline ::google::protobuf::uint32 portal_map_id() const;
  inline void set_portal_map_id(::google::protobuf::uint32 value);

  // optional uint32 timeout = 7;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 7;
  inline ::google::protobuf::uint32 timeout() const;
  inline void set_timeout(::google::protobuf::uint32 value);

  // repeated .CSPoint monsterbirth = 8;
  inline int monsterbirth_size() const;
  inline void clear_monsterbirth();
  static const int kMonsterbirthFieldNumber = 8;
  inline const ::CSPoint& monsterbirth(int index) const;
  inline ::CSPoint* mutable_monsterbirth(int index);
  inline ::CSPoint* add_monsterbirth();
  inline const ::google::protobuf::RepeatedPtrField< ::CSPoint >&
      monsterbirth() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSPoint >*
      mutable_monsterbirth();

  // @@protoc_insertion_point(class_scope:CSBattleCreateRsp)
 private:
  inline void set_has_battle_id();
  inline void clear_has_battle_id();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_portal();
  inline void clear_has_portal();
  inline void set_has_portal_map_id();
  inline void clear_has_portal_map_id();
  inline void set_has_timeout();
  inline void clear_has_timeout();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MonsterInfo > monsterinfo_;
  ::google::protobuf::RepeatedPtrField< ::BasicUserInfo > userinfo_;
  ::google::protobuf::uint32 battle_id_;
  ::google::protobuf::uint32 map_id_;
  ::CSPoint* portal_;
  ::google::protobuf::uint32 portal_map_id_;
  ::google::protobuf::uint32 timeout_;
  ::google::protobuf::RepeatedPtrField< ::CSPoint > monsterbirth_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSBattleCreateRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleMonsterCreateRsp : public ::google::protobuf::Message {
 public:
  CSBattleMonsterCreateRsp();
  virtual ~CSBattleMonsterCreateRsp();

  CSBattleMonsterCreateRsp(const CSBattleMonsterCreateRsp& from);

  inline CSBattleMonsterCreateRsp& operator=(const CSBattleMonsterCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleMonsterCreateRsp& default_instance();

  void Swap(CSBattleMonsterCreateRsp* other);

  // implements Message ----------------------------------------------

  CSBattleMonsterCreateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleMonsterCreateRsp& from);
  void MergeFrom(const CSBattleMonsterCreateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MonsterInfo monsterinfo = 1;
  inline int monsterinfo_size() const;
  inline void clear_monsterinfo();
  static const int kMonsterinfoFieldNumber = 1;
  inline const ::MonsterInfo& monsterinfo(int index) const;
  inline ::MonsterInfo* mutable_monsterinfo(int index);
  inline ::MonsterInfo* add_monsterinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::MonsterInfo >&
      monsterinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::MonsterInfo >*
      mutable_monsterinfo();

  // @@protoc_insertion_point(class_scope:CSBattleMonsterCreateRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MonsterInfo > monsterinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSBattleMonsterCreateRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleUserJoinRsp : public ::google::protobuf::Message {
 public:
  CSBattleUserJoinRsp();
  virtual ~CSBattleUserJoinRsp();

  CSBattleUserJoinRsp(const CSBattleUserJoinRsp& from);

  inline CSBattleUserJoinRsp& operator=(const CSBattleUserJoinRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleUserJoinRsp& default_instance();

  void Swap(CSBattleUserJoinRsp* other);

  // implements Message ----------------------------------------------

  CSBattleUserJoinRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleUserJoinRsp& from);
  void MergeFrom(const CSBattleUserJoinRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BasicUserInfo userinfo = 1;
  inline int userinfo_size() const;
  inline void clear_userinfo();
  static const int kUserinfoFieldNumber = 1;
  inline const ::BasicUserInfo& userinfo(int index) const;
  inline ::BasicUserInfo* mutable_userinfo(int index);
  inline ::BasicUserInfo* add_userinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::BasicUserInfo >&
      userinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::BasicUserInfo >*
      mutable_userinfo();

  // @@protoc_insertion_point(class_scope:CSBattleUserJoinRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::BasicUserInfo > userinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSBattleUserJoinRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleUserLeaveRsp : public ::google::protobuf::Message {
 public:
  CSBattleUserLeaveRsp();
  virtual ~CSBattleUserLeaveRsp();

  CSBattleUserLeaveRsp(const CSBattleUserLeaveRsp& from);

  inline CSBattleUserLeaveRsp& operator=(const CSBattleUserLeaveRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleUserLeaveRsp& default_instance();

  void Swap(CSBattleUserLeaveRsp* other);

  // implements Message ----------------------------------------------

  CSBattleUserLeaveRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleUserLeaveRsp& from);
  void MergeFrom(const CSBattleUserLeaveRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSBattleUserLeaveRsp)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSBattleUserLeaveRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleLoadCompleteReq : public ::google::protobuf::Message {
 public:
  CSBattleLoadCompleteReq();
  virtual ~CSBattleLoadCompleteReq();

  CSBattleLoadCompleteReq(const CSBattleLoadCompleteReq& from);

  inline CSBattleLoadCompleteReq& operator=(const CSBattleLoadCompleteReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleLoadCompleteReq& default_instance();

  void Swap(CSBattleLoadCompleteReq* other);

  // implements Message ----------------------------------------------

  CSBattleLoadCompleteReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleLoadCompleteReq& from);
  void MergeFrom(const CSBattleLoadCompleteReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSBattleLoadCompleteReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSBattleLoadCompleteReq* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleLoadCompleteRsp : public ::google::protobuf::Message {
 public:
  CSBattleLoadCompleteRsp();
  virtual ~CSBattleLoadCompleteRsp();

  CSBattleLoadCompleteRsp(const CSBattleLoadCompleteRsp& from);

  inline CSBattleLoadCompleteRsp& operator=(const CSBattleLoadCompleteRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleLoadCompleteRsp& default_instance();

  void Swap(CSBattleLoadCompleteRsp* other);

  // implements Message ----------------------------------------------

  CSBattleLoadCompleteRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleLoadCompleteRsp& from);
  void MergeFrom(const CSBattleLoadCompleteRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool timeout = 1;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 1;
  inline bool timeout() const;
  inline void set_timeout(bool value);

  // @@protoc_insertion_point(class_scope:CSBattleLoadCompleteRsp)
 private:
  inline void set_has_timeout();
  inline void clear_has_timeout();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool timeout_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSBattleLoadCompleteRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleLeaveReq : public ::google::protobuf::Message {
 public:
  CSBattleLeaveReq();
  virtual ~CSBattleLeaveReq();

  CSBattleLeaveReq(const CSBattleLeaveReq& from);

  inline CSBattleLeaveReq& operator=(const CSBattleLeaveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleLeaveReq& default_instance();

  void Swap(CSBattleLeaveReq* other);

  // implements Message ----------------------------------------------

  CSBattleLeaveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleLeaveReq& from);
  void MergeFrom(const CSBattleLeaveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSBattleLeaveReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSBattleLeaveReq* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleLeaveRsp : public ::google::protobuf::Message {
 public:
  CSBattleLeaveRsp();
  virtual ~CSBattleLeaveRsp();

  CSBattleLeaveRsp(const CSBattleLeaveRsp& from);

  inline CSBattleLeaveRsp& operator=(const CSBattleLeaveRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleLeaveRsp& default_instance();

  void Swap(CSBattleLeaveRsp* other);

  // implements Message ----------------------------------------------

  CSBattleLeaveRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleLeaveRsp& from);
  void MergeFrom(const CSBattleLeaveRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool initiative = 1;
  inline bool has_initiative() const;
  inline void clear_initiative();
  static const int kInitiativeFieldNumber = 1;
  inline bool initiative() const;
  inline void set_initiative(bool value);

  // optional uint32 star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional .CSReward rewards = 3;
  inline bool has_rewards() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 3;
  inline const ::CSReward& rewards() const;
  inline ::CSReward* mutable_rewards();
  inline ::CSReward* release_rewards();
  inline void set_allocated_rewards(::CSReward* rewards);

  // @@protoc_insertion_point(class_scope:CSBattleLeaveRsp)
 private:
  inline void set_has_initiative();
  inline void clear_has_initiative();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_rewards();
  inline void clear_has_rewards();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool initiative_;
  ::google::protobuf::uint32 star_;
  ::CSReward* rewards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSBattleLeaveRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleTimeoutRsp : public ::google::protobuf::Message {
 public:
  CSBattleTimeoutRsp();
  virtual ~CSBattleTimeoutRsp();

  CSBattleTimeoutRsp(const CSBattleTimeoutRsp& from);

  inline CSBattleTimeoutRsp& operator=(const CSBattleTimeoutRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleTimeoutRsp& default_instance();

  void Swap(CSBattleTimeoutRsp* other);

  // implements Message ----------------------------------------------

  CSBattleTimeoutRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleTimeoutRsp& from);
  void MergeFrom(const CSBattleTimeoutRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSBattleTimeoutRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSBattleTimeoutRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSBattlePlayerDelRsp : public ::google::protobuf::Message {
 public:
  CSBattlePlayerDelRsp();
  virtual ~CSBattlePlayerDelRsp();

  CSBattlePlayerDelRsp(const CSBattlePlayerDelRsp& from);

  inline CSBattlePlayerDelRsp& operator=(const CSBattlePlayerDelRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattlePlayerDelRsp& default_instance();

  void Swap(CSBattlePlayerDelRsp* other);

  // implements Message ----------------------------------------------

  CSBattlePlayerDelRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattlePlayerDelRsp& from);
  void MergeFrom(const CSBattlePlayerDelRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSBattlePlayerDelRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSBattlePlayerDelRsp* default_instance_;
};
// -------------------------------------------------------------------

class AttackMonsterInfo : public ::google::protobuf::Message {
 public:
  AttackMonsterInfo();
  virtual ~AttackMonsterInfo();

  AttackMonsterInfo(const AttackMonsterInfo& from);

  inline AttackMonsterInfo& operator=(const AttackMonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttackMonsterInfo& default_instance();

  void Swap(AttackMonsterInfo* other);

  // implements Message ----------------------------------------------

  AttackMonsterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttackMonsterInfo& from);
  void MergeFrom(const AttackMonsterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required .CSPoint start_pos = 2;
  inline bool has_start_pos() const;
  inline void clear_start_pos();
  static const int kStartPosFieldNumber = 2;
  inline const ::CSPoint& start_pos() const;
  inline ::CSPoint* mutable_start_pos();
  inline ::CSPoint* release_start_pos();
  inline void set_allocated_start_pos(::CSPoint* start_pos);

  // required .CSPoint pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline const ::CSPoint& pos() const;
  inline ::CSPoint* mutable_pos();
  inline ::CSPoint* release_pos();
  inline void set_allocated_pos(::CSPoint* pos);

  // required .CSPoint direct = 4;
  inline bool has_direct() const;
  inline void clear_direct();
  static const int kDirectFieldNumber = 4;
  inline const ::CSPoint& direct() const;
  inline ::CSPoint* mutable_direct();
  inline ::CSPoint* release_direct();
  inline void set_allocated_direct(::CSPoint* direct);

  // required uint32 blood = 5;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 5;
  inline ::google::protobuf::uint32 blood() const;
  inline void set_blood(::google::protobuf::uint32 value);

  // required uint32 status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:AttackMonsterInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_start_pos();
  inline void clear_has_start_pos();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_direct();
  inline void clear_has_direct();
  inline void set_has_blood();
  inline void clear_has_blood();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CSPoint* start_pos_;
  ::CSPoint* pos_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 blood_;
  ::CSPoint* direct_;
  ::google::protobuf::uint32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static AttackMonsterInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSAttackMonsterBackInfo : public ::google::protobuf::Message {
 public:
  CSAttackMonsterBackInfo();
  virtual ~CSAttackMonsterBackInfo();

  CSAttackMonsterBackInfo(const CSAttackMonsterBackInfo& from);

  inline CSAttackMonsterBackInfo& operator=(const CSAttackMonsterBackInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSAttackMonsterBackInfo& default_instance();

  void Swap(CSAttackMonsterBackInfo* other);

  // implements Message ----------------------------------------------

  CSAttackMonsterBackInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSAttackMonsterBackInfo& from);
  void MergeFrom(const CSAttackMonsterBackInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 monster_type = 2;
  inline bool has_monster_type() const;
  inline void clear_monster_type();
  static const int kMonsterTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 monster_type() const;
  inline void set_monster_type(::google::protobuf::uint32 value);

  // required uint32 blood = 3;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 3;
  inline ::google::protobuf::uint32 blood() const;
  inline void set_blood(::google::protobuf::uint32 value);

  // required bool elite = 4;
  inline bool has_elite() const;
  inline void clear_elite();
  static const int kEliteFieldNumber = 4;
  inline bool elite() const;
  inline void set_elite(bool value);

  // @@protoc_insertion_point(class_scope:CSAttackMonsterBackInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_monster_type();
  inline void clear_has_monster_type();
  inline void set_has_blood();
  inline void clear_has_blood();
  inline void set_has_elite();
  inline void clear_has_elite();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 monster_type_;
  ::google::protobuf::uint32 blood_;
  bool elite_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSAttackMonsterBackInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterAttackInfo : public ::google::protobuf::Message {
 public:
  CSMonsterAttackInfo();
  virtual ~CSMonsterAttackInfo();

  CSMonsterAttackInfo(const CSMonsterAttackInfo& from);

  inline CSMonsterAttackInfo& operator=(const CSMonsterAttackInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterAttackInfo& default_instance();

  void Swap(CSMonsterAttackInfo* other);

  // implements Message ----------------------------------------------

  CSMonsterAttackInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterAttackInfo& from);
  void MergeFrom(const CSMonsterAttackInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required .CSPoint pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::CSPoint& pos() const;
  inline ::CSPoint* mutable_pos();
  inline ::CSPoint* release_pos();
  inline void set_allocated_pos(::CSPoint* pos);

  // required .CSPoint direct = 3;
  inline bool has_direct() const;
  inline void clear_direct();
  static const int kDirectFieldNumber = 3;
  inline const ::CSPoint& direct() const;
  inline ::CSPoint* mutable_direct();
  inline ::CSPoint* release_direct();
  inline void set_allocated_direct(::CSPoint* direct);

  // required uint32 action_id = 4;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 4;
  inline ::google::protobuf::uint32 action_id() const;
  inline void set_action_id(::google::protobuf::uint32 value);

  // required uint32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 userid = 6;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 6;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);

  // optional uint32 effect_id = 7;
  inline bool has_effect_id() const;
  inline void clear_effect_id();
  static const int kEffectIdFieldNumber = 7;
  inline ::google::protobuf::uint32 effect_id() const;
  inline void set_effect_id(::google::protobuf::uint32 value);

  // optional .CSPoint start_pos = 8;
  inline bool has_start_pos() const;
  inline void clear_start_pos();
  static const int kStartPosFieldNumber = 8;
  inline const ::CSPoint& start_pos() const;
  inline ::CSPoint* mutable_start_pos();
  inline ::CSPoint* release_start_pos();
  inline void set_allocated_start_pos(::CSPoint* start_pos);

  // optional .CSPoint end_pos = 9;
  inline bool has_end_pos() const;
  inline void clear_end_pos();
  static const int kEndPosFieldNumber = 9;
  inline const ::CSPoint& end_pos() const;
  inline ::CSPoint* mutable_end_pos();
  inline ::CSPoint* release_end_pos();
  inline void set_allocated_end_pos(::CSPoint* end_pos);

  // optional uint32 skill_speed = 10;
  inline bool has_skill_speed() const;
  inline void clear_skill_speed();
  static const int kSkillSpeedFieldNumber = 10;
  inline ::google::protobuf::uint32 skill_speed() const;
  inline void set_skill_speed(::google::protobuf::uint32 value);

  // optional uint32 delay_time = 11;
  inline bool has_delay_time() const;
  inline void clear_delay_time();
  static const int kDelayTimeFieldNumber = 11;
  inline ::google::protobuf::uint32 delay_time() const;
  inline void set_delay_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSMonsterAttackInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_direct();
  inline void clear_has_direct();
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_effect_id();
  inline void clear_has_effect_id();
  inline void set_has_start_pos();
  inline void clear_has_start_pos();
  inline void set_has_end_pos();
  inline void clear_has_end_pos();
  inline void set_has_skill_speed();
  inline void clear_has_skill_speed();
  inline void set_has_delay_time();
  inline void clear_has_delay_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CSPoint* pos_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 action_id_;
  ::CSPoint* direct_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 userid_;
  ::CSPoint* start_pos_;
  ::google::protobuf::uint32 effect_id_;
  ::google::protobuf::uint32 skill_speed_;
  ::CSPoint* end_pos_;
  ::google::protobuf::uint32 delay_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSMonsterAttackInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterEffectInfo : public ::google::protobuf::Message {
 public:
  CSMonsterEffectInfo();
  virtual ~CSMonsterEffectInfo();

  CSMonsterEffectInfo(const CSMonsterEffectInfo& from);

  inline CSMonsterEffectInfo& operator=(const CSMonsterEffectInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterEffectInfo& default_instance();

  void Swap(CSMonsterEffectInfo* other);

  // implements Message ----------------------------------------------

  CSMonsterEffectInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterEffectInfo& from);
  void MergeFrom(const CSMonsterEffectInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 effect_id = 1;
  inline bool has_effect_id() const;
  inline void clear_effect_id();
  static const int kEffectIdFieldNumber = 1;
  inline ::google::protobuf::uint32 effect_id() const;
  inline void set_effect_id(::google::protobuf::uint32 value);

  // optional .CSPoint start_pos = 2;
  inline bool has_start_pos() const;
  inline void clear_start_pos();
  static const int kStartPosFieldNumber = 2;
  inline const ::CSPoint& start_pos() const;
  inline ::CSPoint* mutable_start_pos();
  inline ::CSPoint* release_start_pos();
  inline void set_allocated_start_pos(::CSPoint* start_pos);

  // optional .CSPoint end_pos = 3;
  inline bool has_end_pos() const;
  inline void clear_end_pos();
  static const int kEndPosFieldNumber = 3;
  inline const ::CSPoint& end_pos() const;
  inline ::CSPoint* mutable_end_pos();
  inline ::CSPoint* release_end_pos();
  inline void set_allocated_end_pos(::CSPoint* end_pos);

  // optional uint32 skill_speed = 4;
  inline bool has_skill_speed() const;
  inline void clear_skill_speed();
  static const int kSkillSpeedFieldNumber = 4;
  inline ::google::protobuf::uint32 skill_speed() const;
  inline void set_skill_speed(::google::protobuf::uint32 value);

  // optional uint32 delay_time = 5;
  inline bool has_delay_time() const;
  inline void clear_delay_time();
  static const int kDelayTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 delay_time() const;
  inline void set_delay_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSMonsterEffectInfo)
 private:
  inline void set_has_effect_id();
  inline void clear_has_effect_id();
  inline void set_has_start_pos();
  inline void clear_has_start_pos();
  inline void set_has_end_pos();
  inline void clear_has_end_pos();
  inline void set_has_skill_speed();
  inline void clear_has_skill_speed();
  inline void set_has_delay_time();
  inline void clear_has_delay_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CSPoint* start_pos_;
  ::google::protobuf::uint32 effect_id_;
  ::google::protobuf::uint32 skill_speed_;
  ::CSPoint* end_pos_;
  ::google::protobuf::uint32 delay_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSMonsterEffectInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterAttackRsp : public ::google::protobuf::Message {
 public:
  CSMonsterAttackRsp();
  virtual ~CSMonsterAttackRsp();

  CSMonsterAttackRsp(const CSMonsterAttackRsp& from);

  inline CSMonsterAttackRsp& operator=(const CSMonsterAttackRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterAttackRsp& default_instance();

  void Swap(CSMonsterAttackRsp* other);

  // implements Message ----------------------------------------------

  CSMonsterAttackRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterAttackRsp& from);
  void MergeFrom(const CSMonsterAttackRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CSMonsterAttackInfo attacks = 1;
  inline int attacks_size() const;
  inline void clear_attacks();
  static const int kAttacksFieldNumber = 1;
  inline const ::CSMonsterAttackInfo& attacks(int index) const;
  inline ::CSMonsterAttackInfo* mutable_attacks(int index);
  inline ::CSMonsterAttackInfo* add_attacks();
  inline const ::google::protobuf::RepeatedPtrField< ::CSMonsterAttackInfo >&
      attacks() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSMonsterAttackInfo >*
      mutable_attacks();

  // @@protoc_insertion_point(class_scope:CSMonsterAttackRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CSMonsterAttackInfo > attacks_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSMonsterAttackRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterEffectRsp : public ::google::protobuf::Message {
 public:
  CSMonsterEffectRsp();
  virtual ~CSMonsterEffectRsp();

  CSMonsterEffectRsp(const CSMonsterEffectRsp& from);

  inline CSMonsterEffectRsp& operator=(const CSMonsterEffectRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterEffectRsp& default_instance();

  void Swap(CSMonsterEffectRsp* other);

  // implements Message ----------------------------------------------

  CSMonsterEffectRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterEffectRsp& from);
  void MergeFrom(const CSMonsterEffectRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CSMonsterEffectInfo effects = 1;
  inline int effects_size() const;
  inline void clear_effects();
  static const int kEffectsFieldNumber = 1;
  inline const ::CSMonsterEffectInfo& effects(int index) const;
  inline ::CSMonsterEffectInfo* mutable_effects(int index);
  inline ::CSMonsterEffectInfo* add_effects();
  inline const ::google::protobuf::RepeatedPtrField< ::CSMonsterEffectInfo >&
      effects() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSMonsterEffectInfo >*
      mutable_effects();

  // @@protoc_insertion_point(class_scope:CSMonsterEffectRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CSMonsterEffectInfo > effects_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSMonsterEffectRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterHitRsp_UserInfo : public ::google::protobuf::Message {
 public:
  CSMonsterHitRsp_UserInfo();
  virtual ~CSMonsterHitRsp_UserInfo();

  CSMonsterHitRsp_UserInfo(const CSMonsterHitRsp_UserInfo& from);

  inline CSMonsterHitRsp_UserInfo& operator=(const CSMonsterHitRsp_UserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterHitRsp_UserInfo& default_instance();

  void Swap(CSMonsterHitRsp_UserInfo* other);

  // implements Message ----------------------------------------------

  CSMonsterHitRsp_UserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterHitRsp_UserInfo& from);
  void MergeFrom(const CSMonsterHitRsp_UserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 hurt_type = 2;
  inline bool has_hurt_type() const;
  inline void clear_hurt_type();
  static const int kHurtTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 hurt_type() const;
  inline void set_hurt_type(::google::protobuf::uint32 value);

  // required uint32 userid = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);

  // required uint32 blood = 4;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 4;
  inline ::google::protobuf::uint32 blood() const;
  inline void set_blood(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSMonsterHitRsp.UserInfo)
 private:
  inline void set_has_hurt_type();
  inline void clear_has_hurt_type();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_blood();
  inline void clear_has_blood();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 hurt_type_;
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 blood_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSMonsterHitRsp_UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterHitRsp : public ::google::protobuf::Message {
 public:
  CSMonsterHitRsp();
  virtual ~CSMonsterHitRsp();

  CSMonsterHitRsp(const CSMonsterHitRsp& from);

  inline CSMonsterHitRsp& operator=(const CSMonsterHitRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterHitRsp& default_instance();

  void Swap(CSMonsterHitRsp* other);

  // implements Message ----------------------------------------------

  CSMonsterHitRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterHitRsp& from);
  void MergeFrom(const CSMonsterHitRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSMonsterHitRsp_UserInfo UserInfo;

  // accessors -------------------------------------------------------

  // repeated .CSMonsterHitRsp.UserInfo users = 3;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 3;
  inline const ::CSMonsterHitRsp_UserInfo& users(int index) const;
  inline ::CSMonsterHitRsp_UserInfo* mutable_users(int index);
  inline ::CSMonsterHitRsp_UserInfo* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::CSMonsterHitRsp_UserInfo >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSMonsterHitRsp_UserInfo >*
      mutable_users();

  // @@protoc_insertion_point(class_scope:CSMonsterHitRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CSMonsterHitRsp_UserInfo > users_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSMonsterHitRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSSkillBeginReq : public ::google::protobuf::Message {
 public:
  CSSkillBeginReq();
  virtual ~CSSkillBeginReq();

  CSSkillBeginReq(const CSSkillBeginReq& from);

  inline CSSkillBeginReq& operator=(const CSSkillBeginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSSkillBeginReq& default_instance();

  void Swap(CSSkillBeginReq* other);

  // implements Message ----------------------------------------------

  CSSkillBeginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSSkillBeginReq& from);
  void MergeFrom(const CSSkillBeginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);

  // required uint32 action_id = 2;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 action_id() const;
  inline void set_action_id(::google::protobuf::uint32 value);

  // required .CSPoint pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline const ::CSPoint& pos() const;
  inline ::CSPoint* mutable_pos();
  inline ::CSPoint* release_pos();
  inline void set_allocated_pos(::CSPoint* pos);

  // required float start_dir_x = 4;
  inline bool has_start_dir_x() const;
  inline void clear_start_dir_x();
  static const int kStartDirXFieldNumber = 4;
  inline float start_dir_x() const;
  inline void set_start_dir_x(float value);

  // required float start_dir_y = 5;
  inline bool has_start_dir_y() const;
  inline void clear_start_dir_y();
  static const int kStartDirYFieldNumber = 5;
  inline float start_dir_y() const;
  inline void set_start_dir_y(float value);

  // required .CSPoint target_pos = 6;
  inline bool has_target_pos() const;
  inline void clear_target_pos();
  static const int kTargetPosFieldNumber = 6;
  inline const ::CSPoint& target_pos() const;
  inline ::CSPoint* mutable_target_pos();
  inline ::CSPoint* release_target_pos();
  inline void set_allocated_target_pos(::CSPoint* target_pos);

  // required float direct_x = 7;
  inline bool has_direct_x() const;
  inline void clear_direct_x();
  static const int kDirectXFieldNumber = 7;
  inline float direct_x() const;
  inline void set_direct_x(float value);

  // required float direct_y = 8;
  inline bool has_direct_y() const;
  inline void clear_direct_y();
  static const int kDirectYFieldNumber = 8;
  inline float direct_y() const;
  inline void set_direct_y(float value);

  // required bool aim = 9;
  inline bool has_aim() const;
  inline void clear_aim();
  static const int kAimFieldNumber = 9;
  inline bool aim() const;
  inline void set_aim(bool value);

  // @@protoc_insertion_point(class_scope:CSSkillBeginReq)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_start_dir_x();
  inline void clear_has_start_dir_x();
  inline void set_has_start_dir_y();
  inline void clear_has_start_dir_y();
  inline void set_has_target_pos();
  inline void clear_has_target_pos();
  inline void set_has_direct_x();
  inline void clear_has_direct_x();
  inline void set_has_direct_y();
  inline void clear_has_direct_y();
  inline void set_has_aim();
  inline void clear_has_aim();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 action_id_;
  ::CSPoint* pos_;
  float start_dir_x_;
  float start_dir_y_;
  ::CSPoint* target_pos_;
  float direct_x_;
  float direct_y_;
  bool aim_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSSkillBeginReq* default_instance_;
};
// -------------------------------------------------------------------

class CSSkillBeginRsp : public ::google::protobuf::Message {
 public:
  CSSkillBeginRsp();
  virtual ~CSSkillBeginRsp();

  CSSkillBeginRsp(const CSSkillBeginRsp& from);

  inline CSSkillBeginRsp& operator=(const CSSkillBeginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSSkillBeginRsp& default_instance();

  void Swap(CSSkillBeginRsp* other);

  // implements Message ----------------------------------------------

  CSSkillBeginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSSkillBeginRsp& from);
  void MergeFrom(const CSSkillBeginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);

  // required uint32 action_id = 2;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 action_id() const;
  inline void set_action_id(::google::protobuf::uint32 value);

  // required .CSPoint pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline const ::CSPoint& pos() const;
  inline ::CSPoint* mutable_pos();
  inline ::CSPoint* release_pos();
  inline void set_allocated_pos(::CSPoint* pos);

  // required float start_dir_x = 4;
  inline bool has_start_dir_x() const;
  inline void clear_start_dir_x();
  static const int kStartDirXFieldNumber = 4;
  inline float start_dir_x() const;
  inline void set_start_dir_x(float value);

  // required float start_dir_y = 5;
  inline bool has_start_dir_y() const;
  inline void clear_start_dir_y();
  static const int kStartDirYFieldNumber = 5;
  inline float start_dir_y() const;
  inline void set_start_dir_y(float value);

  // required .CSPoint target_pos = 6;
  inline bool has_target_pos() const;
  inline void clear_target_pos();
  static const int kTargetPosFieldNumber = 6;
  inline const ::CSPoint& target_pos() const;
  inline ::CSPoint* mutable_target_pos();
  inline ::CSPoint* release_target_pos();
  inline void set_allocated_target_pos(::CSPoint* target_pos);

  // required float direct_x = 7;
  inline bool has_direct_x() const;
  inline void clear_direct_x();
  static const int kDirectXFieldNumber = 7;
  inline float direct_x() const;
  inline void set_direct_x(float value);

  // required float direct_y = 8;
  inline bool has_direct_y() const;
  inline void clear_direct_y();
  static const int kDirectYFieldNumber = 8;
  inline float direct_y() const;
  inline void set_direct_y(float value);

  // required bool aim = 9;
  inline bool has_aim() const;
  inline void clear_aim();
  static const int kAimFieldNumber = 9;
  inline bool aim() const;
  inline void set_aim(bool value);

  // @@protoc_insertion_point(class_scope:CSSkillBeginRsp)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_start_dir_x();
  inline void clear_has_start_dir_x();
  inline void set_has_start_dir_y();
  inline void clear_has_start_dir_y();
  inline void set_has_target_pos();
  inline void clear_has_target_pos();
  inline void set_has_direct_x();
  inline void clear_has_direct_x();
  inline void set_has_direct_y();
  inline void clear_has_direct_y();
  inline void set_has_aim();
  inline void clear_has_aim();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 action_id_;
  ::CSPoint* pos_;
  float start_dir_x_;
  float start_dir_y_;
  ::CSPoint* target_pos_;
  float direct_x_;
  float direct_y_;
  bool aim_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSSkillBeginRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSPlayerAttackReq : public ::google::protobuf::Message {
 public:
  CSPlayerAttackReq();
  virtual ~CSPlayerAttackReq();

  CSPlayerAttackReq(const CSPlayerAttackReq& from);

  inline CSPlayerAttackReq& operator=(const CSPlayerAttackReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPlayerAttackReq& default_instance();

  void Swap(CSPlayerAttackReq* other);

  // implements Message ----------------------------------------------

  CSPlayerAttackReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPlayerAttackReq& from);
  void MergeFrom(const CSPlayerAttackReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);

  // required .CSPoint start_pos = 2;
  inline bool has_start_pos() const;
  inline void clear_start_pos();
  static const int kStartPosFieldNumber = 2;
  inline const ::CSPoint& start_pos() const;
  inline ::CSPoint* mutable_start_pos();
  inline ::CSPoint* release_start_pos();
  inline void set_allocated_start_pos(::CSPoint* start_pos);

  // required .CSPoint start_direct = 3;
  inline bool has_start_direct() const;
  inline void clear_start_direct();
  static const int kStartDirectFieldNumber = 3;
  inline const ::CSPoint& start_direct() const;
  inline ::CSPoint* mutable_start_direct();
  inline ::CSPoint* release_start_direct();
  inline void set_allocated_start_direct(::CSPoint* start_direct);

  // required .CSPoint end_pos = 4;
  inline bool has_end_pos() const;
  inline void clear_end_pos();
  static const int kEndPosFieldNumber = 4;
  inline const ::CSPoint& end_pos() const;
  inline ::CSPoint* mutable_end_pos();
  inline ::CSPoint* release_end_pos();
  inline void set_allocated_end_pos(::CSPoint* end_pos);

  // required .CSPoint end_direct = 5;
  inline bool has_end_direct() const;
  inline void clear_end_direct();
  static const int kEndDirectFieldNumber = 5;
  inline const ::CSPoint& end_direct() const;
  inline ::CSPoint* mutable_end_direct();
  inline ::CSPoint* release_end_direct();
  inline void set_allocated_end_direct(::CSPoint* end_direct);

  // required uint32 action_id = 6;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 6;
  inline ::google::protobuf::uint32 action_id() const;
  inline void set_action_id(::google::protobuf::uint32 value);

  // repeated .AttackMonsterInfo monsters = 7;
  inline int monsters_size() const;
  inline void clear_monsters();
  static const int kMonstersFieldNumber = 7;
  inline const ::AttackMonsterInfo& monsters(int index) const;
  inline ::AttackMonsterInfo* mutable_monsters(int index);
  inline ::AttackMonsterInfo* add_monsters();
  inline const ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >&
      monsters() const;
  inline ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >*
      mutable_monsters();

  // @@protoc_insertion_point(class_scope:CSPlayerAttackReq)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_start_pos();
  inline void clear_has_start_pos();
  inline void set_has_start_direct();
  inline void clear_has_start_direct();
  inline void set_has_end_pos();
  inline void clear_has_end_pos();
  inline void set_has_end_direct();
  inline void clear_has_end_direct();
  inline void set_has_action_id();
  inline void clear_has_action_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CSPoint* start_pos_;
  ::CSPoint* start_direct_;
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 action_id_;
  ::CSPoint* end_pos_;
  ::CSPoint* end_direct_;
  ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo > monsters_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSPlayerAttackReq* default_instance_;
};
// -------------------------------------------------------------------

class CSPlayerAttackRsp : public ::google::protobuf::Message {
 public:
  CSPlayerAttackRsp();
  virtual ~CSPlayerAttackRsp();

  CSPlayerAttackRsp(const CSPlayerAttackRsp& from);

  inline CSPlayerAttackRsp& operator=(const CSPlayerAttackRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPlayerAttackRsp& default_instance();

  void Swap(CSPlayerAttackRsp* other);

  // implements Message ----------------------------------------------

  CSPlayerAttackRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPlayerAttackRsp& from);
  void MergeFrom(const CSPlayerAttackRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);

  // required .CSPoint start_pos = 2;
  inline bool has_start_pos() const;
  inline void clear_start_pos();
  static const int kStartPosFieldNumber = 2;
  inline const ::CSPoint& start_pos() const;
  inline ::CSPoint* mutable_start_pos();
  inline ::CSPoint* release_start_pos();
  inline void set_allocated_start_pos(::CSPoint* start_pos);

  // required .CSPoint start_direct = 3;
  inline bool has_start_direct() const;
  inline void clear_start_direct();
  static const int kStartDirectFieldNumber = 3;
  inline const ::CSPoint& start_direct() const;
  inline ::CSPoint* mutable_start_direct();
  inline ::CSPoint* release_start_direct();
  inline void set_allocated_start_direct(::CSPoint* start_direct);

  // required .CSPoint end_pos = 4;
  inline bool has_end_pos() const;
  inline void clear_end_pos();
  static const int kEndPosFieldNumber = 4;
  inline const ::CSPoint& end_pos() const;
  inline ::CSPoint* mutable_end_pos();
  inline ::CSPoint* release_end_pos();
  inline void set_allocated_end_pos(::CSPoint* end_pos);

  // required .CSPoint end_direct = 5;
  inline bool has_end_direct() const;
  inline void clear_end_direct();
  static const int kEndDirectFieldNumber = 5;
  inline const ::CSPoint& end_direct() const;
  inline ::CSPoint* mutable_end_direct();
  inline ::CSPoint* release_end_direct();
  inline void set_allocated_end_direct(::CSPoint* end_direct);

  // required uint32 action_id = 6;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 6;
  inline ::google::protobuf::uint32 action_id() const;
  inline void set_action_id(::google::protobuf::uint32 value);

  // repeated .AttackMonsterInfo monsters = 7;
  inline int monsters_size() const;
  inline void clear_monsters();
  static const int kMonstersFieldNumber = 7;
  inline const ::AttackMonsterInfo& monsters(int index) const;
  inline ::AttackMonsterInfo* mutable_monsters(int index);
  inline ::AttackMonsterInfo* add_monsters();
  inline const ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >&
      monsters() const;
  inline ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >*
      mutable_monsters();

  // @@protoc_insertion_point(class_scope:CSPlayerAttackRsp)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_start_pos();
  inline void clear_has_start_pos();
  inline void set_has_start_direct();
  inline void clear_has_start_direct();
  inline void set_has_end_pos();
  inline void clear_has_end_pos();
  inline void set_has_end_direct();
  inline void clear_has_end_direct();
  inline void set_has_action_id();
  inline void clear_has_action_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CSPoint* start_pos_;
  ::CSPoint* start_direct_;
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 action_id_;
  ::CSPoint* end_pos_;
  ::CSPoint* end_direct_;
  ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo > monsters_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSPlayerAttackRsp* default_instance_;
};
// -------------------------------------------------------------------

class AttackPlayerInfo : public ::google::protobuf::Message {
 public:
  AttackPlayerInfo();
  virtual ~AttackPlayerInfo();

  AttackPlayerInfo(const AttackPlayerInfo& from);

  inline AttackPlayerInfo& operator=(const AttackPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttackPlayerInfo& default_instance();

  void Swap(AttackPlayerInfo* other);

  // implements Message ----------------------------------------------

  AttackPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttackPlayerInfo& from);
  void MergeFrom(const AttackPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);

  // required uint32 blood = 2;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 2;
  inline ::google::protobuf::uint32 blood() const;
  inline void set_blood(::google::protobuf::uint32 value);

  // required uint32 hurt_type = 3;
  inline bool has_hurt_type() const;
  inline void clear_hurt_type();
  static const int kHurtTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 hurt_type() const;
  inline void set_hurt_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:AttackPlayerInfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_blood();
  inline void clear_has_blood();
  inline void set_has_hurt_type();
  inline void clear_has_hurt_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 blood_;
  ::google::protobuf::uint32 hurt_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static AttackPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSPlayerHitPlayerReq : public ::google::protobuf::Message {
 public:
  CSPlayerHitPlayerReq();
  virtual ~CSPlayerHitPlayerReq();

  CSPlayerHitPlayerReq(const CSPlayerHitPlayerReq& from);

  inline CSPlayerHitPlayerReq& operator=(const CSPlayerHitPlayerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPlayerHitPlayerReq& default_instance();

  void Swap(CSPlayerHitPlayerReq* other);

  // implements Message ----------------------------------------------

  CSPlayerHitPlayerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPlayerHitPlayerReq& from);
  void MergeFrom(const CSPlayerHitPlayerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);

  // required .CSPoint start_pos = 2;
  inline bool has_start_pos() const;
  inline void clear_start_pos();
  static const int kStartPosFieldNumber = 2;
  inline const ::CSPoint& start_pos() const;
  inline ::CSPoint* mutable_start_pos();
  inline ::CSPoint* release_start_pos();
  inline void set_allocated_start_pos(::CSPoint* start_pos);

  // required .CSPoint start_direct = 3;
  inline bool has_start_direct() const;
  inline void clear_start_direct();
  static const int kStartDirectFieldNumber = 3;
  inline const ::CSPoint& start_direct() const;
  inline ::CSPoint* mutable_start_direct();
  inline ::CSPoint* release_start_direct();
  inline void set_allocated_start_direct(::CSPoint* start_direct);

  // required .CSPoint end_pos = 4;
  inline bool has_end_pos() const;
  inline void clear_end_pos();
  static const int kEndPosFieldNumber = 4;
  inline const ::CSPoint& end_pos() const;
  inline ::CSPoint* mutable_end_pos();
  inline ::CSPoint* release_end_pos();
  inline void set_allocated_end_pos(::CSPoint* end_pos);

  // required .CSPoint end_direct = 5;
  inline bool has_end_direct() const;
  inline void clear_end_direct();
  static const int kEndDirectFieldNumber = 5;
  inline const ::CSPoint& end_direct() const;
  inline ::CSPoint* mutable_end_direct();
  inline ::CSPoint* release_end_direct();
  inline void set_allocated_end_direct(::CSPoint* end_direct);

  // required uint32 action_id = 6;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 6;
  inline ::google::protobuf::uint32 action_id() const;
  inline void set_action_id(::google::protobuf::uint32 value);

  // repeated .AttackPlayerInfo users = 7;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 7;
  inline const ::AttackPlayerInfo& users(int index) const;
  inline ::AttackPlayerInfo* mutable_users(int index);
  inline ::AttackPlayerInfo* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::AttackPlayerInfo >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::AttackPlayerInfo >*
      mutable_users();

  // @@protoc_insertion_point(class_scope:CSPlayerHitPlayerReq)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_start_pos();
  inline void clear_has_start_pos();
  inline void set_has_start_direct();
  inline void clear_has_start_direct();
  inline void set_has_end_pos();
  inline void clear_has_end_pos();
  inline void set_has_end_direct();
  inline void clear_has_end_direct();
  inline void set_has_action_id();
  inline void clear_has_action_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CSPoint* start_pos_;
  ::CSPoint* start_direct_;
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 action_id_;
  ::CSPoint* end_pos_;
  ::CSPoint* end_direct_;
  ::google::protobuf::RepeatedPtrField< ::AttackPlayerInfo > users_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSPlayerHitPlayerReq* default_instance_;
};
// -------------------------------------------------------------------

class CSPlayerHitPlayerRsp : public ::google::protobuf::Message {
 public:
  CSPlayerHitPlayerRsp();
  virtual ~CSPlayerHitPlayerRsp();

  CSPlayerHitPlayerRsp(const CSPlayerHitPlayerRsp& from);

  inline CSPlayerHitPlayerRsp& operator=(const CSPlayerHitPlayerRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPlayerHitPlayerRsp& default_instance();

  void Swap(CSPlayerHitPlayerRsp* other);

  // implements Message ----------------------------------------------

  CSPlayerHitPlayerRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPlayerHitPlayerRsp& from);
  void MergeFrom(const CSPlayerHitPlayerRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);

  // required .CSPoint start_pos = 2;
  inline bool has_start_pos() const;
  inline void clear_start_pos();
  static const int kStartPosFieldNumber = 2;
  inline const ::CSPoint& start_pos() const;
  inline ::CSPoint* mutable_start_pos();
  inline ::CSPoint* release_start_pos();
  inline void set_allocated_start_pos(::CSPoint* start_pos);

  // required .CSPoint start_direct = 3;
  inline bool has_start_direct() const;
  inline void clear_start_direct();
  static const int kStartDirectFieldNumber = 3;
  inline const ::CSPoint& start_direct() const;
  inline ::CSPoint* mutable_start_direct();
  inline ::CSPoint* release_start_direct();
  inline void set_allocated_start_direct(::CSPoint* start_direct);

  // required .CSPoint end_pos = 4;
  inline bool has_end_pos() const;
  inline void clear_end_pos();
  static const int kEndPosFieldNumber = 4;
  inline const ::CSPoint& end_pos() const;
  inline ::CSPoint* mutable_end_pos();
  inline ::CSPoint* release_end_pos();
  inline void set_allocated_end_pos(::CSPoint* end_pos);

  // required .CSPoint end_direct = 5;
  inline bool has_end_direct() const;
  inline void clear_end_direct();
  static const int kEndDirectFieldNumber = 5;
  inline const ::CSPoint& end_direct() const;
  inline ::CSPoint* mutable_end_direct();
  inline ::CSPoint* release_end_direct();
  inline void set_allocated_end_direct(::CSPoint* end_direct);

  // required uint32 action_id = 6;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 6;
  inline ::google::protobuf::uint32 action_id() const;
  inline void set_action_id(::google::protobuf::uint32 value);

  // repeated .AttackPlayerInfo users = 7;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 7;
  inline const ::AttackPlayerInfo& users(int index) const;
  inline ::AttackPlayerInfo* mutable_users(int index);
  inline ::AttackPlayerInfo* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::AttackPlayerInfo >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::AttackPlayerInfo >*
      mutable_users();

  // @@protoc_insertion_point(class_scope:CSPlayerHitPlayerRsp)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_start_pos();
  inline void clear_has_start_pos();
  inline void set_has_start_direct();
  inline void clear_has_start_direct();
  inline void set_has_end_pos();
  inline void clear_has_end_pos();
  inline void set_has_end_direct();
  inline void clear_has_end_direct();
  inline void set_has_action_id();
  inline void clear_has_action_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CSPoint* start_pos_;
  ::CSPoint* start_direct_;
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 action_id_;
  ::CSPoint* end_pos_;
  ::CSPoint* end_direct_;
  ::google::protobuf::RepeatedPtrField< ::AttackPlayerInfo > users_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSPlayerHitPlayerRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSPlayerHPRsp : public ::google::protobuf::Message {
 public:
  CSPlayerHPRsp();
  virtual ~CSPlayerHPRsp();

  CSPlayerHPRsp(const CSPlayerHPRsp& from);

  inline CSPlayerHPRsp& operator=(const CSPlayerHPRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPlayerHPRsp& default_instance();

  void Swap(CSPlayerHPRsp* other);

  // implements Message ----------------------------------------------

  CSPlayerHPRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPlayerHPRsp& from);
  void MergeFrom(const CSPlayerHPRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);

  // required uint32 blood = 2;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 2;
  inline ::google::protobuf::uint32 blood() const;
  inline void set_blood(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSPlayerHPRsp)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_blood();
  inline void clear_has_blood();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 blood_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSPlayerHPRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterBloodRsp : public ::google::protobuf::Message {
 public:
  CSMonsterBloodRsp();
  virtual ~CSMonsterBloodRsp();

  CSMonsterBloodRsp(const CSMonsterBloodRsp& from);

  inline CSMonsterBloodRsp& operator=(const CSMonsterBloodRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterBloodRsp& default_instance();

  void Swap(CSMonsterBloodRsp* other);

  // implements Message ----------------------------------------------

  CSMonsterBloodRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterBloodRsp& from);
  void MergeFrom(const CSMonsterBloodRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CSAttackMonsterBackInfo monsters = 1;
  inline int monsters_size() const;
  inline void clear_monsters();
  static const int kMonstersFieldNumber = 1;
  inline const ::CSAttackMonsterBackInfo& monsters(int index) const;
  inline ::CSAttackMonsterBackInfo* mutable_monsters(int index);
  inline ::CSAttackMonsterBackInfo* add_monsters();
  inline const ::google::protobuf::RepeatedPtrField< ::CSAttackMonsterBackInfo >&
      monsters() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSAttackMonsterBackInfo >*
      mutable_monsters();

  // @@protoc_insertion_point(class_scope:CSMonsterBloodRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CSAttackMonsterBackInfo > monsters_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSMonsterBloodRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterDieRsp : public ::google::protobuf::Message {
 public:
  CSMonsterDieRsp();
  virtual ~CSMonsterDieRsp();

  CSMonsterDieRsp(const CSMonsterDieRsp& from);

  inline CSMonsterDieRsp& operator=(const CSMonsterDieRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterDieRsp& default_instance();

  void Swap(CSMonsterDieRsp* other);

  // implements Message ----------------------------------------------

  CSMonsterDieRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterDieRsp& from);
  void MergeFrom(const CSMonsterDieRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 monsters = 1;
  inline int monsters_size() const;
  inline void clear_monsters();
  static const int kMonstersFieldNumber = 1;
  inline ::google::protobuf::uint32 monsters(int index) const;
  inline void set_monsters(int index, ::google::protobuf::uint32 value);
  inline void add_monsters(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      monsters() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_monsters();

  // @@protoc_insertion_point(class_scope:CSMonsterDieRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > monsters_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSMonsterDieRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSABMonsterReq : public ::google::protobuf::Message {
 public:
  CSABMonsterReq();
  virtual ~CSABMonsterReq();

  CSABMonsterReq(const CSABMonsterReq& from);

  inline CSABMonsterReq& operator=(const CSABMonsterReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSABMonsterReq& default_instance();

  void Swap(CSABMonsterReq* other);

  // implements Message ----------------------------------------------

  CSABMonsterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSABMonsterReq& from);
  void MergeFrom(const CSABMonsterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 instance_id = 1;
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  inline ::google::protobuf::uint32 instance_id() const;
  inline void set_instance_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSABMonsterReq)
 private:
  inline void set_has_instance_id();
  inline void clear_has_instance_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 instance_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSABMonsterReq* default_instance_;
};
// -------------------------------------------------------------------

class CSABMonsterRsp_MonInfo : public ::google::protobuf::Message {
 public:
  CSABMonsterRsp_MonInfo();
  virtual ~CSABMonsterRsp_MonInfo();

  CSABMonsterRsp_MonInfo(const CSABMonsterRsp_MonInfo& from);

  inline CSABMonsterRsp_MonInfo& operator=(const CSABMonsterRsp_MonInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSABMonsterRsp_MonInfo& default_instance();

  void Swap(CSABMonsterRsp_MonInfo* other);

  // implements Message ----------------------------------------------

  CSABMonsterRsp_MonInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSABMonsterRsp_MonInfo& from);
  void MergeFrom(const CSABMonsterRsp_MonInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 mon_id = 1;
  inline bool has_mon_id() const;
  inline void clear_mon_id();
  static const int kMonIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mon_id() const;
  inline void set_mon_id(::google::protobuf::uint32 value);

  // required uint32 mon_num = 2;
  inline bool has_mon_num() const;
  inline void clear_mon_num();
  static const int kMonNumFieldNumber = 2;
  inline ::google::protobuf::uint32 mon_num() const;
  inline void set_mon_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSABMonsterRsp.MonInfo)
 private:
  inline void set_has_mon_id();
  inline void clear_has_mon_id();
  inline void set_has_mon_num();
  inline void clear_has_mon_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mon_id_;
  ::google::protobuf::uint32 mon_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSABMonsterRsp_MonInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSABMonsterRsp : public ::google::protobuf::Message {
 public:
  CSABMonsterRsp();
  virtual ~CSABMonsterRsp();

  CSABMonsterRsp(const CSABMonsterRsp& from);

  inline CSABMonsterRsp& operator=(const CSABMonsterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSABMonsterRsp& default_instance();

  void Swap(CSABMonsterRsp* other);

  // implements Message ----------------------------------------------

  CSABMonsterRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSABMonsterRsp& from);
  void MergeFrom(const CSABMonsterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSABMonsterRsp_MonInfo MonInfo;

  // accessors -------------------------------------------------------

  // required uint32 instance_id = 1;
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  inline ::google::protobuf::uint32 instance_id() const;
  inline void set_instance_id(::google::protobuf::uint32 value);

  // repeated .CSABMonsterRsp.MonInfo mon_infos = 2;
  inline int mon_infos_size() const;
  inline void clear_mon_infos();
  static const int kMonInfosFieldNumber = 2;
  inline const ::CSABMonsterRsp_MonInfo& mon_infos(int index) const;
  inline ::CSABMonsterRsp_MonInfo* mutable_mon_infos(int index);
  inline ::CSABMonsterRsp_MonInfo* add_mon_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::CSABMonsterRsp_MonInfo >&
      mon_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSABMonsterRsp_MonInfo >*
      mutable_mon_infos();

  // @@protoc_insertion_point(class_scope:CSABMonsterRsp)
 private:
  inline void set_has_instance_id();
  inline void clear_has_instance_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CSABMonsterRsp_MonInfo > mon_infos_;
  ::google::protobuf::uint32 instance_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSABMonsterRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSAutoBattleReq : public ::google::protobuf::Message {
 public:
  CSAutoBattleReq();
  virtual ~CSAutoBattleReq();

  CSAutoBattleReq(const CSAutoBattleReq& from);

  inline CSAutoBattleReq& operator=(const CSAutoBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSAutoBattleReq& default_instance();

  void Swap(CSAutoBattleReq* other);

  // implements Message ----------------------------------------------

  CSAutoBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSAutoBattleReq& from);
  void MergeFrom(const CSAutoBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 instance_id = 1;
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  inline ::google::protobuf::uint32 instance_id() const;
  inline void set_instance_id(::google::protobuf::uint32 value);

  // required uint32 turn_num = 2;
  inline bool has_turn_num() const;
  inline void clear_turn_num();
  static const int kTurnNumFieldNumber = 2;
  inline ::google::protobuf::uint32 turn_num() const;
  inline void set_turn_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSAutoBattleReq)
 private:
  inline void set_has_instance_id();
  inline void clear_has_instance_id();
  inline void set_has_turn_num();
  inline void clear_has_turn_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 instance_id_;
  ::google::protobuf::uint32 turn_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSAutoBattleReq* default_instance_;
};
// -------------------------------------------------------------------

class CSAutoBattleRsp : public ::google::protobuf::Message {
 public:
  CSAutoBattleRsp();
  virtual ~CSAutoBattleRsp();

  CSAutoBattleRsp(const CSAutoBattleRsp& from);

  inline CSAutoBattleRsp& operator=(const CSAutoBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSAutoBattleRsp& default_instance();

  void Swap(CSAutoBattleRsp* other);

  // implements Message ----------------------------------------------

  CSAutoBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSAutoBattleRsp& from);
  void MergeFrom(const CSAutoBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // required uint32 cd = 2;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 2;
  inline ::google::protobuf::uint32 cd() const;
  inline void set_cd(::google::protobuf::uint32 value);

  // required uint32 instance_id = 3;
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 3;
  inline ::google::protobuf::uint32 instance_id() const;
  inline void set_instance_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSAutoBattleRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_cd();
  inline void clear_has_cd();
  inline void set_has_instance_id();
  inline void clear_has_instance_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 cd_;
  ::google::protobuf::uint32 instance_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSAutoBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSABRewardRsp : public ::google::protobuf::Message {
 public:
  CSABRewardRsp();
  virtual ~CSABRewardRsp();

  CSABRewardRsp(const CSABRewardRsp& from);

  inline CSABRewardRsp& operator=(const CSABRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSABRewardRsp& default_instance();

  void Swap(CSABRewardRsp* other);

  // implements Message ----------------------------------------------

  CSABRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSABRewardRsp& from);
  void MergeFrom(const CSABRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 instance_id = 1;
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  inline ::google::protobuf::uint32 instance_id() const;
  inline void set_instance_id(::google::protobuf::uint32 value);

  // required .CSReward rewards = 2;
  inline bool has_rewards() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 2;
  inline const ::CSReward& rewards() const;
  inline ::CSReward* mutable_rewards();
  inline ::CSReward* release_rewards();
  inline void set_allocated_rewards(::CSReward* rewards);

  // @@protoc_insertion_point(class_scope:CSABRewardRsp)
 private:
  inline void set_has_instance_id();
  inline void clear_has_instance_id();
  inline void set_has_rewards();
  inline void clear_has_rewards();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CSReward* rewards_;
  ::google::protobuf::uint32 instance_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSABRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSCancelAutoBattleReq : public ::google::protobuf::Message {
 public:
  CSCancelAutoBattleReq();
  virtual ~CSCancelAutoBattleReq();

  CSCancelAutoBattleReq(const CSCancelAutoBattleReq& from);

  inline CSCancelAutoBattleReq& operator=(const CSCancelAutoBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSCancelAutoBattleReq& default_instance();

  void Swap(CSCancelAutoBattleReq* other);

  // implements Message ----------------------------------------------

  CSCancelAutoBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSCancelAutoBattleReq& from);
  void MergeFrom(const CSCancelAutoBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSCancelAutoBattleReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSCancelAutoBattleReq* default_instance_;
};
// -------------------------------------------------------------------

class CSCancelAutoBattleRsp : public ::google::protobuf::Message {
 public:
  CSCancelAutoBattleRsp();
  virtual ~CSCancelAutoBattleRsp();

  CSCancelAutoBattleRsp(const CSCancelAutoBattleRsp& from);

  inline CSCancelAutoBattleRsp& operator=(const CSCancelAutoBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSCancelAutoBattleRsp& default_instance();

  void Swap(CSCancelAutoBattleRsp* other);

  // implements Message ----------------------------------------------

  CSCancelAutoBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSCancelAutoBattleRsp& from);
  void MergeFrom(const CSCancelAutoBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSCancelAutoBattleRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static CSCancelAutoBattleRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// CSPoint

// required int32 xpos = 1;
inline bool CSPoint::has_xpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPoint::set_has_xpos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPoint::clear_has_xpos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPoint::clear_xpos() {
  xpos_ = 0;
  clear_has_xpos();
}
inline ::google::protobuf::int32 CSPoint::xpos() const {
  return xpos_;
}
inline void CSPoint::set_xpos(::google::protobuf::int32 value) {
  set_has_xpos();
  xpos_ = value;
}

// required int32 ypos = 2;
inline bool CSPoint::has_ypos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSPoint::set_has_ypos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSPoint::clear_has_ypos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSPoint::clear_ypos() {
  ypos_ = 0;
  clear_has_ypos();
}
inline ::google::protobuf::int32 CSPoint::ypos() const {
  return ypos_;
}
inline void CSPoint::set_ypos(::google::protobuf::int32 value) {
  set_has_ypos();
  ypos_ = value;
}

// -------------------------------------------------------------------

// CSBattleMoveReq

// required uint32 id = 1;
inline bool CSBattleMoveReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSBattleMoveReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSBattleMoveReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSBattleMoveReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSBattleMoveReq::id() const {
  return id_;
}
inline void CSBattleMoveReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .CSPoint direct = 2;
inline bool CSBattleMoveReq::has_direct() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSBattleMoveReq::set_has_direct() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSBattleMoveReq::clear_has_direct() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSBattleMoveReq::clear_direct() {
  if (direct_ != NULL) direct_->::CSPoint::Clear();
  clear_has_direct();
}
inline const ::CSPoint& CSBattleMoveReq::direct() const {
  return direct_ != NULL ? *direct_ : *default_instance_->direct_;
}
inline ::CSPoint* CSBattleMoveReq::mutable_direct() {
  set_has_direct();
  if (direct_ == NULL) direct_ = new ::CSPoint;
  return direct_;
}
inline ::CSPoint* CSBattleMoveReq::release_direct() {
  clear_has_direct();
  ::CSPoint* temp = direct_;
  direct_ = NULL;
  return temp;
}
inline void CSBattleMoveReq::set_allocated_direct(::CSPoint* direct) {
  delete direct_;
  direct_ = direct;
  if (direct) {
    set_has_direct();
  } else {
    clear_has_direct();
  }
}

// required .CSPoint pos = 3;
inline bool CSBattleMoveReq::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSBattleMoveReq::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSBattleMoveReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSBattleMoveReq::clear_pos() {
  if (pos_ != NULL) pos_->::CSPoint::Clear();
  clear_has_pos();
}
inline const ::CSPoint& CSBattleMoveReq::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::CSPoint* CSBattleMoveReq::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::CSPoint;
  return pos_;
}
inline ::CSPoint* CSBattleMoveReq::release_pos() {
  clear_has_pos();
  ::CSPoint* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void CSBattleMoveReq::set_allocated_pos(::CSPoint* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// required uint32 time = 4;
inline bool CSBattleMoveReq::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSBattleMoveReq::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSBattleMoveReq::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSBattleMoveReq::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CSBattleMoveReq::time() const {
  return time_;
}
inline void CSBattleMoveReq::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// CSBattleMoveRsp

// required uint32 id = 1;
inline bool CSBattleMoveRsp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSBattleMoveRsp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSBattleMoveRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSBattleMoveRsp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSBattleMoveRsp::id() const {
  return id_;
}
inline void CSBattleMoveRsp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .CSPoint direct = 2;
inline bool CSBattleMoveRsp::has_direct() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSBattleMoveRsp::set_has_direct() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSBattleMoveRsp::clear_has_direct() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSBattleMoveRsp::clear_direct() {
  if (direct_ != NULL) direct_->::CSPoint::Clear();
  clear_has_direct();
}
inline const ::CSPoint& CSBattleMoveRsp::direct() const {
  return direct_ != NULL ? *direct_ : *default_instance_->direct_;
}
inline ::CSPoint* CSBattleMoveRsp::mutable_direct() {
  set_has_direct();
  if (direct_ == NULL) direct_ = new ::CSPoint;
  return direct_;
}
inline ::CSPoint* CSBattleMoveRsp::release_direct() {
  clear_has_direct();
  ::CSPoint* temp = direct_;
  direct_ = NULL;
  return temp;
}
inline void CSBattleMoveRsp::set_allocated_direct(::CSPoint* direct) {
  delete direct_;
  direct_ = direct;
  if (direct) {
    set_has_direct();
  } else {
    clear_has_direct();
  }
}

// required .CSPoint pos = 3;
inline bool CSBattleMoveRsp::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSBattleMoveRsp::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSBattleMoveRsp::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSBattleMoveRsp::clear_pos() {
  if (pos_ != NULL) pos_->::CSPoint::Clear();
  clear_has_pos();
}
inline const ::CSPoint& CSBattleMoveRsp::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::CSPoint* CSBattleMoveRsp::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::CSPoint;
  return pos_;
}
inline ::CSPoint* CSBattleMoveRsp::release_pos() {
  clear_has_pos();
  ::CSPoint* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void CSBattleMoveRsp::set_allocated_pos(::CSPoint* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// required uint32 time = 4;
inline bool CSBattleMoveRsp::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSBattleMoveRsp::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSBattleMoveRsp::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSBattleMoveRsp::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CSBattleMoveRsp::time() const {
  return time_;
}
inline void CSBattleMoveRsp::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// MonsterMoveValue

// required uint32 id = 1;
inline bool MonsterMoveValue::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonsterMoveValue::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonsterMoveValue::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonsterMoveValue::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 MonsterMoveValue::id() const {
  return id_;
}
inline void MonsterMoveValue::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .CSPoint direct = 2;
inline bool MonsterMoveValue::has_direct() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonsterMoveValue::set_has_direct() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonsterMoveValue::clear_has_direct() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonsterMoveValue::clear_direct() {
  if (direct_ != NULL) direct_->::CSPoint::Clear();
  clear_has_direct();
}
inline const ::CSPoint& MonsterMoveValue::direct() const {
  return direct_ != NULL ? *direct_ : *default_instance_->direct_;
}
inline ::CSPoint* MonsterMoveValue::mutable_direct() {
  set_has_direct();
  if (direct_ == NULL) direct_ = new ::CSPoint;
  return direct_;
}
inline ::CSPoint* MonsterMoveValue::release_direct() {
  clear_has_direct();
  ::CSPoint* temp = direct_;
  direct_ = NULL;
  return temp;
}
inline void MonsterMoveValue::set_allocated_direct(::CSPoint* direct) {
  delete direct_;
  direct_ = direct;
  if (direct) {
    set_has_direct();
  } else {
    clear_has_direct();
  }
}

// repeated .CSPoint paths = 3;
inline int MonsterMoveValue::paths_size() const {
  return paths_.size();
}
inline void MonsterMoveValue::clear_paths() {
  paths_.Clear();
}
inline const ::CSPoint& MonsterMoveValue::paths(int index) const {
  return paths_.Get(index);
}
inline ::CSPoint* MonsterMoveValue::mutable_paths(int index) {
  return paths_.Mutable(index);
}
inline ::CSPoint* MonsterMoveValue::add_paths() {
  return paths_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSPoint >&
MonsterMoveValue::paths() const {
  return paths_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSPoint >*
MonsterMoveValue::mutable_paths() {
  return &paths_;
}

// -------------------------------------------------------------------

// CSMonsterMoveRsp

// repeated .MonsterMoveValue moves = 1;
inline int CSMonsterMoveRsp::moves_size() const {
  return moves_.size();
}
inline void CSMonsterMoveRsp::clear_moves() {
  moves_.Clear();
}
inline const ::MonsterMoveValue& CSMonsterMoveRsp::moves(int index) const {
  return moves_.Get(index);
}
inline ::MonsterMoveValue* CSMonsterMoveRsp::mutable_moves(int index) {
  return moves_.Mutable(index);
}
inline ::MonsterMoveValue* CSMonsterMoveRsp::add_moves() {
  return moves_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MonsterMoveValue >&
CSMonsterMoveRsp::moves() const {
  return moves_;
}
inline ::google::protobuf::RepeatedPtrField< ::MonsterMoveValue >*
CSMonsterMoveRsp::mutable_moves() {
  return &moves_;
}

// -------------------------------------------------------------------

// CSBattleCreateReq

// required uint32 battle_id = 1;
inline bool CSBattleCreateReq::has_battle_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSBattleCreateReq::set_has_battle_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSBattleCreateReq::clear_has_battle_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSBattleCreateReq::clear_battle_id() {
  battle_id_ = 0u;
  clear_has_battle_id();
}
inline ::google::protobuf::uint32 CSBattleCreateReq::battle_id() const {
  return battle_id_;
}
inline void CSBattleCreateReq::set_battle_id(::google::protobuf::uint32 value) {
  set_has_battle_id();
  battle_id_ = value;
}

// required uint32 map_id = 2;
inline bool CSBattleCreateReq::has_map_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSBattleCreateReq::set_has_map_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSBattleCreateReq::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSBattleCreateReq::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 CSBattleCreateReq::map_id() const {
  return map_id_;
}
inline void CSBattleCreateReq::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// -------------------------------------------------------------------

// MonsterBattleInfo

// required uint32 physical_attack = 1;
inline bool MonsterBattleInfo::has_physical_attack() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonsterBattleInfo::set_has_physical_attack() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonsterBattleInfo::clear_has_physical_attack() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonsterBattleInfo::clear_physical_attack() {
  physical_attack_ = 0u;
  clear_has_physical_attack();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::physical_attack() const {
  return physical_attack_;
}
inline void MonsterBattleInfo::set_physical_attack(::google::protobuf::uint32 value) {
  set_has_physical_attack();
  physical_attack_ = value;
}

// required uint32 magic_attack = 2;
inline bool MonsterBattleInfo::has_magic_attack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonsterBattleInfo::set_has_magic_attack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonsterBattleInfo::clear_has_magic_attack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonsterBattleInfo::clear_magic_attack() {
  magic_attack_ = 0u;
  clear_has_magic_attack();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::magic_attack() const {
  return magic_attack_;
}
inline void MonsterBattleInfo::set_magic_attack(::google::protobuf::uint32 value) {
  set_has_magic_attack();
  magic_attack_ = value;
}

// required uint32 skill_attack = 3;
inline bool MonsterBattleInfo::has_skill_attack() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonsterBattleInfo::set_has_skill_attack() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonsterBattleInfo::clear_has_skill_attack() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonsterBattleInfo::clear_skill_attack() {
  skill_attack_ = 0u;
  clear_has_skill_attack();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::skill_attack() const {
  return skill_attack_;
}
inline void MonsterBattleInfo::set_skill_attack(::google::protobuf::uint32 value) {
  set_has_skill_attack();
  skill_attack_ = value;
}

// required uint32 physical_defence = 4;
inline bool MonsterBattleInfo::has_physical_defence() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MonsterBattleInfo::set_has_physical_defence() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MonsterBattleInfo::clear_has_physical_defence() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MonsterBattleInfo::clear_physical_defence() {
  physical_defence_ = 0u;
  clear_has_physical_defence();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::physical_defence() const {
  return physical_defence_;
}
inline void MonsterBattleInfo::set_physical_defence(::google::protobuf::uint32 value) {
  set_has_physical_defence();
  physical_defence_ = value;
}

// required uint32 magic_defence = 5;
inline bool MonsterBattleInfo::has_magic_defence() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MonsterBattleInfo::set_has_magic_defence() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MonsterBattleInfo::clear_has_magic_defence() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MonsterBattleInfo::clear_magic_defence() {
  magic_defence_ = 0u;
  clear_has_magic_defence();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::magic_defence() const {
  return magic_defence_;
}
inline void MonsterBattleInfo::set_magic_defence(::google::protobuf::uint32 value) {
  set_has_magic_defence();
  magic_defence_ = value;
}

// required uint32 skill_defence = 6;
inline bool MonsterBattleInfo::has_skill_defence() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MonsterBattleInfo::set_has_skill_defence() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MonsterBattleInfo::clear_has_skill_defence() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MonsterBattleInfo::clear_skill_defence() {
  skill_defence_ = 0u;
  clear_has_skill_defence();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::skill_defence() const {
  return skill_defence_;
}
inline void MonsterBattleInfo::set_skill_defence(::google::protobuf::uint32 value) {
  set_has_skill_defence();
  skill_defence_ = value;
}

// required uint32 health_point = 7;
inline bool MonsterBattleInfo::has_health_point() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MonsterBattleInfo::set_has_health_point() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MonsterBattleInfo::clear_has_health_point() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MonsterBattleInfo::clear_health_point() {
  health_point_ = 0u;
  clear_has_health_point();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::health_point() const {
  return health_point_;
}
inline void MonsterBattleInfo::set_health_point(::google::protobuf::uint32 value) {
  set_has_health_point();
  health_point_ = value;
}

// required uint32 accurate = 8;
inline bool MonsterBattleInfo::has_accurate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MonsterBattleInfo::set_has_accurate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MonsterBattleInfo::clear_has_accurate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MonsterBattleInfo::clear_accurate() {
  accurate_ = 0u;
  clear_has_accurate();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::accurate() const {
  return accurate_;
}
inline void MonsterBattleInfo::set_accurate(::google::protobuf::uint32 value) {
  set_has_accurate();
  accurate_ = value;
}

// required uint32 dodge = 9;
inline bool MonsterBattleInfo::has_dodge() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MonsterBattleInfo::set_has_dodge() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MonsterBattleInfo::clear_has_dodge() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MonsterBattleInfo::clear_dodge() {
  dodge_ = 0u;
  clear_has_dodge();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::dodge() const {
  return dodge_;
}
inline void MonsterBattleInfo::set_dodge(::google::protobuf::uint32 value) {
  set_has_dodge();
  dodge_ = value;
}

// required uint32 wreck = 10;
inline bool MonsterBattleInfo::has_wreck() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MonsterBattleInfo::set_has_wreck() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MonsterBattleInfo::clear_has_wreck() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MonsterBattleInfo::clear_wreck() {
  wreck_ = 0u;
  clear_has_wreck();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::wreck() const {
  return wreck_;
}
inline void MonsterBattleInfo::set_wreck(::google::protobuf::uint32 value) {
  set_has_wreck();
  wreck_ = value;
}

// required uint32 parry = 11;
inline bool MonsterBattleInfo::has_parry() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MonsterBattleInfo::set_has_parry() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MonsterBattleInfo::clear_has_parry() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MonsterBattleInfo::clear_parry() {
  parry_ = 0u;
  clear_has_parry();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::parry() const {
  return parry_;
}
inline void MonsterBattleInfo::set_parry(::google::protobuf::uint32 value) {
  set_has_parry();
  parry_ = value;
}

// required uint32 critical_strike = 12;
inline bool MonsterBattleInfo::has_critical_strike() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MonsterBattleInfo::set_has_critical_strike() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MonsterBattleInfo::clear_has_critical_strike() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MonsterBattleInfo::clear_critical_strike() {
  critical_strike_ = 0u;
  clear_has_critical_strike();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::critical_strike() const {
  return critical_strike_;
}
inline void MonsterBattleInfo::set_critical_strike(::google::protobuf::uint32 value) {
  set_has_critical_strike();
  critical_strike_ = value;
}

// required uint32 tenacity = 13;
inline bool MonsterBattleInfo::has_tenacity() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MonsterBattleInfo::set_has_tenacity() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MonsterBattleInfo::clear_has_tenacity() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MonsterBattleInfo::clear_tenacity() {
  tenacity_ = 0u;
  clear_has_tenacity();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::tenacity() const {
  return tenacity_;
}
inline void MonsterBattleInfo::set_tenacity(::google::protobuf::uint32 value) {
  set_has_tenacity();
  tenacity_ = value;
}

// required uint32 slay = 14;
inline bool MonsterBattleInfo::has_slay() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MonsterBattleInfo::set_has_slay() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MonsterBattleInfo::clear_has_slay() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MonsterBattleInfo::clear_slay() {
  slay_ = 0u;
  clear_has_slay();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::slay() const {
  return slay_;
}
inline void MonsterBattleInfo::set_slay(::google::protobuf::uint32 value) {
  set_has_slay();
  slay_ = value;
}

// required uint32 proficiency = 15;
inline bool MonsterBattleInfo::has_proficiency() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MonsterBattleInfo::set_has_proficiency() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MonsterBattleInfo::clear_has_proficiency() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MonsterBattleInfo::clear_proficiency() {
  proficiency_ = 0u;
  clear_has_proficiency();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::proficiency() const {
  return proficiency_;
}
inline void MonsterBattleInfo::set_proficiency(::google::protobuf::uint32 value) {
  set_has_proficiency();
  proficiency_ = value;
}

// -------------------------------------------------------------------

// MonsterInfo

// required uint32 id = 1;
inline bool MonsterInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonsterInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonsterInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonsterInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 MonsterInfo::id() const {
  return id_;
}
inline void MonsterInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 type_id = 2;
inline bool MonsterInfo::has_type_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonsterInfo::set_has_type_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonsterInfo::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonsterInfo::clear_type_id() {
  type_id_ = 0u;
  clear_has_type_id();
}
inline ::google::protobuf::uint32 MonsterInfo::type_id() const {
  return type_id_;
}
inline void MonsterInfo::set_type_id(::google::protobuf::uint32 value) {
  set_has_type_id();
  type_id_ = value;
}

// required uint32 level = 3;
inline bool MonsterInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonsterInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonsterInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonsterInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 MonsterInfo::level() const {
  return level_;
}
inline void MonsterInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 blood = 4;
inline bool MonsterInfo::has_blood() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MonsterInfo::set_has_blood() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MonsterInfo::clear_has_blood() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MonsterInfo::clear_blood() {
  blood_ = 0u;
  clear_has_blood();
}
inline ::google::protobuf::uint32 MonsterInfo::blood() const {
  return blood_;
}
inline void MonsterInfo::set_blood(::google::protobuf::uint32 value) {
  set_has_blood();
  blood_ = value;
}

// required .CSPoint point = 5;
inline bool MonsterInfo::has_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MonsterInfo::set_has_point() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MonsterInfo::clear_has_point() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MonsterInfo::clear_point() {
  if (point_ != NULL) point_->::CSPoint::Clear();
  clear_has_point();
}
inline const ::CSPoint& MonsterInfo::point() const {
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
inline ::CSPoint* MonsterInfo::mutable_point() {
  set_has_point();
  if (point_ == NULL) point_ = new ::CSPoint;
  return point_;
}
inline ::CSPoint* MonsterInfo::release_point() {
  clear_has_point();
  ::CSPoint* temp = point_;
  point_ = NULL;
  return temp;
}
inline void MonsterInfo::set_allocated_point(::CSPoint* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
}

// required .CSPoint direct = 6;
inline bool MonsterInfo::has_direct() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MonsterInfo::set_has_direct() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MonsterInfo::clear_has_direct() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MonsterInfo::clear_direct() {
  if (direct_ != NULL) direct_->::CSPoint::Clear();
  clear_has_direct();
}
inline const ::CSPoint& MonsterInfo::direct() const {
  return direct_ != NULL ? *direct_ : *default_instance_->direct_;
}
inline ::CSPoint* MonsterInfo::mutable_direct() {
  set_has_direct();
  if (direct_ == NULL) direct_ = new ::CSPoint;
  return direct_;
}
inline ::CSPoint* MonsterInfo::release_direct() {
  clear_has_direct();
  ::CSPoint* temp = direct_;
  direct_ = NULL;
  return temp;
}
inline void MonsterInfo::set_allocated_direct(::CSPoint* direct) {
  delete direct_;
  direct_ = direct;
  if (direct) {
    set_has_direct();
  } else {
    clear_has_direct();
  }
}

// required uint32 speed = 7;
inline bool MonsterInfo::has_speed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MonsterInfo::set_has_speed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MonsterInfo::clear_has_speed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MonsterInfo::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
inline ::google::protobuf::uint32 MonsterInfo::speed() const {
  return speed_;
}
inline void MonsterInfo::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
}

// required bool boss = 8;
inline bool MonsterInfo::has_boss() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MonsterInfo::set_has_boss() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MonsterInfo::clear_has_boss() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MonsterInfo::clear_boss() {
  boss_ = false;
  clear_has_boss();
}
inline bool MonsterInfo::boss() const {
  return boss_;
}
inline void MonsterInfo::set_boss(bool value) {
  set_has_boss();
  boss_ = value;
}

// required .MonsterMoveValue moves = 9;
inline bool MonsterInfo::has_moves() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MonsterInfo::set_has_moves() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MonsterInfo::clear_has_moves() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MonsterInfo::clear_moves() {
  if (moves_ != NULL) moves_->::MonsterMoveValue::Clear();
  clear_has_moves();
}
inline const ::MonsterMoveValue& MonsterInfo::moves() const {
  return moves_ != NULL ? *moves_ : *default_instance_->moves_;
}
inline ::MonsterMoveValue* MonsterInfo::mutable_moves() {
  set_has_moves();
  if (moves_ == NULL) moves_ = new ::MonsterMoveValue;
  return moves_;
}
inline ::MonsterMoveValue* MonsterInfo::release_moves() {
  clear_has_moves();
  ::MonsterMoveValue* temp = moves_;
  moves_ = NULL;
  return temp;
}
inline void MonsterInfo::set_allocated_moves(::MonsterMoveValue* moves) {
  delete moves_;
  moves_ = moves;
  if (moves) {
    set_has_moves();
  } else {
    clear_has_moves();
  }
}

// optional .MonsterBattleInfo battle_info = 10;
inline bool MonsterInfo::has_battle_info() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MonsterInfo::set_has_battle_info() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MonsterInfo::clear_has_battle_info() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MonsterInfo::clear_battle_info() {
  if (battle_info_ != NULL) battle_info_->::MonsterBattleInfo::Clear();
  clear_has_battle_info();
}
inline const ::MonsterBattleInfo& MonsterInfo::battle_info() const {
  return battle_info_ != NULL ? *battle_info_ : *default_instance_->battle_info_;
}
inline ::MonsterBattleInfo* MonsterInfo::mutable_battle_info() {
  set_has_battle_info();
  if (battle_info_ == NULL) battle_info_ = new ::MonsterBattleInfo;
  return battle_info_;
}
inline ::MonsterBattleInfo* MonsterInfo::release_battle_info() {
  clear_has_battle_info();
  ::MonsterBattleInfo* temp = battle_info_;
  battle_info_ = NULL;
  return temp;
}
inline void MonsterInfo::set_allocated_battle_info(::MonsterBattleInfo* battle_info) {
  delete battle_info_;
  battle_info_ = battle_info;
  if (battle_info) {
    set_has_battle_info();
  } else {
    clear_has_battle_info();
  }
}

// required bool elite = 11;
inline bool MonsterInfo::has_elite() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MonsterInfo::set_has_elite() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MonsterInfo::clear_has_elite() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MonsterInfo::clear_elite() {
  elite_ = false;
  clear_has_elite();
}
inline bool MonsterInfo::elite() const {
  return elite_;
}
inline void MonsterInfo::set_elite(bool value) {
  set_has_elite();
  elite_ = value;
}

// -------------------------------------------------------------------

// CSBattleCreateRsp

// repeated .MonsterInfo monsterinfo = 1;
inline int CSBattleCreateRsp::monsterinfo_size() const {
  return monsterinfo_.size();
}
inline void CSBattleCreateRsp::clear_monsterinfo() {
  monsterinfo_.Clear();
}
inline const ::MonsterInfo& CSBattleCreateRsp::monsterinfo(int index) const {
  return monsterinfo_.Get(index);
}
inline ::MonsterInfo* CSBattleCreateRsp::mutable_monsterinfo(int index) {
  return monsterinfo_.Mutable(index);
}
inline ::MonsterInfo* CSBattleCreateRsp::add_monsterinfo() {
  return monsterinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MonsterInfo >&
CSBattleCreateRsp::monsterinfo() const {
  return monsterinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::MonsterInfo >*
CSBattleCreateRsp::mutable_monsterinfo() {
  return &monsterinfo_;
}

// repeated .BasicUserInfo userinfo = 2;
inline int CSBattleCreateRsp::userinfo_size() const {
  return userinfo_.size();
}
inline void CSBattleCreateRsp::clear_userinfo() {
  userinfo_.Clear();
}
inline const ::BasicUserInfo& CSBattleCreateRsp::userinfo(int index) const {
  return userinfo_.Get(index);
}
inline ::BasicUserInfo* CSBattleCreateRsp::mutable_userinfo(int index) {
  return userinfo_.Mutable(index);
}
inline ::BasicUserInfo* CSBattleCreateRsp::add_userinfo() {
  return userinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BasicUserInfo >&
CSBattleCreateRsp::userinfo() const {
  return userinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::BasicUserInfo >*
CSBattleCreateRsp::mutable_userinfo() {
  return &userinfo_;
}

// required uint32 battle_id = 3;
inline bool CSBattleCreateRsp::has_battle_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSBattleCreateRsp::set_has_battle_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSBattleCreateRsp::clear_has_battle_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSBattleCreateRsp::clear_battle_id() {
  battle_id_ = 0u;
  clear_has_battle_id();
}
inline ::google::protobuf::uint32 CSBattleCreateRsp::battle_id() const {
  return battle_id_;
}
inline void CSBattleCreateRsp::set_battle_id(::google::protobuf::uint32 value) {
  set_has_battle_id();
  battle_id_ = value;
}

// required uint32 map_id = 4;
inline bool CSBattleCreateRsp::has_map_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSBattleCreateRsp::set_has_map_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSBattleCreateRsp::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSBattleCreateRsp::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 CSBattleCreateRsp::map_id() const {
  return map_id_;
}
inline void CSBattleCreateRsp::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// required .CSPoint portal = 5;
inline bool CSBattleCreateRsp::has_portal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSBattleCreateRsp::set_has_portal() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSBattleCreateRsp::clear_has_portal() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSBattleCreateRsp::clear_portal() {
  if (portal_ != NULL) portal_->::CSPoint::Clear();
  clear_has_portal();
}
inline const ::CSPoint& CSBattleCreateRsp::portal() const {
  return portal_ != NULL ? *portal_ : *default_instance_->portal_;
}
inline ::CSPoint* CSBattleCreateRsp::mutable_portal() {
  set_has_portal();
  if (portal_ == NULL) portal_ = new ::CSPoint;
  return portal_;
}
inline ::CSPoint* CSBattleCreateRsp::release_portal() {
  clear_has_portal();
  ::CSPoint* temp = portal_;
  portal_ = NULL;
  return temp;
}
inline void CSBattleCreateRsp::set_allocated_portal(::CSPoint* portal) {
  delete portal_;
  portal_ = portal;
  if (portal) {
    set_has_portal();
  } else {
    clear_has_portal();
  }
}

// required uint32 portal_map_id = 6;
inline bool CSBattleCreateRsp::has_portal_map_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSBattleCreateRsp::set_has_portal_map_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSBattleCreateRsp::clear_has_portal_map_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSBattleCreateRsp::clear_portal_map_id() {
  portal_map_id_ = 0u;
  clear_has_portal_map_id();
}
inline ::google::protobuf::uint32 CSBattleCreateRsp::portal_map_id() const {
  return portal_map_id_;
}
inline void CSBattleCreateRsp::set_portal_map_id(::google::protobuf::uint32 value) {
  set_has_portal_map_id();
  portal_map_id_ = value;
}

// optional uint32 timeout = 7;
inline bool CSBattleCreateRsp::has_timeout() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSBattleCreateRsp::set_has_timeout() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSBattleCreateRsp::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSBattleCreateRsp::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
inline ::google::protobuf::uint32 CSBattleCreateRsp::timeout() const {
  return timeout_;
}
inline void CSBattleCreateRsp::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
}

// repeated .CSPoint monsterbirth = 8;
inline int CSBattleCreateRsp::monsterbirth_size() const {
  return monsterbirth_.size();
}
inline void CSBattleCreateRsp::clear_monsterbirth() {
  monsterbirth_.Clear();
}
inline const ::CSPoint& CSBattleCreateRsp::monsterbirth(int index) const {
  return monsterbirth_.Get(index);
}
inline ::CSPoint* CSBattleCreateRsp::mutable_monsterbirth(int index) {
  return monsterbirth_.Mutable(index);
}
inline ::CSPoint* CSBattleCreateRsp::add_monsterbirth() {
  return monsterbirth_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSPoint >&
CSBattleCreateRsp::monsterbirth() const {
  return monsterbirth_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSPoint >*
CSBattleCreateRsp::mutable_monsterbirth() {
  return &monsterbirth_;
}

// -------------------------------------------------------------------

// CSBattleMonsterCreateRsp

// repeated .MonsterInfo monsterinfo = 1;
inline int CSBattleMonsterCreateRsp::monsterinfo_size() const {
  return monsterinfo_.size();
}
inline void CSBattleMonsterCreateRsp::clear_monsterinfo() {
  monsterinfo_.Clear();
}
inline const ::MonsterInfo& CSBattleMonsterCreateRsp::monsterinfo(int index) const {
  return monsterinfo_.Get(index);
}
inline ::MonsterInfo* CSBattleMonsterCreateRsp::mutable_monsterinfo(int index) {
  return monsterinfo_.Mutable(index);
}
inline ::MonsterInfo* CSBattleMonsterCreateRsp::add_monsterinfo() {
  return monsterinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MonsterInfo >&
CSBattleMonsterCreateRsp::monsterinfo() const {
  return monsterinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::MonsterInfo >*
CSBattleMonsterCreateRsp::mutable_monsterinfo() {
  return &monsterinfo_;
}

// -------------------------------------------------------------------

// CSBattleUserJoinRsp

// repeated .BasicUserInfo userinfo = 1;
inline int CSBattleUserJoinRsp::userinfo_size() const {
  return userinfo_.size();
}
inline void CSBattleUserJoinRsp::clear_userinfo() {
  userinfo_.Clear();
}
inline const ::BasicUserInfo& CSBattleUserJoinRsp::userinfo(int index) const {
  return userinfo_.Get(index);
}
inline ::BasicUserInfo* CSBattleUserJoinRsp::mutable_userinfo(int index) {
  return userinfo_.Mutable(index);
}
inline ::BasicUserInfo* CSBattleUserJoinRsp::add_userinfo() {
  return userinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BasicUserInfo >&
CSBattleUserJoinRsp::userinfo() const {
  return userinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::BasicUserInfo >*
CSBattleUserJoinRsp::mutable_userinfo() {
  return &userinfo_;
}

// -------------------------------------------------------------------

// CSBattleUserLeaveRsp

// required uint32 userid = 1;
inline bool CSBattleUserLeaveRsp::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSBattleUserLeaveRsp::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSBattleUserLeaveRsp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSBattleUserLeaveRsp::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSBattleUserLeaveRsp::userid() const {
  return userid_;
}
inline void CSBattleUserLeaveRsp::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// CSBattleLoadCompleteReq

// -------------------------------------------------------------------

// CSBattleLoadCompleteRsp

// required bool timeout = 1;
inline bool CSBattleLoadCompleteRsp::has_timeout() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSBattleLoadCompleteRsp::set_has_timeout() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSBattleLoadCompleteRsp::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSBattleLoadCompleteRsp::clear_timeout() {
  timeout_ = false;
  clear_has_timeout();
}
inline bool CSBattleLoadCompleteRsp::timeout() const {
  return timeout_;
}
inline void CSBattleLoadCompleteRsp::set_timeout(bool value) {
  set_has_timeout();
  timeout_ = value;
}

// -------------------------------------------------------------------

// CSBattleLeaveReq

// -------------------------------------------------------------------

// CSBattleLeaveRsp

// required bool initiative = 1;
inline bool CSBattleLeaveRsp::has_initiative() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSBattleLeaveRsp::set_has_initiative() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSBattleLeaveRsp::clear_has_initiative() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSBattleLeaveRsp::clear_initiative() {
  initiative_ = false;
  clear_has_initiative();
}
inline bool CSBattleLeaveRsp::initiative() const {
  return initiative_;
}
inline void CSBattleLeaveRsp::set_initiative(bool value) {
  set_has_initiative();
  initiative_ = value;
}

// optional uint32 star = 2;
inline bool CSBattleLeaveRsp::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSBattleLeaveRsp::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSBattleLeaveRsp::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSBattleLeaveRsp::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 CSBattleLeaveRsp::star() const {
  return star_;
}
inline void CSBattleLeaveRsp::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// optional .CSReward rewards = 3;
inline bool CSBattleLeaveRsp::has_rewards() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSBattleLeaveRsp::set_has_rewards() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSBattleLeaveRsp::clear_has_rewards() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSBattleLeaveRsp::clear_rewards() {
  if (rewards_ != NULL) rewards_->::CSReward::Clear();
  clear_has_rewards();
}
inline const ::CSReward& CSBattleLeaveRsp::rewards() const {
  return rewards_ != NULL ? *rewards_ : *default_instance_->rewards_;
}
inline ::CSReward* CSBattleLeaveRsp::mutable_rewards() {
  set_has_rewards();
  if (rewards_ == NULL) rewards_ = new ::CSReward;
  return rewards_;
}
inline ::CSReward* CSBattleLeaveRsp::release_rewards() {
  clear_has_rewards();
  ::CSReward* temp = rewards_;
  rewards_ = NULL;
  return temp;
}
inline void CSBattleLeaveRsp::set_allocated_rewards(::CSReward* rewards) {
  delete rewards_;
  rewards_ = rewards;
  if (rewards) {
    set_has_rewards();
  } else {
    clear_has_rewards();
  }
}

// -------------------------------------------------------------------

// CSBattleTimeoutRsp

// -------------------------------------------------------------------

// CSBattlePlayerDelRsp

// -------------------------------------------------------------------

// AttackMonsterInfo

// required uint32 id = 1;
inline bool AttackMonsterInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AttackMonsterInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AttackMonsterInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AttackMonsterInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 AttackMonsterInfo::id() const {
  return id_;
}
inline void AttackMonsterInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .CSPoint start_pos = 2;
inline bool AttackMonsterInfo::has_start_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AttackMonsterInfo::set_has_start_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AttackMonsterInfo::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AttackMonsterInfo::clear_start_pos() {
  if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
  clear_has_start_pos();
}
inline const ::CSPoint& AttackMonsterInfo::start_pos() const {
  return start_pos_ != NULL ? *start_pos_ : *default_instance_->start_pos_;
}
inline ::CSPoint* AttackMonsterInfo::mutable_start_pos() {
  set_has_start_pos();
  if (start_pos_ == NULL) start_pos_ = new ::CSPoint;
  return start_pos_;
}
inline ::CSPoint* AttackMonsterInfo::release_start_pos() {
  clear_has_start_pos();
  ::CSPoint* temp = start_pos_;
  start_pos_ = NULL;
  return temp;
}
inline void AttackMonsterInfo::set_allocated_start_pos(::CSPoint* start_pos) {
  delete start_pos_;
  start_pos_ = start_pos;
  if (start_pos) {
    set_has_start_pos();
  } else {
    clear_has_start_pos();
  }
}

// required .CSPoint pos = 3;
inline bool AttackMonsterInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AttackMonsterInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AttackMonsterInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AttackMonsterInfo::clear_pos() {
  if (pos_ != NULL) pos_->::CSPoint::Clear();
  clear_has_pos();
}
inline const ::CSPoint& AttackMonsterInfo::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::CSPoint* AttackMonsterInfo::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::CSPoint;
  return pos_;
}
inline ::CSPoint* AttackMonsterInfo::release_pos() {
  clear_has_pos();
  ::CSPoint* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void AttackMonsterInfo::set_allocated_pos(::CSPoint* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// required .CSPoint direct = 4;
inline bool AttackMonsterInfo::has_direct() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AttackMonsterInfo::set_has_direct() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AttackMonsterInfo::clear_has_direct() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AttackMonsterInfo::clear_direct() {
  if (direct_ != NULL) direct_->::CSPoint::Clear();
  clear_has_direct();
}
inline const ::CSPoint& AttackMonsterInfo::direct() const {
  return direct_ != NULL ? *direct_ : *default_instance_->direct_;
}
inline ::CSPoint* AttackMonsterInfo::mutable_direct() {
  set_has_direct();
  if (direct_ == NULL) direct_ = new ::CSPoint;
  return direct_;
}
inline ::CSPoint* AttackMonsterInfo::release_direct() {
  clear_has_direct();
  ::CSPoint* temp = direct_;
  direct_ = NULL;
  return temp;
}
inline void AttackMonsterInfo::set_allocated_direct(::CSPoint* direct) {
  delete direct_;
  direct_ = direct;
  if (direct) {
    set_has_direct();
  } else {
    clear_has_direct();
  }
}

// required uint32 blood = 5;
inline bool AttackMonsterInfo::has_blood() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AttackMonsterInfo::set_has_blood() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AttackMonsterInfo::clear_has_blood() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AttackMonsterInfo::clear_blood() {
  blood_ = 0u;
  clear_has_blood();
}
inline ::google::protobuf::uint32 AttackMonsterInfo::blood() const {
  return blood_;
}
inline void AttackMonsterInfo::set_blood(::google::protobuf::uint32 value) {
  set_has_blood();
  blood_ = value;
}

// required uint32 status = 6;
inline bool AttackMonsterInfo::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AttackMonsterInfo::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AttackMonsterInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AttackMonsterInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 AttackMonsterInfo::status() const {
  return status_;
}
inline void AttackMonsterInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// CSAttackMonsterBackInfo

// required uint32 id = 1;
inline bool CSAttackMonsterBackInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSAttackMonsterBackInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSAttackMonsterBackInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSAttackMonsterBackInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSAttackMonsterBackInfo::id() const {
  return id_;
}
inline void CSAttackMonsterBackInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 monster_type = 2;
inline bool CSAttackMonsterBackInfo::has_monster_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSAttackMonsterBackInfo::set_has_monster_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSAttackMonsterBackInfo::clear_has_monster_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSAttackMonsterBackInfo::clear_monster_type() {
  monster_type_ = 0u;
  clear_has_monster_type();
}
inline ::google::protobuf::uint32 CSAttackMonsterBackInfo::monster_type() const {
  return monster_type_;
}
inline void CSAttackMonsterBackInfo::set_monster_type(::google::protobuf::uint32 value) {
  set_has_monster_type();
  monster_type_ = value;
}

// required uint32 blood = 3;
inline bool CSAttackMonsterBackInfo::has_blood() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSAttackMonsterBackInfo::set_has_blood() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSAttackMonsterBackInfo::clear_has_blood() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSAttackMonsterBackInfo::clear_blood() {
  blood_ = 0u;
  clear_has_blood();
}
inline ::google::protobuf::uint32 CSAttackMonsterBackInfo::blood() const {
  return blood_;
}
inline void CSAttackMonsterBackInfo::set_blood(::google::protobuf::uint32 value) {
  set_has_blood();
  blood_ = value;
}

// required bool elite = 4;
inline bool CSAttackMonsterBackInfo::has_elite() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSAttackMonsterBackInfo::set_has_elite() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSAttackMonsterBackInfo::clear_has_elite() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSAttackMonsterBackInfo::clear_elite() {
  elite_ = false;
  clear_has_elite();
}
inline bool CSAttackMonsterBackInfo::elite() const {
  return elite_;
}
inline void CSAttackMonsterBackInfo::set_elite(bool value) {
  set_has_elite();
  elite_ = value;
}

// -------------------------------------------------------------------

// CSMonsterAttackInfo

// required uint32 id = 1;
inline bool CSMonsterAttackInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMonsterAttackInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMonsterAttackInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMonsterAttackInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSMonsterAttackInfo::id() const {
  return id_;
}
inline void CSMonsterAttackInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .CSPoint pos = 2;
inline bool CSMonsterAttackInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMonsterAttackInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMonsterAttackInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMonsterAttackInfo::clear_pos() {
  if (pos_ != NULL) pos_->::CSPoint::Clear();
  clear_has_pos();
}
inline const ::CSPoint& CSMonsterAttackInfo::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::CSPoint* CSMonsterAttackInfo::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::CSPoint;
  return pos_;
}
inline ::CSPoint* CSMonsterAttackInfo::release_pos() {
  clear_has_pos();
  ::CSPoint* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void CSMonsterAttackInfo::set_allocated_pos(::CSPoint* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// required .CSPoint direct = 3;
inline bool CSMonsterAttackInfo::has_direct() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMonsterAttackInfo::set_has_direct() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMonsterAttackInfo::clear_has_direct() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMonsterAttackInfo::clear_direct() {
  if (direct_ != NULL) direct_->::CSPoint::Clear();
  clear_has_direct();
}
inline const ::CSPoint& CSMonsterAttackInfo::direct() const {
  return direct_ != NULL ? *direct_ : *default_instance_->direct_;
}
inline ::CSPoint* CSMonsterAttackInfo::mutable_direct() {
  set_has_direct();
  if (direct_ == NULL) direct_ = new ::CSPoint;
  return direct_;
}
inline ::CSPoint* CSMonsterAttackInfo::release_direct() {
  clear_has_direct();
  ::CSPoint* temp = direct_;
  direct_ = NULL;
  return temp;
}
inline void CSMonsterAttackInfo::set_allocated_direct(::CSPoint* direct) {
  delete direct_;
  direct_ = direct;
  if (direct) {
    set_has_direct();
  } else {
    clear_has_direct();
  }
}

// required uint32 action_id = 4;
inline bool CSMonsterAttackInfo::has_action_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSMonsterAttackInfo::set_has_action_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSMonsterAttackInfo::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSMonsterAttackInfo::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
inline ::google::protobuf::uint32 CSMonsterAttackInfo::action_id() const {
  return action_id_;
}
inline void CSMonsterAttackInfo::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
}

// required uint32 type = 5;
inline bool CSMonsterAttackInfo::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSMonsterAttackInfo::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSMonsterAttackInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSMonsterAttackInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CSMonsterAttackInfo::type() const {
  return type_;
}
inline void CSMonsterAttackInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 userid = 6;
inline bool CSMonsterAttackInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSMonsterAttackInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSMonsterAttackInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSMonsterAttackInfo::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSMonsterAttackInfo::userid() const {
  return userid_;
}
inline void CSMonsterAttackInfo::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// optional uint32 effect_id = 7;
inline bool CSMonsterAttackInfo::has_effect_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSMonsterAttackInfo::set_has_effect_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSMonsterAttackInfo::clear_has_effect_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSMonsterAttackInfo::clear_effect_id() {
  effect_id_ = 0u;
  clear_has_effect_id();
}
inline ::google::protobuf::uint32 CSMonsterAttackInfo::effect_id() const {
  return effect_id_;
}
inline void CSMonsterAttackInfo::set_effect_id(::google::protobuf::uint32 value) {
  set_has_effect_id();
  effect_id_ = value;
}

// optional .CSPoint start_pos = 8;
inline bool CSMonsterAttackInfo::has_start_pos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSMonsterAttackInfo::set_has_start_pos() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSMonsterAttackInfo::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSMonsterAttackInfo::clear_start_pos() {
  if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
  clear_has_start_pos();
}
inline const ::CSPoint& CSMonsterAttackInfo::start_pos() const {
  return start_pos_ != NULL ? *start_pos_ : *default_instance_->start_pos_;
}
inline ::CSPoint* CSMonsterAttackInfo::mutable_start_pos() {
  set_has_start_pos();
  if (start_pos_ == NULL) start_pos_ = new ::CSPoint;
  return start_pos_;
}
inline ::CSPoint* CSMonsterAttackInfo::release_start_pos() {
  clear_has_start_pos();
  ::CSPoint* temp = start_pos_;
  start_pos_ = NULL;
  return temp;
}
inline void CSMonsterAttackInfo::set_allocated_start_pos(::CSPoint* start_pos) {
  delete start_pos_;
  start_pos_ = start_pos;
  if (start_pos) {
    set_has_start_pos();
  } else {
    clear_has_start_pos();
  }
}

// optional .CSPoint end_pos = 9;
inline bool CSMonsterAttackInfo::has_end_pos() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSMonsterAttackInfo::set_has_end_pos() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSMonsterAttackInfo::clear_has_end_pos() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSMonsterAttackInfo::clear_end_pos() {
  if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
  clear_has_end_pos();
}
inline const ::CSPoint& CSMonsterAttackInfo::end_pos() const {
  return end_pos_ != NULL ? *end_pos_ : *default_instance_->end_pos_;
}
inline ::CSPoint* CSMonsterAttackInfo::mutable_end_pos() {
  set_has_end_pos();
  if (end_pos_ == NULL) end_pos_ = new ::CSPoint;
  return end_pos_;
}
inline ::CSPoint* CSMonsterAttackInfo::release_end_pos() {
  clear_has_end_pos();
  ::CSPoint* temp = end_pos_;
  end_pos_ = NULL;
  return temp;
}
inline void CSMonsterAttackInfo::set_allocated_end_pos(::CSPoint* end_pos) {
  delete end_pos_;
  end_pos_ = end_pos;
  if (end_pos) {
    set_has_end_pos();
  } else {
    clear_has_end_pos();
  }
}

// optional uint32 skill_speed = 10;
inline bool CSMonsterAttackInfo::has_skill_speed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSMonsterAttackInfo::set_has_skill_speed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSMonsterAttackInfo::clear_has_skill_speed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSMonsterAttackInfo::clear_skill_speed() {
  skill_speed_ = 0u;
  clear_has_skill_speed();
}
inline ::google::protobuf::uint32 CSMonsterAttackInfo::skill_speed() const {
  return skill_speed_;
}
inline void CSMonsterAttackInfo::set_skill_speed(::google::protobuf::uint32 value) {
  set_has_skill_speed();
  skill_speed_ = value;
}

// optional uint32 delay_time = 11;
inline bool CSMonsterAttackInfo::has_delay_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSMonsterAttackInfo::set_has_delay_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSMonsterAttackInfo::clear_has_delay_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSMonsterAttackInfo::clear_delay_time() {
  delay_time_ = 0u;
  clear_has_delay_time();
}
inline ::google::protobuf::uint32 CSMonsterAttackInfo::delay_time() const {
  return delay_time_;
}
inline void CSMonsterAttackInfo::set_delay_time(::google::protobuf::uint32 value) {
  set_has_delay_time();
  delay_time_ = value;
}

// -------------------------------------------------------------------

// CSMonsterEffectInfo

// optional uint32 effect_id = 1;
inline bool CSMonsterEffectInfo::has_effect_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMonsterEffectInfo::set_has_effect_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMonsterEffectInfo::clear_has_effect_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMonsterEffectInfo::clear_effect_id() {
  effect_id_ = 0u;
  clear_has_effect_id();
}
inline ::google::protobuf::uint32 CSMonsterEffectInfo::effect_id() const {
  return effect_id_;
}
inline void CSMonsterEffectInfo::set_effect_id(::google::protobuf::uint32 value) {
  set_has_effect_id();
  effect_id_ = value;
}

// optional .CSPoint start_pos = 2;
inline bool CSMonsterEffectInfo::has_start_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMonsterEffectInfo::set_has_start_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMonsterEffectInfo::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMonsterEffectInfo::clear_start_pos() {
  if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
  clear_has_start_pos();
}
inline const ::CSPoint& CSMonsterEffectInfo::start_pos() const {
  return start_pos_ != NULL ? *start_pos_ : *default_instance_->start_pos_;
}
inline ::CSPoint* CSMonsterEffectInfo::mutable_start_pos() {
  set_has_start_pos();
  if (start_pos_ == NULL) start_pos_ = new ::CSPoint;
  return start_pos_;
}
inline ::CSPoint* CSMonsterEffectInfo::release_start_pos() {
  clear_has_start_pos();
  ::CSPoint* temp = start_pos_;
  start_pos_ = NULL;
  return temp;
}
inline void CSMonsterEffectInfo::set_allocated_start_pos(::CSPoint* start_pos) {
  delete start_pos_;
  start_pos_ = start_pos;
  if (start_pos) {
    set_has_start_pos();
  } else {
    clear_has_start_pos();
  }
}

// optional .CSPoint end_pos = 3;
inline bool CSMonsterEffectInfo::has_end_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMonsterEffectInfo::set_has_end_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMonsterEffectInfo::clear_has_end_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMonsterEffectInfo::clear_end_pos() {
  if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
  clear_has_end_pos();
}
inline const ::CSPoint& CSMonsterEffectInfo::end_pos() const {
  return end_pos_ != NULL ? *end_pos_ : *default_instance_->end_pos_;
}
inline ::CSPoint* CSMonsterEffectInfo::mutable_end_pos() {
  set_has_end_pos();
  if (end_pos_ == NULL) end_pos_ = new ::CSPoint;
  return end_pos_;
}
inline ::CSPoint* CSMonsterEffectInfo::release_end_pos() {
  clear_has_end_pos();
  ::CSPoint* temp = end_pos_;
  end_pos_ = NULL;
  return temp;
}
inline void CSMonsterEffectInfo::set_allocated_end_pos(::CSPoint* end_pos) {
  delete end_pos_;
  end_pos_ = end_pos;
  if (end_pos) {
    set_has_end_pos();
  } else {
    clear_has_end_pos();
  }
}

// optional uint32 skill_speed = 4;
inline bool CSMonsterEffectInfo::has_skill_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSMonsterEffectInfo::set_has_skill_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSMonsterEffectInfo::clear_has_skill_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSMonsterEffectInfo::clear_skill_speed() {
  skill_speed_ = 0u;
  clear_has_skill_speed();
}
inline ::google::protobuf::uint32 CSMonsterEffectInfo::skill_speed() const {
  return skill_speed_;
}
inline void CSMonsterEffectInfo::set_skill_speed(::google::protobuf::uint32 value) {
  set_has_skill_speed();
  skill_speed_ = value;
}

// optional uint32 delay_time = 5;
inline bool CSMonsterEffectInfo::has_delay_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSMonsterEffectInfo::set_has_delay_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSMonsterEffectInfo::clear_has_delay_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSMonsterEffectInfo::clear_delay_time() {
  delay_time_ = 0u;
  clear_has_delay_time();
}
inline ::google::protobuf::uint32 CSMonsterEffectInfo::delay_time() const {
  return delay_time_;
}
inline void CSMonsterEffectInfo::set_delay_time(::google::protobuf::uint32 value) {
  set_has_delay_time();
  delay_time_ = value;
}

// -------------------------------------------------------------------

// CSMonsterAttackRsp

// repeated .CSMonsterAttackInfo attacks = 1;
inline int CSMonsterAttackRsp::attacks_size() const {
  return attacks_.size();
}
inline void CSMonsterAttackRsp::clear_attacks() {
  attacks_.Clear();
}
inline const ::CSMonsterAttackInfo& CSMonsterAttackRsp::attacks(int index) const {
  return attacks_.Get(index);
}
inline ::CSMonsterAttackInfo* CSMonsterAttackRsp::mutable_attacks(int index) {
  return attacks_.Mutable(index);
}
inline ::CSMonsterAttackInfo* CSMonsterAttackRsp::add_attacks() {
  return attacks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSMonsterAttackInfo >&
CSMonsterAttackRsp::attacks() const {
  return attacks_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSMonsterAttackInfo >*
CSMonsterAttackRsp::mutable_attacks() {
  return &attacks_;
}

// -------------------------------------------------------------------

// CSMonsterEffectRsp

// repeated .CSMonsterEffectInfo effects = 1;
inline int CSMonsterEffectRsp::effects_size() const {
  return effects_.size();
}
inline void CSMonsterEffectRsp::clear_effects() {
  effects_.Clear();
}
inline const ::CSMonsterEffectInfo& CSMonsterEffectRsp::effects(int index) const {
  return effects_.Get(index);
}
inline ::CSMonsterEffectInfo* CSMonsterEffectRsp::mutable_effects(int index) {
  return effects_.Mutable(index);
}
inline ::CSMonsterEffectInfo* CSMonsterEffectRsp::add_effects() {
  return effects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSMonsterEffectInfo >&
CSMonsterEffectRsp::effects() const {
  return effects_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSMonsterEffectInfo >*
CSMonsterEffectRsp::mutable_effects() {
  return &effects_;
}

// -------------------------------------------------------------------

// CSMonsterHitRsp_UserInfo

// required uint32 hurt_type = 2;
inline bool CSMonsterHitRsp_UserInfo::has_hurt_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMonsterHitRsp_UserInfo::set_has_hurt_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMonsterHitRsp_UserInfo::clear_has_hurt_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMonsterHitRsp_UserInfo::clear_hurt_type() {
  hurt_type_ = 0u;
  clear_has_hurt_type();
}
inline ::google::protobuf::uint32 CSMonsterHitRsp_UserInfo::hurt_type() const {
  return hurt_type_;
}
inline void CSMonsterHitRsp_UserInfo::set_hurt_type(::google::protobuf::uint32 value) {
  set_has_hurt_type();
  hurt_type_ = value;
}

// required uint32 userid = 3;
inline bool CSMonsterHitRsp_UserInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMonsterHitRsp_UserInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMonsterHitRsp_UserInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMonsterHitRsp_UserInfo::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSMonsterHitRsp_UserInfo::userid() const {
  return userid_;
}
inline void CSMonsterHitRsp_UserInfo::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 blood = 4;
inline bool CSMonsterHitRsp_UserInfo::has_blood() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMonsterHitRsp_UserInfo::set_has_blood() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMonsterHitRsp_UserInfo::clear_has_blood() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMonsterHitRsp_UserInfo::clear_blood() {
  blood_ = 0u;
  clear_has_blood();
}
inline ::google::protobuf::uint32 CSMonsterHitRsp_UserInfo::blood() const {
  return blood_;
}
inline void CSMonsterHitRsp_UserInfo::set_blood(::google::protobuf::uint32 value) {
  set_has_blood();
  blood_ = value;
}

// -------------------------------------------------------------------

// CSMonsterHitRsp

// repeated .CSMonsterHitRsp.UserInfo users = 3;
inline int CSMonsterHitRsp::users_size() const {
  return users_.size();
}
inline void CSMonsterHitRsp::clear_users() {
  users_.Clear();
}
inline const ::CSMonsterHitRsp_UserInfo& CSMonsterHitRsp::users(int index) const {
  return users_.Get(index);
}
inline ::CSMonsterHitRsp_UserInfo* CSMonsterHitRsp::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::CSMonsterHitRsp_UserInfo* CSMonsterHitRsp::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSMonsterHitRsp_UserInfo >&
CSMonsterHitRsp::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSMonsterHitRsp_UserInfo >*
CSMonsterHitRsp::mutable_users() {
  return &users_;
}

// -------------------------------------------------------------------

// CSSkillBeginReq

// required uint32 userid = 1;
inline bool CSSkillBeginReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSSkillBeginReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSSkillBeginReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSSkillBeginReq::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSSkillBeginReq::userid() const {
  return userid_;
}
inline void CSSkillBeginReq::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 action_id = 2;
inline bool CSSkillBeginReq::has_action_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSSkillBeginReq::set_has_action_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSSkillBeginReq::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSSkillBeginReq::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
inline ::google::protobuf::uint32 CSSkillBeginReq::action_id() const {
  return action_id_;
}
inline void CSSkillBeginReq::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
}

// required .CSPoint pos = 3;
inline bool CSSkillBeginReq::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSSkillBeginReq::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSSkillBeginReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSSkillBeginReq::clear_pos() {
  if (pos_ != NULL) pos_->::CSPoint::Clear();
  clear_has_pos();
}
inline const ::CSPoint& CSSkillBeginReq::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::CSPoint* CSSkillBeginReq::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::CSPoint;
  return pos_;
}
inline ::CSPoint* CSSkillBeginReq::release_pos() {
  clear_has_pos();
  ::CSPoint* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void CSSkillBeginReq::set_allocated_pos(::CSPoint* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// required float start_dir_x = 4;
inline bool CSSkillBeginReq::has_start_dir_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSSkillBeginReq::set_has_start_dir_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSSkillBeginReq::clear_has_start_dir_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSSkillBeginReq::clear_start_dir_x() {
  start_dir_x_ = 0;
  clear_has_start_dir_x();
}
inline float CSSkillBeginReq::start_dir_x() const {
  return start_dir_x_;
}
inline void CSSkillBeginReq::set_start_dir_x(float value) {
  set_has_start_dir_x();
  start_dir_x_ = value;
}

// required float start_dir_y = 5;
inline bool CSSkillBeginReq::has_start_dir_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSSkillBeginReq::set_has_start_dir_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSSkillBeginReq::clear_has_start_dir_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSSkillBeginReq::clear_start_dir_y() {
  start_dir_y_ = 0;
  clear_has_start_dir_y();
}
inline float CSSkillBeginReq::start_dir_y() const {
  return start_dir_y_;
}
inline void CSSkillBeginReq::set_start_dir_y(float value) {
  set_has_start_dir_y();
  start_dir_y_ = value;
}

// required .CSPoint target_pos = 6;
inline bool CSSkillBeginReq::has_target_pos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSSkillBeginReq::set_has_target_pos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSSkillBeginReq::clear_has_target_pos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSSkillBeginReq::clear_target_pos() {
  if (target_pos_ != NULL) target_pos_->::CSPoint::Clear();
  clear_has_target_pos();
}
inline const ::CSPoint& CSSkillBeginReq::target_pos() const {
  return target_pos_ != NULL ? *target_pos_ : *default_instance_->target_pos_;
}
inline ::CSPoint* CSSkillBeginReq::mutable_target_pos() {
  set_has_target_pos();
  if (target_pos_ == NULL) target_pos_ = new ::CSPoint;
  return target_pos_;
}
inline ::CSPoint* CSSkillBeginReq::release_target_pos() {
  clear_has_target_pos();
  ::CSPoint* temp = target_pos_;
  target_pos_ = NULL;
  return temp;
}
inline void CSSkillBeginReq::set_allocated_target_pos(::CSPoint* target_pos) {
  delete target_pos_;
  target_pos_ = target_pos;
  if (target_pos) {
    set_has_target_pos();
  } else {
    clear_has_target_pos();
  }
}

// required float direct_x = 7;
inline bool CSSkillBeginReq::has_direct_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSSkillBeginReq::set_has_direct_x() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSSkillBeginReq::clear_has_direct_x() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSSkillBeginReq::clear_direct_x() {
  direct_x_ = 0;
  clear_has_direct_x();
}
inline float CSSkillBeginReq::direct_x() const {
  return direct_x_;
}
inline void CSSkillBeginReq::set_direct_x(float value) {
  set_has_direct_x();
  direct_x_ = value;
}

// required float direct_y = 8;
inline bool CSSkillBeginReq::has_direct_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSSkillBeginReq::set_has_direct_y() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSSkillBeginReq::clear_has_direct_y() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSSkillBeginReq::clear_direct_y() {
  direct_y_ = 0;
  clear_has_direct_y();
}
inline float CSSkillBeginReq::direct_y() const {
  return direct_y_;
}
inline void CSSkillBeginReq::set_direct_y(float value) {
  set_has_direct_y();
  direct_y_ = value;
}

// required bool aim = 9;
inline bool CSSkillBeginReq::has_aim() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSSkillBeginReq::set_has_aim() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSSkillBeginReq::clear_has_aim() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSSkillBeginReq::clear_aim() {
  aim_ = false;
  clear_has_aim();
}
inline bool CSSkillBeginReq::aim() const {
  return aim_;
}
inline void CSSkillBeginReq::set_aim(bool value) {
  set_has_aim();
  aim_ = value;
}

// -------------------------------------------------------------------

// CSSkillBeginRsp

// required uint32 userid = 1;
inline bool CSSkillBeginRsp::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSSkillBeginRsp::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSSkillBeginRsp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSSkillBeginRsp::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSSkillBeginRsp::userid() const {
  return userid_;
}
inline void CSSkillBeginRsp::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 action_id = 2;
inline bool CSSkillBeginRsp::has_action_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSSkillBeginRsp::set_has_action_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSSkillBeginRsp::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSSkillBeginRsp::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
inline ::google::protobuf::uint32 CSSkillBeginRsp::action_id() const {
  return action_id_;
}
inline void CSSkillBeginRsp::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
}

// required .CSPoint pos = 3;
inline bool CSSkillBeginRsp::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSSkillBeginRsp::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSSkillBeginRsp::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSSkillBeginRsp::clear_pos() {
  if (pos_ != NULL) pos_->::CSPoint::Clear();
  clear_has_pos();
}
inline const ::CSPoint& CSSkillBeginRsp::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::CSPoint* CSSkillBeginRsp::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::CSPoint;
  return pos_;
}
inline ::CSPoint* CSSkillBeginRsp::release_pos() {
  clear_has_pos();
  ::CSPoint* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void CSSkillBeginRsp::set_allocated_pos(::CSPoint* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// required float start_dir_x = 4;
inline bool CSSkillBeginRsp::has_start_dir_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSSkillBeginRsp::set_has_start_dir_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSSkillBeginRsp::clear_has_start_dir_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSSkillBeginRsp::clear_start_dir_x() {
  start_dir_x_ = 0;
  clear_has_start_dir_x();
}
inline float CSSkillBeginRsp::start_dir_x() const {
  return start_dir_x_;
}
inline void CSSkillBeginRsp::set_start_dir_x(float value) {
  set_has_start_dir_x();
  start_dir_x_ = value;
}

// required float start_dir_y = 5;
inline bool CSSkillBeginRsp::has_start_dir_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSSkillBeginRsp::set_has_start_dir_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSSkillBeginRsp::clear_has_start_dir_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSSkillBeginRsp::clear_start_dir_y() {
  start_dir_y_ = 0;
  clear_has_start_dir_y();
}
inline float CSSkillBeginRsp::start_dir_y() const {
  return start_dir_y_;
}
inline void CSSkillBeginRsp::set_start_dir_y(float value) {
  set_has_start_dir_y();
  start_dir_y_ = value;
}

// required .CSPoint target_pos = 6;
inline bool CSSkillBeginRsp::has_target_pos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSSkillBeginRsp::set_has_target_pos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSSkillBeginRsp::clear_has_target_pos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSSkillBeginRsp::clear_target_pos() {
  if (target_pos_ != NULL) target_pos_->::CSPoint::Clear();
  clear_has_target_pos();
}
inline const ::CSPoint& CSSkillBeginRsp::target_pos() const {
  return target_pos_ != NULL ? *target_pos_ : *default_instance_->target_pos_;
}
inline ::CSPoint* CSSkillBeginRsp::mutable_target_pos() {
  set_has_target_pos();
  if (target_pos_ == NULL) target_pos_ = new ::CSPoint;
  return target_pos_;
}
inline ::CSPoint* CSSkillBeginRsp::release_target_pos() {
  clear_has_target_pos();
  ::CSPoint* temp = target_pos_;
  target_pos_ = NULL;
  return temp;
}
inline void CSSkillBeginRsp::set_allocated_target_pos(::CSPoint* target_pos) {
  delete target_pos_;
  target_pos_ = target_pos;
  if (target_pos) {
    set_has_target_pos();
  } else {
    clear_has_target_pos();
  }
}

// required float direct_x = 7;
inline bool CSSkillBeginRsp::has_direct_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSSkillBeginRsp::set_has_direct_x() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSSkillBeginRsp::clear_has_direct_x() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSSkillBeginRsp::clear_direct_x() {
  direct_x_ = 0;
  clear_has_direct_x();
}
inline float CSSkillBeginRsp::direct_x() const {
  return direct_x_;
}
inline void CSSkillBeginRsp::set_direct_x(float value) {
  set_has_direct_x();
  direct_x_ = value;
}

// required float direct_y = 8;
inline bool CSSkillBeginRsp::has_direct_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSSkillBeginRsp::set_has_direct_y() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSSkillBeginRsp::clear_has_direct_y() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSSkillBeginRsp::clear_direct_y() {
  direct_y_ = 0;
  clear_has_direct_y();
}
inline float CSSkillBeginRsp::direct_y() const {
  return direct_y_;
}
inline void CSSkillBeginRsp::set_direct_y(float value) {
  set_has_direct_y();
  direct_y_ = value;
}

// required bool aim = 9;
inline bool CSSkillBeginRsp::has_aim() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSSkillBeginRsp::set_has_aim() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSSkillBeginRsp::clear_has_aim() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSSkillBeginRsp::clear_aim() {
  aim_ = false;
  clear_has_aim();
}
inline bool CSSkillBeginRsp::aim() const {
  return aim_;
}
inline void CSSkillBeginRsp::set_aim(bool value) {
  set_has_aim();
  aim_ = value;
}

// -------------------------------------------------------------------

// CSPlayerAttackReq

// required uint32 userid = 1;
inline bool CSPlayerAttackReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPlayerAttackReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPlayerAttackReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPlayerAttackReq::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSPlayerAttackReq::userid() const {
  return userid_;
}
inline void CSPlayerAttackReq::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required .CSPoint start_pos = 2;
inline bool CSPlayerAttackReq::has_start_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSPlayerAttackReq::set_has_start_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSPlayerAttackReq::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSPlayerAttackReq::clear_start_pos() {
  if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
  clear_has_start_pos();
}
inline const ::CSPoint& CSPlayerAttackReq::start_pos() const {
  return start_pos_ != NULL ? *start_pos_ : *default_instance_->start_pos_;
}
inline ::CSPoint* CSPlayerAttackReq::mutable_start_pos() {
  set_has_start_pos();
  if (start_pos_ == NULL) start_pos_ = new ::CSPoint;
  return start_pos_;
}
inline ::CSPoint* CSPlayerAttackReq::release_start_pos() {
  clear_has_start_pos();
  ::CSPoint* temp = start_pos_;
  start_pos_ = NULL;
  return temp;
}
inline void CSPlayerAttackReq::set_allocated_start_pos(::CSPoint* start_pos) {
  delete start_pos_;
  start_pos_ = start_pos;
  if (start_pos) {
    set_has_start_pos();
  } else {
    clear_has_start_pos();
  }
}

// required .CSPoint start_direct = 3;
inline bool CSPlayerAttackReq::has_start_direct() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSPlayerAttackReq::set_has_start_direct() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSPlayerAttackReq::clear_has_start_direct() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSPlayerAttackReq::clear_start_direct() {
  if (start_direct_ != NULL) start_direct_->::CSPoint::Clear();
  clear_has_start_direct();
}
inline const ::CSPoint& CSPlayerAttackReq::start_direct() const {
  return start_direct_ != NULL ? *start_direct_ : *default_instance_->start_direct_;
}
inline ::CSPoint* CSPlayerAttackReq::mutable_start_direct() {
  set_has_start_direct();
  if (start_direct_ == NULL) start_direct_ = new ::CSPoint;
  return start_direct_;
}
inline ::CSPoint* CSPlayerAttackReq::release_start_direct() {
  clear_has_start_direct();
  ::CSPoint* temp = start_direct_;
  start_direct_ = NULL;
  return temp;
}
inline void CSPlayerAttackReq::set_allocated_start_direct(::CSPoint* start_direct) {
  delete start_direct_;
  start_direct_ = start_direct;
  if (start_direct) {
    set_has_start_direct();
  } else {
    clear_has_start_direct();
  }
}

// required .CSPoint end_pos = 4;
inline bool CSPlayerAttackReq::has_end_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSPlayerAttackReq::set_has_end_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSPlayerAttackReq::clear_has_end_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSPlayerAttackReq::clear_end_pos() {
  if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
  clear_has_end_pos();
}
inline const ::CSPoint& CSPlayerAttackReq::end_pos() const {
  return end_pos_ != NULL ? *end_pos_ : *default_instance_->end_pos_;
}
inline ::CSPoint* CSPlayerAttackReq::mutable_end_pos() {
  set_has_end_pos();
  if (end_pos_ == NULL) end_pos_ = new ::CSPoint;
  return end_pos_;
}
inline ::CSPoint* CSPlayerAttackReq::release_end_pos() {
  clear_has_end_pos();
  ::CSPoint* temp = end_pos_;
  end_pos_ = NULL;
  return temp;
}
inline void CSPlayerAttackReq::set_allocated_end_pos(::CSPoint* end_pos) {
  delete end_pos_;
  end_pos_ = end_pos;
  if (end_pos) {
    set_has_end_pos();
  } else {
    clear_has_end_pos();
  }
}

// required .CSPoint end_direct = 5;
inline bool CSPlayerAttackReq::has_end_direct() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSPlayerAttackReq::set_has_end_direct() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSPlayerAttackReq::clear_has_end_direct() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSPlayerAttackReq::clear_end_direct() {
  if (end_direct_ != NULL) end_direct_->::CSPoint::Clear();
  clear_has_end_direct();
}
inline const ::CSPoint& CSPlayerAttackReq::end_direct() const {
  return end_direct_ != NULL ? *end_direct_ : *default_instance_->end_direct_;
}
inline ::CSPoint* CSPlayerAttackReq::mutable_end_direct() {
  set_has_end_direct();
  if (end_direct_ == NULL) end_direct_ = new ::CSPoint;
  return end_direct_;
}
inline ::CSPoint* CSPlayerAttackReq::release_end_direct() {
  clear_has_end_direct();
  ::CSPoint* temp = end_direct_;
  end_direct_ = NULL;
  return temp;
}
inline void CSPlayerAttackReq::set_allocated_end_direct(::CSPoint* end_direct) {
  delete end_direct_;
  end_direct_ = end_direct;
  if (end_direct) {
    set_has_end_direct();
  } else {
    clear_has_end_direct();
  }
}

// required uint32 action_id = 6;
inline bool CSPlayerAttackReq::has_action_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSPlayerAttackReq::set_has_action_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSPlayerAttackReq::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSPlayerAttackReq::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
inline ::google::protobuf::uint32 CSPlayerAttackReq::action_id() const {
  return action_id_;
}
inline void CSPlayerAttackReq::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
}

// repeated .AttackMonsterInfo monsters = 7;
inline int CSPlayerAttackReq::monsters_size() const {
  return monsters_.size();
}
inline void CSPlayerAttackReq::clear_monsters() {
  monsters_.Clear();
}
inline const ::AttackMonsterInfo& CSPlayerAttackReq::monsters(int index) const {
  return monsters_.Get(index);
}
inline ::AttackMonsterInfo* CSPlayerAttackReq::mutable_monsters(int index) {
  return monsters_.Mutable(index);
}
inline ::AttackMonsterInfo* CSPlayerAttackReq::add_monsters() {
  return monsters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >&
CSPlayerAttackReq::monsters() const {
  return monsters_;
}
inline ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >*
CSPlayerAttackReq::mutable_monsters() {
  return &monsters_;
}

// -------------------------------------------------------------------

// CSPlayerAttackRsp

// required uint32 userid = 1;
inline bool CSPlayerAttackRsp::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPlayerAttackRsp::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPlayerAttackRsp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPlayerAttackRsp::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSPlayerAttackRsp::userid() const {
  return userid_;
}
inline void CSPlayerAttackRsp::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required .CSPoint start_pos = 2;
inline bool CSPlayerAttackRsp::has_start_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSPlayerAttackRsp::set_has_start_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSPlayerAttackRsp::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSPlayerAttackRsp::clear_start_pos() {
  if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
  clear_has_start_pos();
}
inline const ::CSPoint& CSPlayerAttackRsp::start_pos() const {
  return start_pos_ != NULL ? *start_pos_ : *default_instance_->start_pos_;
}
inline ::CSPoint* CSPlayerAttackRsp::mutable_start_pos() {
  set_has_start_pos();
  if (start_pos_ == NULL) start_pos_ = new ::CSPoint;
  return start_pos_;
}
inline ::CSPoint* CSPlayerAttackRsp::release_start_pos() {
  clear_has_start_pos();
  ::CSPoint* temp = start_pos_;
  start_pos_ = NULL;
  return temp;
}
inline void CSPlayerAttackRsp::set_allocated_start_pos(::CSPoint* start_pos) {
  delete start_pos_;
  start_pos_ = start_pos;
  if (start_pos) {
    set_has_start_pos();
  } else {
    clear_has_start_pos();
  }
}

// required .CSPoint start_direct = 3;
inline bool CSPlayerAttackRsp::has_start_direct() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSPlayerAttackRsp::set_has_start_direct() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSPlayerAttackRsp::clear_has_start_direct() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSPlayerAttackRsp::clear_start_direct() {
  if (start_direct_ != NULL) start_direct_->::CSPoint::Clear();
  clear_has_start_direct();
}
inline const ::CSPoint& CSPlayerAttackRsp::start_direct() const {
  return start_direct_ != NULL ? *start_direct_ : *default_instance_->start_direct_;
}
inline ::CSPoint* CSPlayerAttackRsp::mutable_start_direct() {
  set_has_start_direct();
  if (start_direct_ == NULL) start_direct_ = new ::CSPoint;
  return start_direct_;
}
inline ::CSPoint* CSPlayerAttackRsp::release_start_direct() {
  clear_has_start_direct();
  ::CSPoint* temp = start_direct_;
  start_direct_ = NULL;
  return temp;
}
inline void CSPlayerAttackRsp::set_allocated_start_direct(::CSPoint* start_direct) {
  delete start_direct_;
  start_direct_ = start_direct;
  if (start_direct) {
    set_has_start_direct();
  } else {
    clear_has_start_direct();
  }
}

// required .CSPoint end_pos = 4;
inline bool CSPlayerAttackRsp::has_end_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSPlayerAttackRsp::set_has_end_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSPlayerAttackRsp::clear_has_end_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSPlayerAttackRsp::clear_end_pos() {
  if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
  clear_has_end_pos();
}
inline const ::CSPoint& CSPlayerAttackRsp::end_pos() const {
  return end_pos_ != NULL ? *end_pos_ : *default_instance_->end_pos_;
}
inline ::CSPoint* CSPlayerAttackRsp::mutable_end_pos() {
  set_has_end_pos();
  if (end_pos_ == NULL) end_pos_ = new ::CSPoint;
  return end_pos_;
}
inline ::CSPoint* CSPlayerAttackRsp::release_end_pos() {
  clear_has_end_pos();
  ::CSPoint* temp = end_pos_;
  end_pos_ = NULL;
  return temp;
}
inline void CSPlayerAttackRsp::set_allocated_end_pos(::CSPoint* end_pos) {
  delete end_pos_;
  end_pos_ = end_pos;
  if (end_pos) {
    set_has_end_pos();
  } else {
    clear_has_end_pos();
  }
}

// required .CSPoint end_direct = 5;
inline bool CSPlayerAttackRsp::has_end_direct() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSPlayerAttackRsp::set_has_end_direct() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSPlayerAttackRsp::clear_has_end_direct() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSPlayerAttackRsp::clear_end_direct() {
  if (end_direct_ != NULL) end_direct_->::CSPoint::Clear();
  clear_has_end_direct();
}
inline const ::CSPoint& CSPlayerAttackRsp::end_direct() const {
  return end_direct_ != NULL ? *end_direct_ : *default_instance_->end_direct_;
}
inline ::CSPoint* CSPlayerAttackRsp::mutable_end_direct() {
  set_has_end_direct();
  if (end_direct_ == NULL) end_direct_ = new ::CSPoint;
  return end_direct_;
}
inline ::CSPoint* CSPlayerAttackRsp::release_end_direct() {
  clear_has_end_direct();
  ::CSPoint* temp = end_direct_;
  end_direct_ = NULL;
  return temp;
}
inline void CSPlayerAttackRsp::set_allocated_end_direct(::CSPoint* end_direct) {
  delete end_direct_;
  end_direct_ = end_direct;
  if (end_direct) {
    set_has_end_direct();
  } else {
    clear_has_end_direct();
  }
}

// required uint32 action_id = 6;
inline bool CSPlayerAttackRsp::has_action_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSPlayerAttackRsp::set_has_action_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSPlayerAttackRsp::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSPlayerAttackRsp::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
inline ::google::protobuf::uint32 CSPlayerAttackRsp::action_id() const {
  return action_id_;
}
inline void CSPlayerAttackRsp::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
}

// repeated .AttackMonsterInfo monsters = 7;
inline int CSPlayerAttackRsp::monsters_size() const {
  return monsters_.size();
}
inline void CSPlayerAttackRsp::clear_monsters() {
  monsters_.Clear();
}
inline const ::AttackMonsterInfo& CSPlayerAttackRsp::monsters(int index) const {
  return monsters_.Get(index);
}
inline ::AttackMonsterInfo* CSPlayerAttackRsp::mutable_monsters(int index) {
  return monsters_.Mutable(index);
}
inline ::AttackMonsterInfo* CSPlayerAttackRsp::add_monsters() {
  return monsters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >&
CSPlayerAttackRsp::monsters() const {
  return monsters_;
}
inline ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >*
CSPlayerAttackRsp::mutable_monsters() {
  return &monsters_;
}

// -------------------------------------------------------------------

// AttackPlayerInfo

// required uint32 userid = 1;
inline bool AttackPlayerInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AttackPlayerInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AttackPlayerInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AttackPlayerInfo::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 AttackPlayerInfo::userid() const {
  return userid_;
}
inline void AttackPlayerInfo::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 blood = 2;
inline bool AttackPlayerInfo::has_blood() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AttackPlayerInfo::set_has_blood() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AttackPlayerInfo::clear_has_blood() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AttackPlayerInfo::clear_blood() {
  blood_ = 0u;
  clear_has_blood();
}
inline ::google::protobuf::uint32 AttackPlayerInfo::blood() const {
  return blood_;
}
inline void AttackPlayerInfo::set_blood(::google::protobuf::uint32 value) {
  set_has_blood();
  blood_ = value;
}

// required uint32 hurt_type = 3;
inline bool AttackPlayerInfo::has_hurt_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AttackPlayerInfo::set_has_hurt_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AttackPlayerInfo::clear_has_hurt_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AttackPlayerInfo::clear_hurt_type() {
  hurt_type_ = 0u;
  clear_has_hurt_type();
}
inline ::google::protobuf::uint32 AttackPlayerInfo::hurt_type() const {
  return hurt_type_;
}
inline void AttackPlayerInfo::set_hurt_type(::google::protobuf::uint32 value) {
  set_has_hurt_type();
  hurt_type_ = value;
}

// -------------------------------------------------------------------

// CSPlayerHitPlayerReq

// required uint32 userid = 1;
inline bool CSPlayerHitPlayerReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPlayerHitPlayerReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPlayerHitPlayerReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPlayerHitPlayerReq::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSPlayerHitPlayerReq::userid() const {
  return userid_;
}
inline void CSPlayerHitPlayerReq::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required .CSPoint start_pos = 2;
inline bool CSPlayerHitPlayerReq::has_start_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSPlayerHitPlayerReq::set_has_start_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSPlayerHitPlayerReq::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSPlayerHitPlayerReq::clear_start_pos() {
  if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
  clear_has_start_pos();
}
inline const ::CSPoint& CSPlayerHitPlayerReq::start_pos() const {
  return start_pos_ != NULL ? *start_pos_ : *default_instance_->start_pos_;
}
inline ::CSPoint* CSPlayerHitPlayerReq::mutable_start_pos() {
  set_has_start_pos();
  if (start_pos_ == NULL) start_pos_ = new ::CSPoint;
  return start_pos_;
}
inline ::CSPoint* CSPlayerHitPlayerReq::release_start_pos() {
  clear_has_start_pos();
  ::CSPoint* temp = start_pos_;
  start_pos_ = NULL;
  return temp;
}
inline void CSPlayerHitPlayerReq::set_allocated_start_pos(::CSPoint* start_pos) {
  delete start_pos_;
  start_pos_ = start_pos;
  if (start_pos) {
    set_has_start_pos();
  } else {
    clear_has_start_pos();
  }
}

// required .CSPoint start_direct = 3;
inline bool CSPlayerHitPlayerReq::has_start_direct() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSPlayerHitPlayerReq::set_has_start_direct() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSPlayerHitPlayerReq::clear_has_start_direct() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSPlayerHitPlayerReq::clear_start_direct() {
  if (start_direct_ != NULL) start_direct_->::CSPoint::Clear();
  clear_has_start_direct();
}
inline const ::CSPoint& CSPlayerHitPlayerReq::start_direct() const {
  return start_direct_ != NULL ? *start_direct_ : *default_instance_->start_direct_;
}
inline ::CSPoint* CSPlayerHitPlayerReq::mutable_start_direct() {
  set_has_start_direct();
  if (start_direct_ == NULL) start_direct_ = new ::CSPoint;
  return start_direct_;
}
inline ::CSPoint* CSPlayerHitPlayerReq::release_start_direct() {
  clear_has_start_direct();
  ::CSPoint* temp = start_direct_;
  start_direct_ = NULL;
  return temp;
}
inline void CSPlayerHitPlayerReq::set_allocated_start_direct(::CSPoint* start_direct) {
  delete start_direct_;
  start_direct_ = start_direct;
  if (start_direct) {
    set_has_start_direct();
  } else {
    clear_has_start_direct();
  }
}

// required .CSPoint end_pos = 4;
inline bool CSPlayerHitPlayerReq::has_end_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSPlayerHitPlayerReq::set_has_end_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSPlayerHitPlayerReq::clear_has_end_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSPlayerHitPlayerReq::clear_end_pos() {
  if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
  clear_has_end_pos();
}
inline const ::CSPoint& CSPlayerHitPlayerReq::end_pos() const {
  return end_pos_ != NULL ? *end_pos_ : *default_instance_->end_pos_;
}
inline ::CSPoint* CSPlayerHitPlayerReq::mutable_end_pos() {
  set_has_end_pos();
  if (end_pos_ == NULL) end_pos_ = new ::CSPoint;
  return end_pos_;
}
inline ::CSPoint* CSPlayerHitPlayerReq::release_end_pos() {
  clear_has_end_pos();
  ::CSPoint* temp = end_pos_;
  end_pos_ = NULL;
  return temp;
}
inline void CSPlayerHitPlayerReq::set_allocated_end_pos(::CSPoint* end_pos) {
  delete end_pos_;
  end_pos_ = end_pos;
  if (end_pos) {
    set_has_end_pos();
  } else {
    clear_has_end_pos();
  }
}

// required .CSPoint end_direct = 5;
inline bool CSPlayerHitPlayerReq::has_end_direct() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSPlayerHitPlayerReq::set_has_end_direct() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSPlayerHitPlayerReq::clear_has_end_direct() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSPlayerHitPlayerReq::clear_end_direct() {
  if (end_direct_ != NULL) end_direct_->::CSPoint::Clear();
  clear_has_end_direct();
}
inline const ::CSPoint& CSPlayerHitPlayerReq::end_direct() const {
  return end_direct_ != NULL ? *end_direct_ : *default_instance_->end_direct_;
}
inline ::CSPoint* CSPlayerHitPlayerReq::mutable_end_direct() {
  set_has_end_direct();
  if (end_direct_ == NULL) end_direct_ = new ::CSPoint;
  return end_direct_;
}
inline ::CSPoint* CSPlayerHitPlayerReq::release_end_direct() {
  clear_has_end_direct();
  ::CSPoint* temp = end_direct_;
  end_direct_ = NULL;
  return temp;
}
inline void CSPlayerHitPlayerReq::set_allocated_end_direct(::CSPoint* end_direct) {
  delete end_direct_;
  end_direct_ = end_direct;
  if (end_direct) {
    set_has_end_direct();
  } else {
    clear_has_end_direct();
  }
}

// required uint32 action_id = 6;
inline bool CSPlayerHitPlayerReq::has_action_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSPlayerHitPlayerReq::set_has_action_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSPlayerHitPlayerReq::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSPlayerHitPlayerReq::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
inline ::google::protobuf::uint32 CSPlayerHitPlayerReq::action_id() const {
  return action_id_;
}
inline void CSPlayerHitPlayerReq::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
}

// repeated .AttackPlayerInfo users = 7;
inline int CSPlayerHitPlayerReq::users_size() const {
  return users_.size();
}
inline void CSPlayerHitPlayerReq::clear_users() {
  users_.Clear();
}
inline const ::AttackPlayerInfo& CSPlayerHitPlayerReq::users(int index) const {
  return users_.Get(index);
}
inline ::AttackPlayerInfo* CSPlayerHitPlayerReq::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::AttackPlayerInfo* CSPlayerHitPlayerReq::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AttackPlayerInfo >&
CSPlayerHitPlayerReq::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::AttackPlayerInfo >*
CSPlayerHitPlayerReq::mutable_users() {
  return &users_;
}

// -------------------------------------------------------------------

// CSPlayerHitPlayerRsp

// required uint32 userid = 1;
inline bool CSPlayerHitPlayerRsp::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPlayerHitPlayerRsp::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPlayerHitPlayerRsp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPlayerHitPlayerRsp::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSPlayerHitPlayerRsp::userid() const {
  return userid_;
}
inline void CSPlayerHitPlayerRsp::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required .CSPoint start_pos = 2;
inline bool CSPlayerHitPlayerRsp::has_start_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSPlayerHitPlayerRsp::set_has_start_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSPlayerHitPlayerRsp::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSPlayerHitPlayerRsp::clear_start_pos() {
  if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
  clear_has_start_pos();
}
inline const ::CSPoint& CSPlayerHitPlayerRsp::start_pos() const {
  return start_pos_ != NULL ? *start_pos_ : *default_instance_->start_pos_;
}
inline ::CSPoint* CSPlayerHitPlayerRsp::mutable_start_pos() {
  set_has_start_pos();
  if (start_pos_ == NULL) start_pos_ = new ::CSPoint;
  return start_pos_;
}
inline ::CSPoint* CSPlayerHitPlayerRsp::release_start_pos() {
  clear_has_start_pos();
  ::CSPoint* temp = start_pos_;
  start_pos_ = NULL;
  return temp;
}
inline void CSPlayerHitPlayerRsp::set_allocated_start_pos(::CSPoint* start_pos) {
  delete start_pos_;
  start_pos_ = start_pos;
  if (start_pos) {
    set_has_start_pos();
  } else {
    clear_has_start_pos();
  }
}

// required .CSPoint start_direct = 3;
inline bool CSPlayerHitPlayerRsp::has_start_direct() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSPlayerHitPlayerRsp::set_has_start_direct() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSPlayerHitPlayerRsp::clear_has_start_direct() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSPlayerHitPlayerRsp::clear_start_direct() {
  if (start_direct_ != NULL) start_direct_->::CSPoint::Clear();
  clear_has_start_direct();
}
inline const ::CSPoint& CSPlayerHitPlayerRsp::start_direct() const {
  return start_direct_ != NULL ? *start_direct_ : *default_instance_->start_direct_;
}
inline ::CSPoint* CSPlayerHitPlayerRsp::mutable_start_direct() {
  set_has_start_direct();
  if (start_direct_ == NULL) start_direct_ = new ::CSPoint;
  return start_direct_;
}
inline ::CSPoint* CSPlayerHitPlayerRsp::release_start_direct() {
  clear_has_start_direct();
  ::CSPoint* temp = start_direct_;
  start_direct_ = NULL;
  return temp;
}
inline void CSPlayerHitPlayerRsp::set_allocated_start_direct(::CSPoint* start_direct) {
  delete start_direct_;
  start_direct_ = start_direct;
  if (start_direct) {
    set_has_start_direct();
  } else {
    clear_has_start_direct();
  }
}

// required .CSPoint end_pos = 4;
inline bool CSPlayerHitPlayerRsp::has_end_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSPlayerHitPlayerRsp::set_has_end_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSPlayerHitPlayerRsp::clear_has_end_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSPlayerHitPlayerRsp::clear_end_pos() {
  if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
  clear_has_end_pos();
}
inline const ::CSPoint& CSPlayerHitPlayerRsp::end_pos() const {
  return end_pos_ != NULL ? *end_pos_ : *default_instance_->end_pos_;
}
inline ::CSPoint* CSPlayerHitPlayerRsp::mutable_end_pos() {
  set_has_end_pos();
  if (end_pos_ == NULL) end_pos_ = new ::CSPoint;
  return end_pos_;
}
inline ::CSPoint* CSPlayerHitPlayerRsp::release_end_pos() {
  clear_has_end_pos();
  ::CSPoint* temp = end_pos_;
  end_pos_ = NULL;
  return temp;
}
inline void CSPlayerHitPlayerRsp::set_allocated_end_pos(::CSPoint* end_pos) {
  delete end_pos_;
  end_pos_ = end_pos;
  if (end_pos) {
    set_has_end_pos();
  } else {
    clear_has_end_pos();
  }
}

// required .CSPoint end_direct = 5;
inline bool CSPlayerHitPlayerRsp::has_end_direct() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSPlayerHitPlayerRsp::set_has_end_direct() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSPlayerHitPlayerRsp::clear_has_end_direct() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSPlayerHitPlayerRsp::clear_end_direct() {
  if (end_direct_ != NULL) end_direct_->::CSPoint::Clear();
  clear_has_end_direct();
}
inline const ::CSPoint& CSPlayerHitPlayerRsp::end_direct() const {
  return end_direct_ != NULL ? *end_direct_ : *default_instance_->end_direct_;
}
inline ::CSPoint* CSPlayerHitPlayerRsp::mutable_end_direct() {
  set_has_end_direct();
  if (end_direct_ == NULL) end_direct_ = new ::CSPoint;
  return end_direct_;
}
inline ::CSPoint* CSPlayerHitPlayerRsp::release_end_direct() {
  clear_has_end_direct();
  ::CSPoint* temp = end_direct_;
  end_direct_ = NULL;
  return temp;
}
inline void CSPlayerHitPlayerRsp::set_allocated_end_direct(::CSPoint* end_direct) {
  delete end_direct_;
  end_direct_ = end_direct;
  if (end_direct) {
    set_has_end_direct();
  } else {
    clear_has_end_direct();
  }
}

// required uint32 action_id = 6;
inline bool CSPlayerHitPlayerRsp::has_action_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSPlayerHitPlayerRsp::set_has_action_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSPlayerHitPlayerRsp::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSPlayerHitPlayerRsp::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
inline ::google::protobuf::uint32 CSPlayerHitPlayerRsp::action_id() const {
  return action_id_;
}
inline void CSPlayerHitPlayerRsp::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
}

// repeated .AttackPlayerInfo users = 7;
inline int CSPlayerHitPlayerRsp::users_size() const {
  return users_.size();
}
inline void CSPlayerHitPlayerRsp::clear_users() {
  users_.Clear();
}
inline const ::AttackPlayerInfo& CSPlayerHitPlayerRsp::users(int index) const {
  return users_.Get(index);
}
inline ::AttackPlayerInfo* CSPlayerHitPlayerRsp::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::AttackPlayerInfo* CSPlayerHitPlayerRsp::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AttackPlayerInfo >&
CSPlayerHitPlayerRsp::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::AttackPlayerInfo >*
CSPlayerHitPlayerRsp::mutable_users() {
  return &users_;
}

// -------------------------------------------------------------------

// CSPlayerHPRsp

// required uint32 userid = 1;
inline bool CSPlayerHPRsp::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPlayerHPRsp::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPlayerHPRsp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPlayerHPRsp::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSPlayerHPRsp::userid() const {
  return userid_;
}
inline void CSPlayerHPRsp::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 blood = 2;
inline bool CSPlayerHPRsp::has_blood() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSPlayerHPRsp::set_has_blood() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSPlayerHPRsp::clear_has_blood() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSPlayerHPRsp::clear_blood() {
  blood_ = 0u;
  clear_has_blood();
}
inline ::google::protobuf::uint32 CSPlayerHPRsp::blood() const {
  return blood_;
}
inline void CSPlayerHPRsp::set_blood(::google::protobuf::uint32 value) {
  set_has_blood();
  blood_ = value;
}

// -------------------------------------------------------------------

// CSMonsterBloodRsp

// repeated .CSAttackMonsterBackInfo monsters = 1;
inline int CSMonsterBloodRsp::monsters_size() const {
  return monsters_.size();
}
inline void CSMonsterBloodRsp::clear_monsters() {
  monsters_.Clear();
}
inline const ::CSAttackMonsterBackInfo& CSMonsterBloodRsp::monsters(int index) const {
  return monsters_.Get(index);
}
inline ::CSAttackMonsterBackInfo* CSMonsterBloodRsp::mutable_monsters(int index) {
  return monsters_.Mutable(index);
}
inline ::CSAttackMonsterBackInfo* CSMonsterBloodRsp::add_monsters() {
  return monsters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSAttackMonsterBackInfo >&
CSMonsterBloodRsp::monsters() const {
  return monsters_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSAttackMonsterBackInfo >*
CSMonsterBloodRsp::mutable_monsters() {
  return &monsters_;
}

// -------------------------------------------------------------------

// CSMonsterDieRsp

// repeated uint32 monsters = 1;
inline int CSMonsterDieRsp::monsters_size() const {
  return monsters_.size();
}
inline void CSMonsterDieRsp::clear_monsters() {
  monsters_.Clear();
}
inline ::google::protobuf::uint32 CSMonsterDieRsp::monsters(int index) const {
  return monsters_.Get(index);
}
inline void CSMonsterDieRsp::set_monsters(int index, ::google::protobuf::uint32 value) {
  monsters_.Set(index, value);
}
inline void CSMonsterDieRsp::add_monsters(::google::protobuf::uint32 value) {
  monsters_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSMonsterDieRsp::monsters() const {
  return monsters_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSMonsterDieRsp::mutable_monsters() {
  return &monsters_;
}

// -------------------------------------------------------------------

// CSABMonsterReq

// required uint32 instance_id = 1;
inline bool CSABMonsterReq::has_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSABMonsterReq::set_has_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSABMonsterReq::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSABMonsterReq::clear_instance_id() {
  instance_id_ = 0u;
  clear_has_instance_id();
}
inline ::google::protobuf::uint32 CSABMonsterReq::instance_id() const {
  return instance_id_;
}
inline void CSABMonsterReq::set_instance_id(::google::protobuf::uint32 value) {
  set_has_instance_id();
  instance_id_ = value;
}

// -------------------------------------------------------------------

// CSABMonsterRsp_MonInfo

// required uint32 mon_id = 1;
inline bool CSABMonsterRsp_MonInfo::has_mon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSABMonsterRsp_MonInfo::set_has_mon_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSABMonsterRsp_MonInfo::clear_has_mon_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSABMonsterRsp_MonInfo::clear_mon_id() {
  mon_id_ = 0u;
  clear_has_mon_id();
}
inline ::google::protobuf::uint32 CSABMonsterRsp_MonInfo::mon_id() const {
  return mon_id_;
}
inline void CSABMonsterRsp_MonInfo::set_mon_id(::google::protobuf::uint32 value) {
  set_has_mon_id();
  mon_id_ = value;
}

// required uint32 mon_num = 2;
inline bool CSABMonsterRsp_MonInfo::has_mon_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSABMonsterRsp_MonInfo::set_has_mon_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSABMonsterRsp_MonInfo::clear_has_mon_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSABMonsterRsp_MonInfo::clear_mon_num() {
  mon_num_ = 0u;
  clear_has_mon_num();
}
inline ::google::protobuf::uint32 CSABMonsterRsp_MonInfo::mon_num() const {
  return mon_num_;
}
inline void CSABMonsterRsp_MonInfo::set_mon_num(::google::protobuf::uint32 value) {
  set_has_mon_num();
  mon_num_ = value;
}

// -------------------------------------------------------------------

// CSABMonsterRsp

// required uint32 instance_id = 1;
inline bool CSABMonsterRsp::has_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSABMonsterRsp::set_has_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSABMonsterRsp::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSABMonsterRsp::clear_instance_id() {
  instance_id_ = 0u;
  clear_has_instance_id();
}
inline ::google::protobuf::uint32 CSABMonsterRsp::instance_id() const {
  return instance_id_;
}
inline void CSABMonsterRsp::set_instance_id(::google::protobuf::uint32 value) {
  set_has_instance_id();
  instance_id_ = value;
}

// repeated .CSABMonsterRsp.MonInfo mon_infos = 2;
inline int CSABMonsterRsp::mon_infos_size() const {
  return mon_infos_.size();
}
inline void CSABMonsterRsp::clear_mon_infos() {
  mon_infos_.Clear();
}
inline const ::CSABMonsterRsp_MonInfo& CSABMonsterRsp::mon_infos(int index) const {
  return mon_infos_.Get(index);
}
inline ::CSABMonsterRsp_MonInfo* CSABMonsterRsp::mutable_mon_infos(int index) {
  return mon_infos_.Mutable(index);
}
inline ::CSABMonsterRsp_MonInfo* CSABMonsterRsp::add_mon_infos() {
  return mon_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSABMonsterRsp_MonInfo >&
CSABMonsterRsp::mon_infos() const {
  return mon_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSABMonsterRsp_MonInfo >*
CSABMonsterRsp::mutable_mon_infos() {
  return &mon_infos_;
}

// -------------------------------------------------------------------

// CSAutoBattleReq

// required uint32 instance_id = 1;
inline bool CSAutoBattleReq::has_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSAutoBattleReq::set_has_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSAutoBattleReq::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSAutoBattleReq::clear_instance_id() {
  instance_id_ = 0u;
  clear_has_instance_id();
}
inline ::google::protobuf::uint32 CSAutoBattleReq::instance_id() const {
  return instance_id_;
}
inline void CSAutoBattleReq::set_instance_id(::google::protobuf::uint32 value) {
  set_has_instance_id();
  instance_id_ = value;
}

// required uint32 turn_num = 2;
inline bool CSAutoBattleReq::has_turn_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSAutoBattleReq::set_has_turn_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSAutoBattleReq::clear_has_turn_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSAutoBattleReq::clear_turn_num() {
  turn_num_ = 0u;
  clear_has_turn_num();
}
inline ::google::protobuf::uint32 CSAutoBattleReq::turn_num() const {
  return turn_num_;
}
inline void CSAutoBattleReq::set_turn_num(::google::protobuf::uint32 value) {
  set_has_turn_num();
  turn_num_ = value;
}

// -------------------------------------------------------------------

// CSAutoBattleRsp

// required uint32 ret = 1;
inline bool CSAutoBattleRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSAutoBattleRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSAutoBattleRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSAutoBattleRsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 CSAutoBattleRsp::ret() const {
  return ret_;
}
inline void CSAutoBattleRsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// required uint32 cd = 2;
inline bool CSAutoBattleRsp::has_cd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSAutoBattleRsp::set_has_cd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSAutoBattleRsp::clear_has_cd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSAutoBattleRsp::clear_cd() {
  cd_ = 0u;
  clear_has_cd();
}
inline ::google::protobuf::uint32 CSAutoBattleRsp::cd() const {
  return cd_;
}
inline void CSAutoBattleRsp::set_cd(::google::protobuf::uint32 value) {
  set_has_cd();
  cd_ = value;
}

// required uint32 instance_id = 3;
inline bool CSAutoBattleRsp::has_instance_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSAutoBattleRsp::set_has_instance_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSAutoBattleRsp::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSAutoBattleRsp::clear_instance_id() {
  instance_id_ = 0u;
  clear_has_instance_id();
}
inline ::google::protobuf::uint32 CSAutoBattleRsp::instance_id() const {
  return instance_id_;
}
inline void CSAutoBattleRsp::set_instance_id(::google::protobuf::uint32 value) {
  set_has_instance_id();
  instance_id_ = value;
}

// -------------------------------------------------------------------

// CSABRewardRsp

// required uint32 instance_id = 1;
inline bool CSABRewardRsp::has_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSABRewardRsp::set_has_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSABRewardRsp::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSABRewardRsp::clear_instance_id() {
  instance_id_ = 0u;
  clear_has_instance_id();
}
inline ::google::protobuf::uint32 CSABRewardRsp::instance_id() const {
  return instance_id_;
}
inline void CSABRewardRsp::set_instance_id(::google::protobuf::uint32 value) {
  set_has_instance_id();
  instance_id_ = value;
}

// required .CSReward rewards = 2;
inline bool CSABRewardRsp::has_rewards() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSABRewardRsp::set_has_rewards() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSABRewardRsp::clear_has_rewards() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSABRewardRsp::clear_rewards() {
  if (rewards_ != NULL) rewards_->::CSReward::Clear();
  clear_has_rewards();
}
inline const ::CSReward& CSABRewardRsp::rewards() const {
  return rewards_ != NULL ? *rewards_ : *default_instance_->rewards_;
}
inline ::CSReward* CSABRewardRsp::mutable_rewards() {
  set_has_rewards();
  if (rewards_ == NULL) rewards_ = new ::CSReward;
  return rewards_;
}
inline ::CSReward* CSABRewardRsp::release_rewards() {
  clear_has_rewards();
  ::CSReward* temp = rewards_;
  rewards_ = NULL;
  return temp;
}
inline void CSABRewardRsp::set_allocated_rewards(::CSReward* rewards) {
  delete rewards_;
  rewards_ = rewards;
  if (rewards) {
    set_has_rewards();
  } else {
    clear_has_rewards();
  }
}

// -------------------------------------------------------------------

// CSCancelAutoBattleReq

// -------------------------------------------------------------------

// CSCancelAutoBattleRsp


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_5fbattle_2eproto__INCLUDED
