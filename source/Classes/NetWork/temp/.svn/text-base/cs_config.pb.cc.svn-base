// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CSRangeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRangeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMapContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMapContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_5fconfig_2eproto() {
  protobuf_AddDesc_cs_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs_config.proto");
  GOOGLE_CHECK(file != NULL);
  CSRangeInfo_descriptor_ = file->message_type(0);
  static const int CSRangeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRangeInfo, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRangeInfo, end_),
  };
  CSRangeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRangeInfo_descriptor_,
      CSRangeInfo::default_instance_,
      CSRangeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRangeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRangeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRangeInfo));
  CSSkillInfo_descriptor_ = file->message_type(1);
  static const int CSSkillInfo_offsets_[1] = {
  };
  CSSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSkillInfo_descriptor_,
      CSSkillInfo::default_instance_,
      CSSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSkillInfo));
  CSMonsterInfo_descriptor_ = file->message_type(2);
  static const int CSMonsterInfo_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, is_boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, body_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, physical_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, magic_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, skill_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, physical_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, magic_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, skill_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, health_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, accurate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, wreck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, parry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, critical_strike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, tenacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, slay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, proficiency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, vision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, birth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, patrol_),
  };
  CSMonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterInfo_descriptor_,
      CSMonsterInfo::default_instance_,
      CSMonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterInfo));
  CSMonsterGroup_descriptor_ = file->message_type(3);
  static const int CSMonsterGroup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterGroup, referesh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterGroup, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterGroup, monsters_),
  };
  CSMonsterGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterGroup_descriptor_,
      CSMonsterGroup::default_instance_,
      CSMonsterGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterGroup));
  CSMapContent_descriptor_ = file->message_type(4);
  static const int CSMapContent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContent, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContent, hero_born_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContent, portal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContent, next_map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContent, monster_group_),
  };
  CSMapContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMapContent_descriptor_,
      CSMapContent::default_instance_,
      CSMapContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMapContent));
  InstanceInfo_descriptor_ = file->message_type(5);
  static const int InstanceInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfo, instance_id_),
  };
  InstanceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceInfo_descriptor_,
      InstanceInfo::default_instance_,
      InstanceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRangeInfo_descriptor_, &CSRangeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSkillInfo_descriptor_, &CSSkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterInfo_descriptor_, &CSMonsterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterGroup_descriptor_, &CSMonsterGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMapContent_descriptor_, &CSMapContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceInfo_descriptor_, &InstanceInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_5fconfig_2eproto() {
  delete CSRangeInfo::default_instance_;
  delete CSRangeInfo_reflection_;
  delete CSSkillInfo::default_instance_;
  delete CSSkillInfo_reflection_;
  delete CSMonsterInfo::default_instance_;
  delete CSMonsterInfo_reflection_;
  delete CSMonsterGroup::default_instance_;
  delete CSMonsterGroup_reflection_;
  delete CSMapContent::default_instance_;
  delete CSMapContent_reflection_;
  delete InstanceInfo::default_instance_;
  delete InstanceInfo_reflection_;
}

void protobuf_AddDesc_cs_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_cs_5fbattle_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017cs_config.proto\032\017cs_battle.proto\"=\n\013CS"
    "RangeInfo\022\027\n\005start\030\001 \002(\0132\010.CSPoint\022\025\n\003en"
    "d\030\002 \002(\0132\010.CSPoint\"\r\n\013CSSkillInfo\"\355\003\n\rCSM"
    "onsterInfo\022\017\n\007raid_id\030\001 \002(\r\022\r\n\005speed\030\002 \002"
    "(\r\022\014\n\004type\030\003 \002(\r\022\017\n\007is_boss\030\004 \002(\010\022 \n\nbod"
    "y_range\030\005 \002(\0132\014.CSRangeInfo\022\027\n\017physical_"
    "attack\030\006 \002(\r\022\024\n\014magic_attack\030\007 \002(\r\022\024\n\014sk"
    "ill_attack\030\010 \002(\r\022\030\n\020physical_defence\030\t \002"
    "(\r\022\025\n\rmagic_defence\030\n \002(\r\022\025\n\rskill_defen"
    "ce\030\013 \002(\r\022\024\n\014health_point\030\014 \002(\r\022\020\n\010accura"
    "te\030\r \002(\r\022\r\n\005dodge\030\016 \002(\r\022\r\n\005wreck\030\017 \002(\r\022\r"
    "\n\005parry\030\020 \002(\r\022\027\n\017critical_strike\030\021 \002(\r\022\020"
    "\n\010tenacity\030\022 \002(\r\022\014\n\004slay\030\023 \002(\r\022\023\n\013profic"
    "iency\030\024 \002(\r\022\016\n\006vision\030\025 \002(\r\022\033\n\005birth\030\026 \002"
    "(\0132\014.CSRangeInfo\022\036\n\006patrol\030\027 \002(\0132\016.CSMon"
    "sterInfo\"X\n\016CSMonsterGroup\022\025\n\rreferesh_t"
    "ime\030\001 \002(\r\022\r\n\005times\030\002 \002(\r\022 \n\010monsters\030\003 \003"
    "(\0132\016.CSMonsterInfo\"~\n\014CSMapContent\022\016\n\006ma"
    "p_id\030\001 \002(\r\022\021\n\thero_born\030\002 \002(\r\022\016\n\006portal\030"
    "\003 \002(\r\022\023\n\013next_map_id\030\004 \001(\r\022&\n\rmonster_gr"
    "oup\030\005 \003(\0132\017.CSMonsterGroup\"#\n\014InstanceIn"
    "fo\022\023\n\013instance_id\030\001 \002(\r", 863);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs_config.proto", &protobuf_RegisterTypes);
  CSRangeInfo::default_instance_ = new CSRangeInfo();
  CSSkillInfo::default_instance_ = new CSSkillInfo();
  CSMonsterInfo::default_instance_ = new CSMonsterInfo();
  CSMonsterGroup::default_instance_ = new CSMonsterGroup();
  CSMapContent::default_instance_ = new CSMapContent();
  InstanceInfo::default_instance_ = new InstanceInfo();
  CSRangeInfo::default_instance_->InitAsDefaultInstance();
  CSSkillInfo::default_instance_->InitAsDefaultInstance();
  CSMonsterInfo::default_instance_->InitAsDefaultInstance();
  CSMonsterGroup::default_instance_->InitAsDefaultInstance();
  CSMapContent::default_instance_->InitAsDefaultInstance();
  InstanceInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_5fconfig_2eproto {
  StaticDescriptorInitializer_cs_5fconfig_2eproto() {
    protobuf_AddDesc_cs_5fconfig_2eproto();
  }
} static_descriptor_initializer_cs_5fconfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CSRangeInfo::kStartFieldNumber;
const int CSRangeInfo::kEndFieldNumber;
#endif  // !_MSC_VER

CSRangeInfo::CSRangeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRangeInfo::InitAsDefaultInstance() {
  start_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSRangeInfo::CSRangeInfo(const CSRangeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRangeInfo::SharedCtor() {
  _cached_size_ = 0;
  start_ = NULL;
  end_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRangeInfo::~CSRangeInfo() {
  SharedDtor();
}

void CSRangeInfo::SharedDtor() {
  if (this != default_instance_) {
    delete start_;
    delete end_;
  }
}

void CSRangeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRangeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRangeInfo_descriptor_;
}

const CSRangeInfo& CSRangeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fconfig_2eproto();
  return *default_instance_;
}

CSRangeInfo* CSRangeInfo::default_instance_ = NULL;

CSRangeInfo* CSRangeInfo::New() const {
  return new CSRangeInfo;
}

void CSRangeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_start()) {
      if (start_ != NULL) start_->::CSPoint::Clear();
    }
    if (has_end()) {
      if (end_ != NULL) end_->::CSPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRangeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CSPoint start = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_end;
        break;
      }

      // required .CSPoint end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRangeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CSPoint start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->start(), output);
  }

  // required .CSPoint end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRangeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CSPoint start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->start(), target);
  }

  // required .CSPoint end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRangeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CSPoint start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start());
    }

    // required .CSPoint end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRangeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRangeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRangeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRangeInfo::MergeFrom(const CSRangeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      mutable_start()->::CSPoint::MergeFrom(from.start());
    }
    if (from.has_end()) {
      mutable_end()->::CSPoint::MergeFrom(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRangeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRangeInfo::CopyFrom(const CSRangeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRangeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_start()) {
    if (!this->start().IsInitialized()) return false;
  }
  if (has_end()) {
    if (!this->end().IsInitialized()) return false;
  }
  return true;
}

void CSRangeInfo::Swap(CSRangeInfo* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRangeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRangeInfo_descriptor_;
  metadata.reflection = CSRangeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSSkillInfo::CSSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSkillInfo::InitAsDefaultInstance() {
}

CSSkillInfo::CSSkillInfo(const CSSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSkillInfo::~CSSkillInfo() {
  SharedDtor();
}

void CSSkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSkillInfo_descriptor_;
}

const CSSkillInfo& CSSkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fconfig_2eproto();
  return *default_instance_;
}

CSSkillInfo* CSSkillInfo::default_instance_ = NULL;

CSSkillInfo* CSSkillInfo::New() const {
  return new CSSkillInfo;
}

void CSSkillInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSkillInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSkillInfo::MergeFrom(const CSSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSkillInfo::CopyFrom(const CSSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSkillInfo::IsInitialized() const {

  return true;
}

void CSSkillInfo::Swap(CSSkillInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSkillInfo_descriptor_;
  metadata.reflection = CSSkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterInfo::kRaidIdFieldNumber;
const int CSMonsterInfo::kSpeedFieldNumber;
const int CSMonsterInfo::kTypeFieldNumber;
const int CSMonsterInfo::kIsBossFieldNumber;
const int CSMonsterInfo::kBodyRangeFieldNumber;
const int CSMonsterInfo::kPhysicalAttackFieldNumber;
const int CSMonsterInfo::kMagicAttackFieldNumber;
const int CSMonsterInfo::kSkillAttackFieldNumber;
const int CSMonsterInfo::kPhysicalDefenceFieldNumber;
const int CSMonsterInfo::kMagicDefenceFieldNumber;
const int CSMonsterInfo::kSkillDefenceFieldNumber;
const int CSMonsterInfo::kHealthPointFieldNumber;
const int CSMonsterInfo::kAccurateFieldNumber;
const int CSMonsterInfo::kDodgeFieldNumber;
const int CSMonsterInfo::kWreckFieldNumber;
const int CSMonsterInfo::kParryFieldNumber;
const int CSMonsterInfo::kCriticalStrikeFieldNumber;
const int CSMonsterInfo::kTenacityFieldNumber;
const int CSMonsterInfo::kSlayFieldNumber;
const int CSMonsterInfo::kProficiencyFieldNumber;
const int CSMonsterInfo::kVisionFieldNumber;
const int CSMonsterInfo::kBirthFieldNumber;
const int CSMonsterInfo::kPatrolFieldNumber;
#endif  // !_MSC_VER

CSMonsterInfo::CSMonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterInfo::InitAsDefaultInstance() {
  body_range_ = const_cast< ::CSRangeInfo*>(&::CSRangeInfo::default_instance());
  birth_ = const_cast< ::CSRangeInfo*>(&::CSRangeInfo::default_instance());
  patrol_ = const_cast< ::CSMonsterInfo*>(&::CSMonsterInfo::default_instance());
}

CSMonsterInfo::CSMonsterInfo(const CSMonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  raid_id_ = 0u;
  speed_ = 0u;
  type_ = 0u;
  is_boss_ = false;
  body_range_ = NULL;
  physical_attack_ = 0u;
  magic_attack_ = 0u;
  skill_attack_ = 0u;
  physical_defence_ = 0u;
  magic_defence_ = 0u;
  skill_defence_ = 0u;
  health_point_ = 0u;
  accurate_ = 0u;
  dodge_ = 0u;
  wreck_ = 0u;
  parry_ = 0u;
  critical_strike_ = 0u;
  tenacity_ = 0u;
  slay_ = 0u;
  proficiency_ = 0u;
  vision_ = 0u;
  birth_ = NULL;
  patrol_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterInfo::~CSMonsterInfo() {
  SharedDtor();
}

void CSMonsterInfo::SharedDtor() {
  if (this != default_instance_) {
    delete body_range_;
    delete birth_;
    delete patrol_;
  }
}

void CSMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterInfo_descriptor_;
}

const CSMonsterInfo& CSMonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fconfig_2eproto();
  return *default_instance_;
}

CSMonsterInfo* CSMonsterInfo::default_instance_ = NULL;

CSMonsterInfo* CSMonsterInfo::New() const {
  return new CSMonsterInfo;
}

void CSMonsterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    raid_id_ = 0u;
    speed_ = 0u;
    type_ = 0u;
    is_boss_ = false;
    if (has_body_range()) {
      if (body_range_ != NULL) body_range_->::CSRangeInfo::Clear();
    }
    physical_attack_ = 0u;
    magic_attack_ = 0u;
    skill_attack_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    physical_defence_ = 0u;
    magic_defence_ = 0u;
    skill_defence_ = 0u;
    health_point_ = 0u;
    accurate_ = 0u;
    dodge_ = 0u;
    wreck_ = 0u;
    parry_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    critical_strike_ = 0u;
    tenacity_ = 0u;
    slay_ = 0u;
    proficiency_ = 0u;
    vision_ = 0u;
    if (has_birth()) {
      if (birth_ != NULL) birth_->::CSRangeInfo::Clear();
    }
    if (has_patrol()) {
      if (patrol_ != NULL) patrol_->::CSMonsterInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 raid_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_speed;
        break;
      }

      // required uint32 speed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_boss;
        break;
      }

      // required bool is_boss = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_boss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_boss_)));
          set_has_is_boss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_body_range;
        break;
      }

      // required .CSRangeInfo body_range = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_physical_attack;
        break;
      }

      // required uint32 physical_attack = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physical_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physical_attack_)));
          set_has_physical_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_magic_attack;
        break;
      }

      // required uint32 magic_attack = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_attack_)));
          set_has_magic_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_skill_attack;
        break;
      }

      // required uint32 skill_attack = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_attack_)));
          set_has_skill_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_physical_defence;
        break;
      }

      // required uint32 physical_defence = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physical_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physical_defence_)));
          set_has_physical_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_magic_defence;
        break;
      }

      // required uint32 magic_defence = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_defence_)));
          set_has_magic_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_skill_defence;
        break;
      }

      // required uint32 skill_defence = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_defence_)));
          set_has_skill_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_health_point;
        break;
      }

      // required uint32 health_point = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_point_)));
          set_has_health_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_accurate;
        break;
      }

      // required uint32 accurate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accurate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accurate_)));
          set_has_accurate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_dodge;
        break;
      }

      // required uint32 dodge = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_wreck;
        break;
      }

      // required uint32 wreck = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wreck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wreck_)));
          set_has_wreck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_parry;
        break;
      }

      // required uint32 parry = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parry_)));
          set_has_parry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_critical_strike;
        break;
      }

      // required uint32 critical_strike = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critical_strike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critical_strike_)));
          set_has_critical_strike();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_tenacity;
        break;
      }

      // required uint32 tenacity = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tenacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tenacity_)));
          set_has_tenacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_slay;
        break;
      }

      // required uint32 slay = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slay_)));
          set_has_slay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_proficiency;
        break;
      }

      // required uint32 proficiency = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proficiency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proficiency_)));
          set_has_proficiency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_vision;
        break;
      }

      // required uint32 vision = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vision_)));
          set_has_vision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_birth;
        break;
      }

      // required .CSRangeInfo birth = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_birth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_birth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_patrol;
        break;
      }

      // required .CSMonsterInfo patrol = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patrol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_patrol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->raid_id(), output);
  }

  // required uint32 speed = 2;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->speed(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required bool is_boss = 4;
  if (has_is_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_boss(), output);
  }

  // required .CSRangeInfo body_range = 5;
  if (has_body_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->body_range(), output);
  }

  // required uint32 physical_attack = 6;
  if (has_physical_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->physical_attack(), output);
  }

  // required uint32 magic_attack = 7;
  if (has_magic_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->magic_attack(), output);
  }

  // required uint32 skill_attack = 8;
  if (has_skill_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->skill_attack(), output);
  }

  // required uint32 physical_defence = 9;
  if (has_physical_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->physical_defence(), output);
  }

  // required uint32 magic_defence = 10;
  if (has_magic_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->magic_defence(), output);
  }

  // required uint32 skill_defence = 11;
  if (has_skill_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->skill_defence(), output);
  }

  // required uint32 health_point = 12;
  if (has_health_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->health_point(), output);
  }

  // required uint32 accurate = 13;
  if (has_accurate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->accurate(), output);
  }

  // required uint32 dodge = 14;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->dodge(), output);
  }

  // required uint32 wreck = 15;
  if (has_wreck()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->wreck(), output);
  }

  // required uint32 parry = 16;
  if (has_parry()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->parry(), output);
  }

  // required uint32 critical_strike = 17;
  if (has_critical_strike()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->critical_strike(), output);
  }

  // required uint32 tenacity = 18;
  if (has_tenacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->tenacity(), output);
  }

  // required uint32 slay = 19;
  if (has_slay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->slay(), output);
  }

  // required uint32 proficiency = 20;
  if (has_proficiency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->proficiency(), output);
  }

  // required uint32 vision = 21;
  if (has_vision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->vision(), output);
  }

  // required .CSRangeInfo birth = 22;
  if (has_birth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->birth(), output);
  }

  // required .CSMonsterInfo patrol = 23;
  if (has_patrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->patrol(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->raid_id(), target);
  }

  // required uint32 speed = 2;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->speed(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required bool is_boss = 4;
  if (has_is_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_boss(), target);
  }

  // required .CSRangeInfo body_range = 5;
  if (has_body_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->body_range(), target);
  }

  // required uint32 physical_attack = 6;
  if (has_physical_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->physical_attack(), target);
  }

  // required uint32 magic_attack = 7;
  if (has_magic_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->magic_attack(), target);
  }

  // required uint32 skill_attack = 8;
  if (has_skill_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->skill_attack(), target);
  }

  // required uint32 physical_defence = 9;
  if (has_physical_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->physical_defence(), target);
  }

  // required uint32 magic_defence = 10;
  if (has_magic_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->magic_defence(), target);
  }

  // required uint32 skill_defence = 11;
  if (has_skill_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->skill_defence(), target);
  }

  // required uint32 health_point = 12;
  if (has_health_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->health_point(), target);
  }

  // required uint32 accurate = 13;
  if (has_accurate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->accurate(), target);
  }

  // required uint32 dodge = 14;
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->dodge(), target);
  }

  // required uint32 wreck = 15;
  if (has_wreck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->wreck(), target);
  }

  // required uint32 parry = 16;
  if (has_parry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->parry(), target);
  }

  // required uint32 critical_strike = 17;
  if (has_critical_strike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->critical_strike(), target);
  }

  // required uint32 tenacity = 18;
  if (has_tenacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->tenacity(), target);
  }

  // required uint32 slay = 19;
  if (has_slay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->slay(), target);
  }

  // required uint32 proficiency = 20;
  if (has_proficiency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->proficiency(), target);
  }

  // required uint32 vision = 21;
  if (has_vision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->vision(), target);
  }

  // required .CSRangeInfo birth = 22;
  if (has_birth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->birth(), target);
  }

  // required .CSMonsterInfo patrol = 23;
  if (has_patrol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->patrol(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 raid_id = 1;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // required uint32 speed = 2;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required bool is_boss = 4;
    if (has_is_boss()) {
      total_size += 1 + 1;
    }

    // required .CSRangeInfo body_range = 5;
    if (has_body_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body_range());
    }

    // required uint32 physical_attack = 6;
    if (has_physical_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physical_attack());
    }

    // required uint32 magic_attack = 7;
    if (has_magic_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic_attack());
    }

    // required uint32 skill_attack = 8;
    if (has_skill_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_attack());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 physical_defence = 9;
    if (has_physical_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physical_defence());
    }

    // required uint32 magic_defence = 10;
    if (has_magic_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic_defence());
    }

    // required uint32 skill_defence = 11;
    if (has_skill_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_defence());
    }

    // required uint32 health_point = 12;
    if (has_health_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health_point());
    }

    // required uint32 accurate = 13;
    if (has_accurate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accurate());
    }

    // required uint32 dodge = 14;
    if (has_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge());
    }

    // required uint32 wreck = 15;
    if (has_wreck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wreck());
    }

    // required uint32 parry = 16;
    if (has_parry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parry());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 critical_strike = 17;
    if (has_critical_strike()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critical_strike());
    }

    // required uint32 tenacity = 18;
    if (has_tenacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tenacity());
    }

    // required uint32 slay = 19;
    if (has_slay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slay());
    }

    // required uint32 proficiency = 20;
    if (has_proficiency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proficiency());
    }

    // required uint32 vision = 21;
    if (has_vision()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vision());
    }

    // required .CSRangeInfo birth = 22;
    if (has_birth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->birth());
    }

    // required .CSMonsterInfo patrol = 23;
    if (has_patrol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->patrol());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterInfo::MergeFrom(const CSMonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_is_boss()) {
      set_is_boss(from.is_boss());
    }
    if (from.has_body_range()) {
      mutable_body_range()->::CSRangeInfo::MergeFrom(from.body_range());
    }
    if (from.has_physical_attack()) {
      set_physical_attack(from.physical_attack());
    }
    if (from.has_magic_attack()) {
      set_magic_attack(from.magic_attack());
    }
    if (from.has_skill_attack()) {
      set_skill_attack(from.skill_attack());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_physical_defence()) {
      set_physical_defence(from.physical_defence());
    }
    if (from.has_magic_defence()) {
      set_magic_defence(from.magic_defence());
    }
    if (from.has_skill_defence()) {
      set_skill_defence(from.skill_defence());
    }
    if (from.has_health_point()) {
      set_health_point(from.health_point());
    }
    if (from.has_accurate()) {
      set_accurate(from.accurate());
    }
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
    if (from.has_wreck()) {
      set_wreck(from.wreck());
    }
    if (from.has_parry()) {
      set_parry(from.parry());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_critical_strike()) {
      set_critical_strike(from.critical_strike());
    }
    if (from.has_tenacity()) {
      set_tenacity(from.tenacity());
    }
    if (from.has_slay()) {
      set_slay(from.slay());
    }
    if (from.has_proficiency()) {
      set_proficiency(from.proficiency());
    }
    if (from.has_vision()) {
      set_vision(from.vision());
    }
    if (from.has_birth()) {
      mutable_birth()->::CSRangeInfo::MergeFrom(from.birth());
    }
    if (from.has_patrol()) {
      mutable_patrol()->::CSMonsterInfo::MergeFrom(from.patrol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterInfo::CopyFrom(const CSMonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x007fffff) != 0x007fffff) return false;

  if (has_body_range()) {
    if (!this->body_range().IsInitialized()) return false;
  }
  if (has_birth()) {
    if (!this->birth().IsInitialized()) return false;
  }
  if (has_patrol()) {
    if (!this->patrol().IsInitialized()) return false;
  }
  return true;
}

void CSMonsterInfo::Swap(CSMonsterInfo* other) {
  if (other != this) {
    std::swap(raid_id_, other->raid_id_);
    std::swap(speed_, other->speed_);
    std::swap(type_, other->type_);
    std::swap(is_boss_, other->is_boss_);
    std::swap(body_range_, other->body_range_);
    std::swap(physical_attack_, other->physical_attack_);
    std::swap(magic_attack_, other->magic_attack_);
    std::swap(skill_attack_, other->skill_attack_);
    std::swap(physical_defence_, other->physical_defence_);
    std::swap(magic_defence_, other->magic_defence_);
    std::swap(skill_defence_, other->skill_defence_);
    std::swap(health_point_, other->health_point_);
    std::swap(accurate_, other->accurate_);
    std::swap(dodge_, other->dodge_);
    std::swap(wreck_, other->wreck_);
    std::swap(parry_, other->parry_);
    std::swap(critical_strike_, other->critical_strike_);
    std::swap(tenacity_, other->tenacity_);
    std::swap(slay_, other->slay_);
    std::swap(proficiency_, other->proficiency_);
    std::swap(vision_, other->vision_);
    std::swap(birth_, other->birth_);
    std::swap(patrol_, other->patrol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterInfo_descriptor_;
  metadata.reflection = CSMonsterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterGroup::kRefereshTimeFieldNumber;
const int CSMonsterGroup::kTimesFieldNumber;
const int CSMonsterGroup::kMonstersFieldNumber;
#endif  // !_MSC_VER

CSMonsterGroup::CSMonsterGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterGroup::InitAsDefaultInstance() {
}

CSMonsterGroup::CSMonsterGroup(const CSMonsterGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterGroup::SharedCtor() {
  _cached_size_ = 0;
  referesh_time_ = 0u;
  times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterGroup::~CSMonsterGroup() {
  SharedDtor();
}

void CSMonsterGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterGroup_descriptor_;
}

const CSMonsterGroup& CSMonsterGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fconfig_2eproto();
  return *default_instance_;
}

CSMonsterGroup* CSMonsterGroup::default_instance_ = NULL;

CSMonsterGroup* CSMonsterGroup::New() const {
  return new CSMonsterGroup;
}

void CSMonsterGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    referesh_time_ = 0u;
    times_ = 0u;
  }
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 referesh_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &referesh_time_)));
          set_has_referesh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // required uint32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_monsters;
        break;
      }

      // repeated .CSMonsterInfo monsters = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_monsters;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 referesh_time = 1;
  if (has_referesh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->referesh_time(), output);
  }

  // required uint32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->times(), output);
  }

  // repeated .CSMonsterInfo monsters = 3;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->monsters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 referesh_time = 1;
  if (has_referesh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->referesh_time(), target);
  }

  // required uint32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->times(), target);
  }

  // repeated .CSMonsterInfo monsters = 3;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->monsters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 referesh_time = 1;
    if (has_referesh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->referesh_time());
    }

    // required uint32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

  }
  // repeated .CSMonsterInfo monsters = 3;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterGroup::MergeFrom(const CSMonsterGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_referesh_time()) {
      set_referesh_time(from.referesh_time());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterGroup::CopyFrom(const CSMonsterGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < monsters_size(); i++) {
    if (!this->monsters(i).IsInitialized()) return false;
  }
  return true;
}

void CSMonsterGroup::Swap(CSMonsterGroup* other) {
  if (other != this) {
    std::swap(referesh_time_, other->referesh_time_);
    std::swap(times_, other->times_);
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterGroup_descriptor_;
  metadata.reflection = CSMonsterGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMapContent::kMapIdFieldNumber;
const int CSMapContent::kHeroBornFieldNumber;
const int CSMapContent::kPortalFieldNumber;
const int CSMapContent::kNextMapIdFieldNumber;
const int CSMapContent::kMonsterGroupFieldNumber;
#endif  // !_MSC_VER

CSMapContent::CSMapContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMapContent::InitAsDefaultInstance() {
}

CSMapContent::CSMapContent(const CSMapContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMapContent::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  hero_born_ = 0u;
  portal_ = 0u;
  next_map_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMapContent::~CSMapContent() {
  SharedDtor();
}

void CSMapContent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMapContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMapContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMapContent_descriptor_;
}

const CSMapContent& CSMapContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fconfig_2eproto();
  return *default_instance_;
}

CSMapContent* CSMapContent::default_instance_ = NULL;

CSMapContent* CSMapContent::New() const {
  return new CSMapContent;
}

void CSMapContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
    hero_born_ = 0u;
    portal_ = 0u;
    next_map_id_ = 0u;
  }
  monster_group_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMapContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_born;
        break;
      }

      // required uint32 hero_born = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_born:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_born_)));
          set_has_hero_born();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_portal;
        break;
      }

      // required uint32 portal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_portal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &portal_)));
          set_has_portal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_next_map_id;
        break;
      }

      // optional uint32 next_map_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_map_id_)));
          set_has_next_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_monster_group;
        break;
      }

      // repeated .CSMonsterGroup monster_group = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monster_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_monster_group;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMapContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }

  // required uint32 hero_born = 2;
  if (has_hero_born()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_born(), output);
  }

  // required uint32 portal = 3;
  if (has_portal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->portal(), output);
  }

  // optional uint32 next_map_id = 4;
  if (has_next_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->next_map_id(), output);
  }

  // repeated .CSMonsterGroup monster_group = 5;
  for (int i = 0; i < this->monster_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->monster_group(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMapContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 map_id = 1;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->map_id(), target);
  }

  // required uint32 hero_born = 2;
  if (has_hero_born()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_born(), target);
  }

  // required uint32 portal = 3;
  if (has_portal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->portal(), target);
  }

  // optional uint32 next_map_id = 4;
  if (has_next_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->next_map_id(), target);
  }

  // repeated .CSMonsterGroup monster_group = 5;
  for (int i = 0; i < this->monster_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->monster_group(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMapContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // required uint32 hero_born = 2;
    if (has_hero_born()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_born());
    }

    // required uint32 portal = 3;
    if (has_portal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->portal());
    }

    // optional uint32 next_map_id = 4;
    if (has_next_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_map_id());
    }

  }
  // repeated .CSMonsterGroup monster_group = 5;
  total_size += 1 * this->monster_group_size();
  for (int i = 0; i < this->monster_group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monster_group(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMapContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMapContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMapContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMapContent::MergeFrom(const CSMapContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  monster_group_.MergeFrom(from.monster_group_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_hero_born()) {
      set_hero_born(from.hero_born());
    }
    if (from.has_portal()) {
      set_portal(from.portal());
    }
    if (from.has_next_map_id()) {
      set_next_map_id(from.next_map_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMapContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMapContent::CopyFrom(const CSMapContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMapContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < monster_group_size(); i++) {
    if (!this->monster_group(i).IsInitialized()) return false;
  }
  return true;
}

void CSMapContent::Swap(CSMapContent* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(hero_born_, other->hero_born_);
    std::swap(portal_, other->portal_);
    std::swap(next_map_id_, other->next_map_id_);
    monster_group_.Swap(&other->monster_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMapContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMapContent_descriptor_;
  metadata.reflection = CSMapContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceInfo::kInstanceIdFieldNumber;
#endif  // !_MSC_VER

InstanceInfo::InstanceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceInfo::InitAsDefaultInstance() {
}

InstanceInfo::InstanceInfo(const InstanceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceInfo::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceInfo::~InstanceInfo() {
  SharedDtor();
}

void InstanceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceInfo_descriptor_;
}

const InstanceInfo& InstanceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fconfig_2eproto();
  return *default_instance_;
}

InstanceInfo* InstanceInfo::default_instance_ = NULL;

InstanceInfo* InstanceInfo::New() const {
  return new InstanceInfo;
}

void InstanceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->instance_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->instance_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceInfo::MergeFrom(const InstanceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceInfo::CopyFrom(const InstanceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InstanceInfo::Swap(InstanceInfo* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceInfo_descriptor_;
  metadata.reflection = InstanceInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
