// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "db.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rudb {

namespace {

const ::google::protobuf::Descriptor* db_msgheader_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_msgheader_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_player_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_player_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_crtrole_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_crtrole_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_crtrole_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_crtrole_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_login_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_login_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_login_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_login_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_del_role_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_del_role_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_levelup_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_levelup_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_backpack_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_backpack_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_equip_hole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_equip_hole_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_packpos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_packpos_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_backpack_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_backpack_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_backpack_add_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_backpack_add_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_backpack_update_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_backpack_update_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_backpack_del_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_backpack_del_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_backpack_move_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_backpack_move_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_instance_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_instance_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_instance_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_instance_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_instance_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_instance_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_instance_modify_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_instance_modify_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_task_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_task_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_task_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_task_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_task_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_task_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_task_step_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_task_step_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_attribute_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_attribute_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_attribute_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_attribute_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_attribute_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_attribute_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_attribute_set_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_attribute_set_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_skill_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_skill_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_skill_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_skill_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_skill_query_out_skill_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_skill_query_out_skill_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_skill_add_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_skill_add_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_log_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_log_one_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_log_one_log_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_add_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_add_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_exchange_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_exchange_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_exchange_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_exchange_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_range_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_range_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_range_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_range_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_log_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_log_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_mon_list_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_mon_list_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* mon_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mon_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_mon_list_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_mon_list_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_players_info_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_players_info_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_players_info_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_players_info_out_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_db_2eproto() {
  protobuf_AddDesc_db_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "db.proto");
  GOOGLE_CHECK(file != NULL);
  db_msgheader_t_descriptor_ = file->message_type(0);
  static const int db_msgheader_t_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, msg_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, target_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, src_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, login_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, aux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, trans_id_),
  };
  db_msgheader_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_msgheader_t_descriptor_,
      db_msgheader_t::default_instance_,
      db_msgheader_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_msgheader_t));
  db_player_info_t_descriptor_ = file->message_type(1);
  static const int db_player_info_t_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, zone_id_),
  };
  db_player_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_player_info_t_descriptor_,
      db_player_info_t::default_instance_,
      db_player_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_player_info_t));
  db_crtrole_in_descriptor_ = file->message_type(2);
  static const int db_crtrole_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_in, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_in, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_in, gender_),
  };
  db_crtrole_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_crtrole_in_descriptor_,
      db_crtrole_in::default_instance_,
      db_crtrole_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_crtrole_in));
  db_crtrole_out_descriptor_ = file->message_type(3);
  static const int db_crtrole_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_out, regtime_),
  };
  db_crtrole_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_crtrole_out_descriptor_,
      db_crtrole_out::default_instance_,
      db_crtrole_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_crtrole_out));
  db_login_in_descriptor_ = file->message_type(4);
  static const int db_login_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_in, zone_id_),
  };
  db_login_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_login_in_descriptor_,
      db_login_in::default_instance_,
      db_login_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_login_in));
  db_login_out_descriptor_ = file->message_type(5);
  static const int db_login_out_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, regtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, last_login_time_),
  };
  db_login_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_login_out_descriptor_,
      db_login_out::default_instance_,
      db_login_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_login_out));
  db_del_role_in_descriptor_ = file->message_type(6);
  static const int db_del_role_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_role_in, zone_id_),
  };
  db_del_role_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_del_role_in_descriptor_,
      db_del_role_in::default_instance_,
      db_del_role_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_role_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_role_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_del_role_in));
  db_levelup_in_descriptor_ = file->message_type(7);
  static const int db_levelup_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_levelup_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_levelup_in, level_),
  };
  db_levelup_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_levelup_in_descriptor_,
      db_levelup_in::default_instance_,
      db_levelup_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_levelup_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_levelup_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_levelup_in));
  db_backpack_query_in_descriptor_ = file->message_type(8);
  static const int db_backpack_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_query_in, zone_id_),
  };
  db_backpack_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_backpack_query_in_descriptor_,
      db_backpack_query_in::default_instance_,
      db_backpack_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_backpack_query_in));
  db_equip_hole_descriptor_ = file->message_type(9);
  static const int db_equip_hole_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_hole, hole_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_hole, item_gem_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_hole, attr_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_hole, attr_value_),
  };
  db_equip_hole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_equip_hole_descriptor_,
      db_equip_hole::default_instance_,
      db_equip_hole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_hole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_hole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_equip_hole));
  db_packpos_descriptor_ = file->message_type(10);
  static const int db_packpos_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, item_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, hole1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, hole2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, hole3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, hole4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, equip_holes_),
  };
  db_packpos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_packpos_descriptor_,
      db_packpos::default_instance_,
      db_packpos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_packpos));
  db_backpack_query_out_descriptor_ = file->message_type(11);
  static const int db_backpack_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_query_out, items_),
  };
  db_backpack_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_backpack_query_out_descriptor_,
      db_backpack_query_out::default_instance_,
      db_backpack_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_backpack_query_out));
  db_backpack_add_in_descriptor_ = file->message_type(12);
  static const int db_backpack_add_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_add_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_add_in, items_),
  };
  db_backpack_add_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_backpack_add_in_descriptor_,
      db_backpack_add_in::default_instance_,
      db_backpack_add_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_add_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_add_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_backpack_add_in));
  db_backpack_update_in_descriptor_ = file->message_type(13);
  static const int db_backpack_update_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_update_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_update_in, items_),
  };
  db_backpack_update_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_backpack_update_in_descriptor_,
      db_backpack_update_in::default_instance_,
      db_backpack_update_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_update_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_update_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_backpack_update_in));
  db_backpack_del_in_descriptor_ = file->message_type(14);
  static const int db_backpack_del_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_del_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_del_in, items_),
  };
  db_backpack_del_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_backpack_del_in_descriptor_,
      db_backpack_del_in::default_instance_,
      db_backpack_del_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_del_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_del_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_backpack_del_in));
  db_backpack_move_in_descriptor_ = file->message_type(15);
  static const int db_backpack_move_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_move_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_move_in, pos_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_move_in, pos_to_),
  };
  db_backpack_move_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_backpack_move_in_descriptor_,
      db_backpack_move_in::default_instance_,
      db_backpack_move_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_move_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_move_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_backpack_move_in));
  db_instance_query_in_descriptor_ = file->message_type(16);
  static const int db_instance_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_query_in, zone_id_),
  };
  db_instance_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_instance_query_in_descriptor_,
      db_instance_query_in::default_instance_,
      db_instance_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_instance_query_in));
  db_instance_info_descriptor_ = file->message_type(17);
  static const int db_instance_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_info, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_info, star_),
  };
  db_instance_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_instance_info_descriptor_,
      db_instance_info::default_instance_,
      db_instance_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_instance_info));
  db_instance_query_out_descriptor_ = file->message_type(18);
  static const int db_instance_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_query_out, instances_),
  };
  db_instance_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_instance_query_out_descriptor_,
      db_instance_query_out::default_instance_,
      db_instance_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_instance_query_out));
  db_instance_modify_in_descriptor_ = file->message_type(19);
  static const int db_instance_modify_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_modify_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_modify_in, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_modify_in, star_),
  };
  db_instance_modify_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_instance_modify_in_descriptor_,
      db_instance_modify_in::default_instance_,
      db_instance_modify_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_modify_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_modify_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_instance_modify_in));
  db_task_query_in_descriptor_ = file->message_type(20);
  static const int db_task_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_query_in, zone_id_),
  };
  db_task_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_task_query_in_descriptor_,
      db_task_query_in::default_instance_,
      db_task_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_task_query_in));
  db_task_info_descriptor_ = file->message_type(21);
  static const int db_task_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_info, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_info, step_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_info, step_rate_),
  };
  db_task_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_task_info_descriptor_,
      db_task_info::default_instance_,
      db_task_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_task_info));
  db_task_query_out_descriptor_ = file->message_type(22);
  static const int db_task_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_query_out, tasks_),
  };
  db_task_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_task_query_out_descriptor_,
      db_task_query_out::default_instance_,
      db_task_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_task_query_out));
  db_task_step_in_descriptor_ = file->message_type(23);
  static const int db_task_step_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_step_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_step_in, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_step_in, step_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_step_in, step_rate_),
  };
  db_task_step_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_task_step_in_descriptor_,
      db_task_step_in::default_instance_,
      db_task_step_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_step_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_step_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_task_step_in));
  db_attribute_query_in_descriptor_ = file->message_type(24);
  static const int db_attribute_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_query_in, zone_id_),
  };
  db_attribute_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_attribute_query_in_descriptor_,
      db_attribute_query_in::default_instance_,
      db_attribute_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_attribute_query_in));
  db_attribute_info_descriptor_ = file->message_type(25);
  static const int db_attribute_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_info, attribute_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_info, attribute_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_info, dead_tm_),
  };
  db_attribute_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_attribute_info_descriptor_,
      db_attribute_info::default_instance_,
      db_attribute_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_attribute_info));
  db_attribute_query_out_descriptor_ = file->message_type(26);
  static const int db_attribute_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_query_out, attributes_),
  };
  db_attribute_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_attribute_query_out_descriptor_,
      db_attribute_query_out::default_instance_,
      db_attribute_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_attribute_query_out));
  db_attribute_set_in_descriptor_ = file->message_type(27);
  static const int db_attribute_set_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_set_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_set_in, attribute_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_set_in, attribute_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_set_in, dead_tm_),
  };
  db_attribute_set_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_attribute_set_in_descriptor_,
      db_attribute_set_in::default_instance_,
      db_attribute_set_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_set_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_set_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_attribute_set_in));
  db_skill_query_in_descriptor_ = file->message_type(28);
  static const int db_skill_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_in, zone_id_),
  };
  db_skill_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_skill_query_in_descriptor_,
      db_skill_query_in::default_instance_,
      db_skill_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_skill_query_in));
  db_skill_query_out_descriptor_ = file->message_type(29);
  static const int db_skill_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_out, skills_),
  };
  db_skill_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_skill_query_out_descriptor_,
      db_skill_query_out::default_instance_,
      db_skill_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_skill_query_out));
  db_skill_query_out_skill_info_descriptor_ = db_skill_query_out_descriptor_->nested_type(0);
  static const int db_skill_query_out_skill_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_out_skill_info, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_out_skill_info, skill_level_),
  };
  db_skill_query_out_skill_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_skill_query_out_skill_info_descriptor_,
      db_skill_query_out_skill_info::default_instance_,
      db_skill_query_out_skill_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_out_skill_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_out_skill_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_skill_query_out_skill_info));
  db_skill_add_in_descriptor_ = file->message_type(30);
  static const int db_skill_add_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_add_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_add_in, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_add_in, skill_level_),
  };
  db_skill_add_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_skill_add_in_descriptor_,
      db_skill_add_in::default_instance_,
      db_skill_add_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_add_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_add_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_skill_add_in));
  db_ai_rank_info_descriptor_ = file->message_type(31);
  static const int db_ai_rank_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_info, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_info, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_info, rank_),
  };
  db_ai_rank_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_info_descriptor_,
      db_ai_rank_info::default_instance_,
      db_ai_rank_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_info));
  db_ai_rank_log_descriptor_ = file->message_type(32);
  static const int db_ai_rank_log_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log, logs_),
  };
  db_ai_rank_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_log_descriptor_,
      db_ai_rank_log::default_instance_,
      db_ai_rank_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_log));
  db_ai_rank_log_one_log_descriptor_ = db_ai_rank_log_descriptor_->nested_type(0);
  static const int db_ai_rank_log_one_log_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_one_log, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_one_log, direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_one_log, win_),
  };
  db_ai_rank_log_one_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_log_one_log_descriptor_,
      db_ai_rank_log_one_log::default_instance_,
      db_ai_rank_log_one_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_one_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_one_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_log_one_log));
  db_ai_rank_add_in_descriptor_ = file->message_type(33);
  static const int db_ai_rank_add_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_add_in, zone_id_),
  };
  db_ai_rank_add_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_add_in_descriptor_,
      db_ai_rank_add_in::default_instance_,
      db_ai_rank_add_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_add_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_add_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_add_in));
  db_ai_rank_query_in_descriptor_ = file->message_type(34);
  static const int db_ai_rank_query_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_in, length_),
  };
  db_ai_rank_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_query_in_descriptor_,
      db_ai_rank_query_in::default_instance_,
      db_ai_rank_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_query_in));
  db_ai_rank_query_out_descriptor_ = file->message_type(35);
  static const int db_ai_rank_query_out_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_out, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_out, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_out, log_),
  };
  db_ai_rank_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_query_out_descriptor_,
      db_ai_rank_query_out::default_instance_,
      db_ai_rank_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_query_out));
  db_ai_rank_exchange_in_descriptor_ = file->message_type(36);
  static const int db_ai_rank_exchange_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_exchange_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_exchange_in, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_exchange_in, target_userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_exchange_in, target_reg_time_),
  };
  db_ai_rank_exchange_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_exchange_in_descriptor_,
      db_ai_rank_exchange_in::default_instance_,
      db_ai_rank_exchange_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_exchange_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_exchange_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_exchange_in));
  db_ai_rank_exchange_out_descriptor_ = file->message_type(37);
  static const int db_ai_rank_exchange_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_exchange_out, user_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_exchange_out, target_user_rank_),
  };
  db_ai_rank_exchange_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_exchange_out_descriptor_,
      db_ai_rank_exchange_out::default_instance_,
      db_ai_rank_exchange_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_exchange_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_exchange_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_exchange_out));
  db_ai_rank_range_in_descriptor_ = file->message_type(38);
  static const int db_ai_rank_range_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_in, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_in, end_),
  };
  db_ai_rank_range_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_range_in_descriptor_,
      db_ai_rank_range_in::default_instance_,
      db_ai_rank_range_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_range_in));
  db_ai_rank_range_out_descriptor_ = file->message_type(39);
  static const int db_ai_rank_range_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_out, infos_),
  };
  db_ai_rank_range_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_range_out_descriptor_,
      db_ai_rank_range_out::default_instance_,
      db_ai_rank_range_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_range_out));
  db_ai_rank_log_in_descriptor_ = file->message_type(40);
  static const int db_ai_rank_log_in_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, target_userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, target_reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, win_),
  };
  db_ai_rank_log_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_log_in_descriptor_,
      db_ai_rank_log_in::default_instance_,
      db_ai_rank_log_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_log_in));
  db_query_mon_list_in_descriptor_ = file->message_type(41);
  static const int db_query_mon_list_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mon_list_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mon_list_in, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mon_list_in, name_),
  };
  db_query_mon_list_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_mon_list_in_descriptor_,
      db_query_mon_list_in::default_instance_,
      db_query_mon_list_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mon_list_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mon_list_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_mon_list_in));
  mon_info_t_descriptor_ = file->message_type(42);
  static const int mon_info_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mon_info_t, mon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mon_info_t, mon_status_),
  };
  mon_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mon_info_t_descriptor_,
      mon_info_t::default_instance_,
      mon_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mon_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mon_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mon_info_t));
  db_query_mon_list_out_descriptor_ = file->message_type(43);
  static const int db_query_mon_list_out_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mon_list_out, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mon_list_out, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mon_list_out, mon_info_),
  };
  db_query_mon_list_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_mon_list_out_descriptor_,
      db_query_mon_list_out::default_instance_,
      db_query_mon_list_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mon_list_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mon_list_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_mon_list_out));
  db_query_players_info_in_descriptor_ = file->message_type(44);
  static const int db_query_players_info_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_in, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_in, players_),
  };
  db_query_players_info_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_players_info_in_descriptor_,
      db_query_players_info_in::default_instance_,
      db_query_players_info_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_players_info_in));
  db_query_players_info_out_descriptor_ = file->message_type(45);
  static const int db_query_players_info_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_out, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_out, players_),
  };
  db_query_players_info_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_players_info_out_descriptor_,
      db_query_players_info_out::default_instance_,
      db_query_players_info_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_players_info_out));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_db_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_msgheader_t_descriptor_, &db_msgheader_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_player_info_t_descriptor_, &db_player_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_crtrole_in_descriptor_, &db_crtrole_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_crtrole_out_descriptor_, &db_crtrole_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_login_in_descriptor_, &db_login_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_login_out_descriptor_, &db_login_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_del_role_in_descriptor_, &db_del_role_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_levelup_in_descriptor_, &db_levelup_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_backpack_query_in_descriptor_, &db_backpack_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_equip_hole_descriptor_, &db_equip_hole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_packpos_descriptor_, &db_packpos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_backpack_query_out_descriptor_, &db_backpack_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_backpack_add_in_descriptor_, &db_backpack_add_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_backpack_update_in_descriptor_, &db_backpack_update_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_backpack_del_in_descriptor_, &db_backpack_del_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_backpack_move_in_descriptor_, &db_backpack_move_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_instance_query_in_descriptor_, &db_instance_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_instance_info_descriptor_, &db_instance_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_instance_query_out_descriptor_, &db_instance_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_instance_modify_in_descriptor_, &db_instance_modify_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_task_query_in_descriptor_, &db_task_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_task_info_descriptor_, &db_task_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_task_query_out_descriptor_, &db_task_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_task_step_in_descriptor_, &db_task_step_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_attribute_query_in_descriptor_, &db_attribute_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_attribute_info_descriptor_, &db_attribute_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_attribute_query_out_descriptor_, &db_attribute_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_attribute_set_in_descriptor_, &db_attribute_set_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_skill_query_in_descriptor_, &db_skill_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_skill_query_out_descriptor_, &db_skill_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_skill_query_out_skill_info_descriptor_, &db_skill_query_out_skill_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_skill_add_in_descriptor_, &db_skill_add_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_info_descriptor_, &db_ai_rank_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_log_descriptor_, &db_ai_rank_log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_log_one_log_descriptor_, &db_ai_rank_log_one_log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_add_in_descriptor_, &db_ai_rank_add_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_query_in_descriptor_, &db_ai_rank_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_query_out_descriptor_, &db_ai_rank_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_exchange_in_descriptor_, &db_ai_rank_exchange_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_exchange_out_descriptor_, &db_ai_rank_exchange_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_range_in_descriptor_, &db_ai_rank_range_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_range_out_descriptor_, &db_ai_rank_range_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_log_in_descriptor_, &db_ai_rank_log_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_mon_list_in_descriptor_, &db_query_mon_list_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mon_info_t_descriptor_, &mon_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_mon_list_out_descriptor_, &db_query_mon_list_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_players_info_in_descriptor_, &db_query_players_info_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_players_info_out_descriptor_, &db_query_players_info_out::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_db_2eproto() {
  delete db_msgheader_t::default_instance_;
  delete db_msgheader_t_reflection_;
  delete db_player_info_t::default_instance_;
  delete db_player_info_t_reflection_;
  delete db_crtrole_in::default_instance_;
  delete db_crtrole_in_reflection_;
  delete db_crtrole_out::default_instance_;
  delete db_crtrole_out_reflection_;
  delete db_login_in::default_instance_;
  delete db_login_in_reflection_;
  delete db_login_out::default_instance_;
  delete db_login_out_reflection_;
  delete db_del_role_in::default_instance_;
  delete db_del_role_in_reflection_;
  delete db_levelup_in::default_instance_;
  delete db_levelup_in_reflection_;
  delete db_backpack_query_in::default_instance_;
  delete db_backpack_query_in_reflection_;
  delete db_equip_hole::default_instance_;
  delete db_equip_hole_reflection_;
  delete db_packpos::default_instance_;
  delete db_packpos_reflection_;
  delete db_backpack_query_out::default_instance_;
  delete db_backpack_query_out_reflection_;
  delete db_backpack_add_in::default_instance_;
  delete db_backpack_add_in_reflection_;
  delete db_backpack_update_in::default_instance_;
  delete db_backpack_update_in_reflection_;
  delete db_backpack_del_in::default_instance_;
  delete db_backpack_del_in_reflection_;
  delete db_backpack_move_in::default_instance_;
  delete db_backpack_move_in_reflection_;
  delete db_instance_query_in::default_instance_;
  delete db_instance_query_in_reflection_;
  delete db_instance_info::default_instance_;
  delete db_instance_info_reflection_;
  delete db_instance_query_out::default_instance_;
  delete db_instance_query_out_reflection_;
  delete db_instance_modify_in::default_instance_;
  delete db_instance_modify_in_reflection_;
  delete db_task_query_in::default_instance_;
  delete db_task_query_in_reflection_;
  delete db_task_info::default_instance_;
  delete db_task_info_reflection_;
  delete db_task_query_out::default_instance_;
  delete db_task_query_out_reflection_;
  delete db_task_step_in::default_instance_;
  delete db_task_step_in_reflection_;
  delete db_attribute_query_in::default_instance_;
  delete db_attribute_query_in_reflection_;
  delete db_attribute_info::default_instance_;
  delete db_attribute_info_reflection_;
  delete db_attribute_query_out::default_instance_;
  delete db_attribute_query_out_reflection_;
  delete db_attribute_set_in::default_instance_;
  delete db_attribute_set_in_reflection_;
  delete db_skill_query_in::default_instance_;
  delete db_skill_query_in_reflection_;
  delete db_skill_query_out::default_instance_;
  delete db_skill_query_out_reflection_;
  delete db_skill_query_out_skill_info::default_instance_;
  delete db_skill_query_out_skill_info_reflection_;
  delete db_skill_add_in::default_instance_;
  delete db_skill_add_in_reflection_;
  delete db_ai_rank_info::default_instance_;
  delete db_ai_rank_info_reflection_;
  delete db_ai_rank_log::default_instance_;
  delete db_ai_rank_log_reflection_;
  delete db_ai_rank_log_one_log::default_instance_;
  delete db_ai_rank_log_one_log_reflection_;
  delete db_ai_rank_add_in::default_instance_;
  delete db_ai_rank_add_in_reflection_;
  delete db_ai_rank_query_in::default_instance_;
  delete db_ai_rank_query_in_reflection_;
  delete db_ai_rank_query_out::default_instance_;
  delete db_ai_rank_query_out_reflection_;
  delete db_ai_rank_exchange_in::default_instance_;
  delete db_ai_rank_exchange_in_reflection_;
  delete db_ai_rank_exchange_out::default_instance_;
  delete db_ai_rank_exchange_out_reflection_;
  delete db_ai_rank_range_in::default_instance_;
  delete db_ai_rank_range_in_reflection_;
  delete db_ai_rank_range_out::default_instance_;
  delete db_ai_rank_range_out_reflection_;
  delete db_ai_rank_log_in::default_instance_;
  delete db_ai_rank_log_in_reflection_;
  delete db_query_mon_list_in::default_instance_;
  delete db_query_mon_list_in_reflection_;
  delete mon_info_t::default_instance_;
  delete mon_info_t_reflection_;
  delete db_query_mon_list_out::default_instance_;
  delete db_query_mon_list_out_reflection_;
  delete db_query_players_info_in::default_instance_;
  delete db_query_players_info_in_reflection_;
  delete db_query_players_info_out::default_instance_;
  delete db_query_players_info_out_reflection_;
}

void protobuf_AddDesc_db_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010db.proto\022\004rudb\"\233\001\n\016db_msgheader_t\022\020\n\010m"
    "sg_name\030\001 \002(\t\022\022\n\ntarget_uid\030\002 \002(\r\022\017\n\007err"
    "code\030\003 \002(\r\022\020\n\010reg_time\030\004 \001(\r\022\017\n\007src_uid\030"
    "\005 \001(\r\022\020\n\010login_id\030\006 \001(\r\022\013\n\003aux\030\007 \001(\t\022\020\n\010"
    "trans_id\030\010 \001(\r\"\200\001\n\020db_player_info_t\022\016\n\006u"
    "serid\030\001 \002(\r\022\020\n\010reg_time\030\002 \002(\r\022\r\n\005level\030\003"
    " \001(\r\022\014\n\004name\030\004 \001(\t\022\014\n\004type\030\005 \001(\r\022\016\n\006gend"
    "er\030\006 \001(\r\022\017\n\007zone_id\030\007 \001(\r\"L\n\rdb_crtrole_"
    "in\022\017\n\007zone_id\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\014\n\004typ"
    "e\030\003 \002(\r\022\016\n\006gender\030\004 \002(\r\"!\n\016db_crtrole_ou"
    "t\022\017\n\007regtime\030\001 \002(\r\"\036\n\013db_login_in\022\017\n\007zon"
    "e_id\030\001 \002(\r\"}\n\014db_login_out\022\014\n\004name\030\001 \002(\t"
    "\022\017\n\007regtime\030\002 \002(\r\022\014\n\004type\030\003 \002(\r\022\016\n\006gende"
    "r\030\004 \002(\r\022\n\n\002lv\030\005 \002(\r\022\013\n\003exp\030\006 \002(\r\022\027\n\017last"
    "_login_time\030\007 \002(\r\"!\n\016db_del_role_in\022\017\n\007z"
    "one_id\030\001 \002(\r\"/\n\rdb_levelup_in\022\017\n\007zone_id"
    "\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\"\'\n\024db_backpack_que"
    "ry_in\022\017\n\007zone_id\030\001 \002(\r\"^\n\rdb_equip_hole\022"
    "\022\n\nhole_index\030\001 \002(\r\022\023\n\013item_gem_id\030\002 \002(\r"
    "\022\020\n\010attr_key\030\003 \002(\r\022\022\n\nattr_value\030\004 \002(\r\"\266"
    "\001\n\ndb_packpos\022\013\n\003pos\030\001 \002(\r\022\017\n\007item_id\030\002 "
    "\002(\r\022\022\n\nitem_level\030\003 \002(\r\022\020\n\010item_num\030\004 \002("
    "\r\022\r\n\005hole1\030\t \001(\r\022\r\n\005hole2\030\006 \001(\r\022\r\n\005hole3"
    "\030\007 \001(\r\022\r\n\005hole4\030\010 \001(\r\022(\n\013equip_holes\030\005 \003"
    "(\0132\023.rudb.db_equip_hole\"8\n\025db_backpack_q"
    "uery_out\022\037\n\005items\030\001 \003(\0132\020.rudb.db_packpo"
    "s\"F\n\022db_backpack_add_in\022\017\n\007zone_id\030\001 \002(\r"
    "\022\037\n\005items\030\002 \003(\0132\020.rudb.db_packpos\"I\n\025db_"
    "backpack_update_in\022\017\n\007zone_id\030\001 \002(\r\022\037\n\005i"
    "tems\030\002 \003(\0132\020.rudb.db_packpos\"F\n\022db_backp"
    "ack_del_in\022\017\n\007zone_id\030\001 \002(\r\022\037\n\005items\030\002 \003"
    "(\0132\020.rudb.db_packpos\"H\n\023db_backpack_move"
    "_in\022\017\n\007zone_id\030\001 \002(\r\022\020\n\010pos_from\030\002 \002(\r\022\016"
    "\n\006pos_to\030\003 \002(\r\"\'\n\024db_instance_query_in\022\017"
    "\n\007zone_id\030\001 \002(\r\"5\n\020db_instance_info\022\023\n\013i"
    "nstance_id\030\001 \002(\r\022\014\n\004star\030\002 \002(\r\"B\n\025db_ins"
    "tance_query_out\022)\n\tinstances\030\001 \003(\0132\026.rud"
    "b.db_instance_info\"K\n\025db_instance_modify"
    "_in\022\017\n\007zone_id\030\001 \002(\r\022\023\n\013instance_id\030\002 \002("
    "\r\022\014\n\004star\030\003 \002(\r\"#\n\020db_task_query_in\022\017\n\007z"
    "one_id\030\001 \002(\r\"C\n\014db_task_info\022\017\n\007task_id\030"
    "\001 \002(\r\022\017\n\007step_id\030\002 \002(\r\022\021\n\tstep_rate\030\003 \002("
    "\r\"6\n\021db_task_query_out\022!\n\005tasks\030\001 \003(\0132\022."
    "rudb.db_task_info\"W\n\017db_task_step_in\022\017\n\007"
    "zone_id\030\001 \002(\r\022\017\n\007task_id\030\002 \002(\r\022\017\n\007step_i"
    "d\030\003 \002(\r\022\021\n\tstep_rate\030\004 \002(\r\"(\n\025db_attribu"
    "te_query_in\022\017\n\007zone_id\030\001 \002(\r\"S\n\021db_attri"
    "bute_info\022\024\n\014attribute_id\030\001 \002(\r\022\027\n\017attri"
    "bute_value\030\002 \002(\r\022\017\n\007dead_tm\030\003 \002(\r\"E\n\026db_"
    "attribute_query_out\022+\n\nattributes\030\001 \003(\0132"
    "\027.rudb.db_attribute_info\"f\n\023db_attribute"
    "_set_in\022\017\n\007zone_id\030\001 \002(\r\022\024\n\014attribute_id"
    "\030\002 \002(\r\022\027\n\017attribute_value\030\003 \002(\r\022\017\n\007dead_"
    "tm\030\004 \002(\r\"$\n\021db_skill_query_in\022\017\n\007zone_id"
    "\030\001 \002(\r\"~\n\022db_skill_query_out\0223\n\006skills\030\001"
    " \003(\0132#.rudb.db_skill_query_out.skill_inf"
    "o\0323\n\nskill_info\022\020\n\010skill_id\030\001 \002(\r\022\023\n\013ski"
    "ll_level\030\002 \002(\r\"I\n\017db_skill_add_in\022\017\n\007zon"
    "e_id\030\001 \002(\r\022\020\n\010skill_id\030\002 \002(\r\022\023\n\013skill_le"
    "vel\030\003 \002(\r\"A\n\017db_ai_rank_info\022\016\n\006userid\030\001"
    " \002(\r\022\020\n\010reg_time\030\002 \002(\r\022\014\n\004rank\030\003 \002(\r\"r\n\016"
    "db_ai_rank_log\022*\n\004logs\030\001 \003(\0132\034.rudb.db_a"
    "i_rank_log.one_log\0324\n\007one_log\022\014\n\004name\030\001 "
    "\002(\t\022\016\n\006direct\030\002 \002(\010\022\013\n\003win\030\003 \002(\010\"$\n\021db_a"
    "i_rank_add_in\022\017\n\007zone_id\030\001 \002(\r\"6\n\023db_ai_"
    "rank_query_in\022\017\n\007zone_id\030\001 \002(\r\022\016\n\006length"
    "\030\002 \002(\r\"m\n\024db_ai_rank_query_out\022\014\n\004rank\030\001"
    " \002(\r\022$\n\005infos\030\002 \003(\0132\025.rudb.db_ai_rank_in"
    "fo\022!\n\003log\030\003 \002(\0132\024.rudb.db_ai_rank_log\"i\n"
    "\026db_ai_rank_exchange_in\022\017\n\007zone_id\030\001 \002(\r"
    "\022\016\n\006userid\030\002 \002(\r\022\025\n\rtarget_userid\030\003 \002(\r\022"
    "\027\n\017target_reg_time\030\004 \002(\r\"F\n\027db_ai_rank_e"
    "xchange_out\022\021\n\tuser_rank\030\001 \002(\r\022\030\n\020target"
    "_user_rank\030\002 \002(\r\"B\n\023db_ai_rank_range_in\022"
    "\017\n\007zone_id\030\001 \002(\r\022\r\n\005start\030\002 \002(\r\022\013\n\003end\030\003"
    " \002(\r\"<\n\024db_ai_rank_range_out\022$\n\005infos\030\001 "
    "\003(\0132\025.rudb.db_ai_rank_info\"\204\001\n\021db_ai_ran"
    "k_log_in\022\017\n\007zone_id\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022"
    "\025\n\rtarget_userid\030\003 \002(\r\022\027\n\017target_reg_tim"
    "e\030\004 \002(\r\022\023\n\013target_name\030\005 \002(\t\022\013\n\003win\030\006 \002("
    "\010\"B\n\024db_query_mon_list_in\022\017\n\007zone_id\030\001 \002"
    "(\r\022\013\n\003uid\030\002 \002(\r\022\014\n\004name\030\003 \002(\t\"0\n\nmon_inf"
    "o_t\022\016\n\006mon_id\030\001 \002(\r\022\022\n\nmon_status\030\002 \002(\r\""
    "V\n\025db_query_mon_list_out\022\013\n\003uid\030\001 \002(\r\022\014\n"
    "\004name\030\002 \002(\t\022\"\n\010mon_info\030\003 \003(\0132\020.rudb.mon"
    "_info_t\"a\n\030db_query_players_info_in\022\017\n\007z"
    "one_id\030\001 \002(\r\022\013\n\003cmd\030\002 \002(\r\022\'\n\007players\030\003 \003"
    "(\0132\026.rudb.db_player_info_t\"Q\n\031db_query_p"
    "layers_info_out\022\013\n\003cmd\030\001 \002(\r\022\'\n\007players\030"
    "\002 \003(\0132\026.rudb.db_player_info_t", 3589);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db.proto", &protobuf_RegisterTypes);
  db_msgheader_t::default_instance_ = new db_msgheader_t();
  db_player_info_t::default_instance_ = new db_player_info_t();
  db_crtrole_in::default_instance_ = new db_crtrole_in();
  db_crtrole_out::default_instance_ = new db_crtrole_out();
  db_login_in::default_instance_ = new db_login_in();
  db_login_out::default_instance_ = new db_login_out();
  db_del_role_in::default_instance_ = new db_del_role_in();
  db_levelup_in::default_instance_ = new db_levelup_in();
  db_backpack_query_in::default_instance_ = new db_backpack_query_in();
  db_equip_hole::default_instance_ = new db_equip_hole();
  db_packpos::default_instance_ = new db_packpos();
  db_backpack_query_out::default_instance_ = new db_backpack_query_out();
  db_backpack_add_in::default_instance_ = new db_backpack_add_in();
  db_backpack_update_in::default_instance_ = new db_backpack_update_in();
  db_backpack_del_in::default_instance_ = new db_backpack_del_in();
  db_backpack_move_in::default_instance_ = new db_backpack_move_in();
  db_instance_query_in::default_instance_ = new db_instance_query_in();
  db_instance_info::default_instance_ = new db_instance_info();
  db_instance_query_out::default_instance_ = new db_instance_query_out();
  db_instance_modify_in::default_instance_ = new db_instance_modify_in();
  db_task_query_in::default_instance_ = new db_task_query_in();
  db_task_info::default_instance_ = new db_task_info();
  db_task_query_out::default_instance_ = new db_task_query_out();
  db_task_step_in::default_instance_ = new db_task_step_in();
  db_attribute_query_in::default_instance_ = new db_attribute_query_in();
  db_attribute_info::default_instance_ = new db_attribute_info();
  db_attribute_query_out::default_instance_ = new db_attribute_query_out();
  db_attribute_set_in::default_instance_ = new db_attribute_set_in();
  db_skill_query_in::default_instance_ = new db_skill_query_in();
  db_skill_query_out::default_instance_ = new db_skill_query_out();
  db_skill_query_out_skill_info::default_instance_ = new db_skill_query_out_skill_info();
  db_skill_add_in::default_instance_ = new db_skill_add_in();
  db_ai_rank_info::default_instance_ = new db_ai_rank_info();
  db_ai_rank_log::default_instance_ = new db_ai_rank_log();
  db_ai_rank_log_one_log::default_instance_ = new db_ai_rank_log_one_log();
  db_ai_rank_add_in::default_instance_ = new db_ai_rank_add_in();
  db_ai_rank_query_in::default_instance_ = new db_ai_rank_query_in();
  db_ai_rank_query_out::default_instance_ = new db_ai_rank_query_out();
  db_ai_rank_exchange_in::default_instance_ = new db_ai_rank_exchange_in();
  db_ai_rank_exchange_out::default_instance_ = new db_ai_rank_exchange_out();
  db_ai_rank_range_in::default_instance_ = new db_ai_rank_range_in();
  db_ai_rank_range_out::default_instance_ = new db_ai_rank_range_out();
  db_ai_rank_log_in::default_instance_ = new db_ai_rank_log_in();
  db_query_mon_list_in::default_instance_ = new db_query_mon_list_in();
  mon_info_t::default_instance_ = new mon_info_t();
  db_query_mon_list_out::default_instance_ = new db_query_mon_list_out();
  db_query_players_info_in::default_instance_ = new db_query_players_info_in();
  db_query_players_info_out::default_instance_ = new db_query_players_info_out();
  db_msgheader_t::default_instance_->InitAsDefaultInstance();
  db_player_info_t::default_instance_->InitAsDefaultInstance();
  db_crtrole_in::default_instance_->InitAsDefaultInstance();
  db_crtrole_out::default_instance_->InitAsDefaultInstance();
  db_login_in::default_instance_->InitAsDefaultInstance();
  db_login_out::default_instance_->InitAsDefaultInstance();
  db_del_role_in::default_instance_->InitAsDefaultInstance();
  db_levelup_in::default_instance_->InitAsDefaultInstance();
  db_backpack_query_in::default_instance_->InitAsDefaultInstance();
  db_equip_hole::default_instance_->InitAsDefaultInstance();
  db_packpos::default_instance_->InitAsDefaultInstance();
  db_backpack_query_out::default_instance_->InitAsDefaultInstance();
  db_backpack_add_in::default_instance_->InitAsDefaultInstance();
  db_backpack_update_in::default_instance_->InitAsDefaultInstance();
  db_backpack_del_in::default_instance_->InitAsDefaultInstance();
  db_backpack_move_in::default_instance_->InitAsDefaultInstance();
  db_instance_query_in::default_instance_->InitAsDefaultInstance();
  db_instance_info::default_instance_->InitAsDefaultInstance();
  db_instance_query_out::default_instance_->InitAsDefaultInstance();
  db_instance_modify_in::default_instance_->InitAsDefaultInstance();
  db_task_query_in::default_instance_->InitAsDefaultInstance();
  db_task_info::default_instance_->InitAsDefaultInstance();
  db_task_query_out::default_instance_->InitAsDefaultInstance();
  db_task_step_in::default_instance_->InitAsDefaultInstance();
  db_attribute_query_in::default_instance_->InitAsDefaultInstance();
  db_attribute_info::default_instance_->InitAsDefaultInstance();
  db_attribute_query_out::default_instance_->InitAsDefaultInstance();
  db_attribute_set_in::default_instance_->InitAsDefaultInstance();
  db_skill_query_in::default_instance_->InitAsDefaultInstance();
  db_skill_query_out::default_instance_->InitAsDefaultInstance();
  db_skill_query_out_skill_info::default_instance_->InitAsDefaultInstance();
  db_skill_add_in::default_instance_->InitAsDefaultInstance();
  db_ai_rank_info::default_instance_->InitAsDefaultInstance();
  db_ai_rank_log::default_instance_->InitAsDefaultInstance();
  db_ai_rank_log_one_log::default_instance_->InitAsDefaultInstance();
  db_ai_rank_add_in::default_instance_->InitAsDefaultInstance();
  db_ai_rank_query_in::default_instance_->InitAsDefaultInstance();
  db_ai_rank_query_out::default_instance_->InitAsDefaultInstance();
  db_ai_rank_exchange_in::default_instance_->InitAsDefaultInstance();
  db_ai_rank_exchange_out::default_instance_->InitAsDefaultInstance();
  db_ai_rank_range_in::default_instance_->InitAsDefaultInstance();
  db_ai_rank_range_out::default_instance_->InitAsDefaultInstance();
  db_ai_rank_log_in::default_instance_->InitAsDefaultInstance();
  db_query_mon_list_in::default_instance_->InitAsDefaultInstance();
  mon_info_t::default_instance_->InitAsDefaultInstance();
  db_query_mon_list_out::default_instance_->InitAsDefaultInstance();
  db_query_players_info_in::default_instance_->InitAsDefaultInstance();
  db_query_players_info_out::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_db_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_db_2eproto {
  StaticDescriptorInitializer_db_2eproto() {
    protobuf_AddDesc_db_2eproto();
  }
} static_descriptor_initializer_db_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int db_msgheader_t::kMsgNameFieldNumber;
const int db_msgheader_t::kTargetUidFieldNumber;
const int db_msgheader_t::kErrcodeFieldNumber;
const int db_msgheader_t::kRegTimeFieldNumber;
const int db_msgheader_t::kSrcUidFieldNumber;
const int db_msgheader_t::kLoginIdFieldNumber;
const int db_msgheader_t::kAuxFieldNumber;
const int db_msgheader_t::kTransIdFieldNumber;
#endif  // !_MSC_VER

db_msgheader_t::db_msgheader_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_msgheader_t::InitAsDefaultInstance() {
}

db_msgheader_t::db_msgheader_t(const db_msgheader_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_msgheader_t::SharedCtor() {
  _cached_size_ = 0;
  msg_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_uid_ = 0u;
  errcode_ = 0u;
  reg_time_ = 0u;
  src_uid_ = 0u;
  login_id_ = 0u;
  aux_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trans_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_msgheader_t::~db_msgheader_t() {
  SharedDtor();
}

void db_msgheader_t::SharedDtor() {
  if (msg_name_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_name_;
  }
  if (aux_ != &::google::protobuf::internal::kEmptyString) {
    delete aux_;
  }
  if (this != default_instance_) {
  }
}

void db_msgheader_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_msgheader_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_msgheader_t_descriptor_;
}

const db_msgheader_t& db_msgheader_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_msgheader_t* db_msgheader_t::default_instance_ = NULL;

db_msgheader_t* db_msgheader_t::New() const {
  return new db_msgheader_t;
}

void db_msgheader_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_name()) {
      if (msg_name_ != &::google::protobuf::internal::kEmptyString) {
        msg_name_->clear();
      }
    }
    target_uid_ = 0u;
    errcode_ = 0u;
    reg_time_ = 0u;
    src_uid_ = 0u;
    login_id_ = 0u;
    if (has_aux()) {
      if (aux_ != &::google::protobuf::internal::kEmptyString) {
        aux_->clear();
      }
    }
    trans_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_msgheader_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_name().data(), this->msg_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_uid;
        break;
      }
      
      // required uint32 target_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_uid_)));
          set_has_target_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_errcode;
        break;
      }
      
      // required uint32 errcode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reg_time;
        break;
      }
      
      // optional uint32 reg_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_src_uid;
        break;
      }
      
      // optional uint32 src_uid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_uid_)));
          set_has_src_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_login_id;
        break;
      }
      
      // optional uint32 login_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_id_)));
          set_has_login_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_aux;
        break;
      }
      
      // optional string aux = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aux:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aux()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->aux().data(), this->aux().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_trans_id;
        break;
      }
      
      // optional uint32 trans_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trans_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trans_id_)));
          set_has_trans_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_msgheader_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string msg_name = 1;
  if (has_msg_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_name().data(), this->msg_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg_name(), output);
  }
  
  // required uint32 target_uid = 2;
  if (has_target_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_uid(), output);
  }
  
  // required uint32 errcode = 3;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->errcode(), output);
  }
  
  // optional uint32 reg_time = 4;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reg_time(), output);
  }
  
  // optional uint32 src_uid = 5;
  if (has_src_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->src_uid(), output);
  }
  
  // optional uint32 login_id = 6;
  if (has_login_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->login_id(), output);
  }
  
  // optional string aux = 7;
  if (has_aux()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aux().data(), this->aux().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->aux(), output);
  }
  
  // optional uint32 trans_id = 8;
  if (has_trans_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->trans_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_msgheader_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string msg_name = 1;
  if (has_msg_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_name().data(), this->msg_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg_name(), target);
  }
  
  // required uint32 target_uid = 2;
  if (has_target_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_uid(), target);
  }
  
  // required uint32 errcode = 3;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->errcode(), target);
  }
  
  // optional uint32 reg_time = 4;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reg_time(), target);
  }
  
  // optional uint32 src_uid = 5;
  if (has_src_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->src_uid(), target);
  }
  
  // optional uint32 login_id = 6;
  if (has_login_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->login_id(), target);
  }
  
  // optional string aux = 7;
  if (has_aux()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aux().data(), this->aux().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->aux(), target);
  }
  
  // optional uint32 trans_id = 8;
  if (has_trans_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->trans_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_msgheader_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string msg_name = 1;
    if (has_msg_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_name());
    }
    
    // required uint32 target_uid = 2;
    if (has_target_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_uid());
    }
    
    // required uint32 errcode = 3;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 reg_time = 4;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // optional uint32 src_uid = 5;
    if (has_src_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_uid());
    }
    
    // optional uint32 login_id = 6;
    if (has_login_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_id());
    }
    
    // optional string aux = 7;
    if (has_aux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aux());
    }
    
    // optional uint32 trans_id = 8;
    if (has_trans_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trans_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_msgheader_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_msgheader_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_msgheader_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_msgheader_t::MergeFrom(const db_msgheader_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_name()) {
      set_msg_name(from.msg_name());
    }
    if (from.has_target_uid()) {
      set_target_uid(from.target_uid());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_src_uid()) {
      set_src_uid(from.src_uid());
    }
    if (from.has_login_id()) {
      set_login_id(from.login_id());
    }
    if (from.has_aux()) {
      set_aux(from.aux());
    }
    if (from.has_trans_id()) {
      set_trans_id(from.trans_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_msgheader_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_msgheader_t::CopyFrom(const db_msgheader_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_msgheader_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_msgheader_t::Swap(db_msgheader_t* other) {
  if (other != this) {
    std::swap(msg_name_, other->msg_name_);
    std::swap(target_uid_, other->target_uid_);
    std::swap(errcode_, other->errcode_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(src_uid_, other->src_uid_);
    std::swap(login_id_, other->login_id_);
    std::swap(aux_, other->aux_);
    std::swap(trans_id_, other->trans_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_msgheader_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_msgheader_t_descriptor_;
  metadata.reflection = db_msgheader_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_player_info_t::kUseridFieldNumber;
const int db_player_info_t::kRegTimeFieldNumber;
const int db_player_info_t::kLevelFieldNumber;
const int db_player_info_t::kNameFieldNumber;
const int db_player_info_t::kTypeFieldNumber;
const int db_player_info_t::kGenderFieldNumber;
const int db_player_info_t::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_player_info_t::db_player_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_player_info_t::InitAsDefaultInstance() {
}

db_player_info_t::db_player_info_t(const db_player_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_player_info_t::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  level_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  gender_ = 0u;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_player_info_t::~db_player_info_t() {
  SharedDtor();
}

void db_player_info_t::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_player_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_player_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_player_info_t_descriptor_;
}

const db_player_info_t& db_player_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_player_info_t* db_player_info_t::default_instance_ = NULL;

db_player_info_t* db_player_info_t::New() const {
  return new db_player_info_t;
}

void db_player_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    level_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0u;
    gender_ = 0u;
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_player_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gender;
        break;
      }
      
      // optional uint32 gender = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_zone_id;
        break;
      }
      
      // optional uint32 zone_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_player_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }
  
  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // optional uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }
  
  // optional uint32 gender = 6;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gender(), output);
  }
  
  // optional uint32 zone_id = 7;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_player_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }
  
  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // optional uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }
  
  // optional uint32 gender = 6;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gender(), target);
  }
  
  // optional uint32 zone_id = 7;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_player_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 gender = 6;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }
    
    // optional uint32 zone_id = 7;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_player_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_player_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_player_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_player_info_t::MergeFrom(const db_player_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_player_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_player_info_t::CopyFrom(const db_player_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_player_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_player_info_t::Swap(db_player_info_t* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(gender_, other->gender_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_player_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_player_info_t_descriptor_;
  metadata.reflection = db_player_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_crtrole_in::kZoneIdFieldNumber;
const int db_crtrole_in::kNameFieldNumber;
const int db_crtrole_in::kTypeFieldNumber;
const int db_crtrole_in::kGenderFieldNumber;
#endif  // !_MSC_VER

db_crtrole_in::db_crtrole_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_crtrole_in::InitAsDefaultInstance() {
}

db_crtrole_in::db_crtrole_in(const db_crtrole_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_crtrole_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  gender_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_crtrole_in::~db_crtrole_in() {
  SharedDtor();
}

void db_crtrole_in::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_crtrole_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_crtrole_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_crtrole_in_descriptor_;
}

const db_crtrole_in& db_crtrole_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_crtrole_in* db_crtrole_in::default_instance_ = NULL;

db_crtrole_in* db_crtrole_in::New() const {
  return new db_crtrole_in;
}

void db_crtrole_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0u;
    gender_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_crtrole_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }
      
      // required uint32 gender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_crtrole_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }
  
  // required uint32 gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gender(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_crtrole_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // required uint32 gender = 4;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gender(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_crtrole_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_crtrole_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_crtrole_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_crtrole_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_crtrole_in::MergeFrom(const db_crtrole_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_crtrole_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_crtrole_in::CopyFrom(const db_crtrole_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_crtrole_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_crtrole_in::Swap(db_crtrole_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(gender_, other->gender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_crtrole_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_crtrole_in_descriptor_;
  metadata.reflection = db_crtrole_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_crtrole_out::kRegtimeFieldNumber;
#endif  // !_MSC_VER

db_crtrole_out::db_crtrole_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_crtrole_out::InitAsDefaultInstance() {
}

db_crtrole_out::db_crtrole_out(const db_crtrole_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_crtrole_out::SharedCtor() {
  _cached_size_ = 0;
  regtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_crtrole_out::~db_crtrole_out() {
  SharedDtor();
}

void db_crtrole_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_crtrole_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_crtrole_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_crtrole_out_descriptor_;
}

const db_crtrole_out& db_crtrole_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_crtrole_out* db_crtrole_out::default_instance_ = NULL;

db_crtrole_out* db_crtrole_out::New() const {
  return new db_crtrole_out;
}

void db_crtrole_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    regtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_crtrole_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 regtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regtime_)));
          set_has_regtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_crtrole_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 regtime = 1;
  if (has_regtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->regtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_crtrole_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 regtime = 1;
  if (has_regtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->regtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_crtrole_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 regtime = 1;
    if (has_regtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_crtrole_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_crtrole_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_crtrole_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_crtrole_out::MergeFrom(const db_crtrole_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_regtime()) {
      set_regtime(from.regtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_crtrole_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_crtrole_out::CopyFrom(const db_crtrole_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_crtrole_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_crtrole_out::Swap(db_crtrole_out* other) {
  if (other != this) {
    std::swap(regtime_, other->regtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_crtrole_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_crtrole_out_descriptor_;
  metadata.reflection = db_crtrole_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_login_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_login_in::db_login_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_login_in::InitAsDefaultInstance() {
}

db_login_in::db_login_in(const db_login_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_login_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_login_in::~db_login_in() {
  SharedDtor();
}

void db_login_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_login_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_login_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_login_in_descriptor_;
}

const db_login_in& db_login_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_login_in* db_login_in::default_instance_ = NULL;

db_login_in* db_login_in::New() const {
  return new db_login_in;
}

void db_login_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_login_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_login_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_login_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_login_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_login_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_login_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_login_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_login_in::MergeFrom(const db_login_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_login_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_login_in::CopyFrom(const db_login_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_login_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_login_in::Swap(db_login_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_login_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_login_in_descriptor_;
  metadata.reflection = db_login_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_login_out::kNameFieldNumber;
const int db_login_out::kRegtimeFieldNumber;
const int db_login_out::kTypeFieldNumber;
const int db_login_out::kGenderFieldNumber;
const int db_login_out::kLvFieldNumber;
const int db_login_out::kExpFieldNumber;
const int db_login_out::kLastLoginTimeFieldNumber;
#endif  // !_MSC_VER

db_login_out::db_login_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_login_out::InitAsDefaultInstance() {
}

db_login_out::db_login_out(const db_login_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_login_out::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  regtime_ = 0u;
  type_ = 0u;
  gender_ = 0u;
  lv_ = 0u;
  exp_ = 0u;
  last_login_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_login_out::~db_login_out() {
  SharedDtor();
}

void db_login_out::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_login_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_login_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_login_out_descriptor_;
}

const db_login_out& db_login_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_login_out* db_login_out::default_instance_ = NULL;

db_login_out* db_login_out::New() const {
  return new db_login_out;
}

void db_login_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    regtime_ = 0u;
    type_ = 0u;
    gender_ = 0u;
    lv_ = 0u;
    exp_ = 0u;
    last_login_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_login_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_regtime;
        break;
      }
      
      // required uint32 regtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_regtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regtime_)));
          set_has_regtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }
      
      // required uint32 gender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lv;
        break;
      }
      
      // required uint32 lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }
      
      // required uint32 exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_last_login_time;
        break;
      }
      
      // required uint32 last_login_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_login_time_)));
          set_has_last_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_login_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required uint32 regtime = 2;
  if (has_regtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->regtime(), output);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }
  
  // required uint32 gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gender(), output);
  }
  
  // required uint32 lv = 5;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lv(), output);
  }
  
  // required uint32 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->exp(), output);
  }
  
  // required uint32 last_login_time = 7;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->last_login_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_login_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required uint32 regtime = 2;
  if (has_regtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->regtime(), target);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // required uint32 gender = 4;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gender(), target);
  }
  
  // required uint32 lv = 5;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lv(), target);
  }
  
  // required uint32 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->exp(), target);
  }
  
  // required uint32 last_login_time = 7;
  if (has_last_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->last_login_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_login_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required uint32 regtime = 2;
    if (has_regtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regtime());
    }
    
    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }
    
    // required uint32 lv = 5;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }
    
    // required uint32 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }
    
    // required uint32 last_login_time = 7;
    if (has_last_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_login_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_login_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_login_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_login_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_login_out::MergeFrom(const db_login_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_regtime()) {
      set_regtime(from.regtime());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_login_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_login_out::CopyFrom(const db_login_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_login_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void db_login_out::Swap(db_login_out* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(regtime_, other->regtime_);
    std::swap(type_, other->type_);
    std::swap(gender_, other->gender_);
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_login_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_login_out_descriptor_;
  metadata.reflection = db_login_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_del_role_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_del_role_in::db_del_role_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_del_role_in::InitAsDefaultInstance() {
}

db_del_role_in::db_del_role_in(const db_del_role_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_del_role_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_del_role_in::~db_del_role_in() {
  SharedDtor();
}

void db_del_role_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_del_role_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_del_role_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_del_role_in_descriptor_;
}

const db_del_role_in& db_del_role_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_del_role_in* db_del_role_in::default_instance_ = NULL;

db_del_role_in* db_del_role_in::New() const {
  return new db_del_role_in;
}

void db_del_role_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_del_role_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_del_role_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_del_role_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_del_role_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_del_role_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_del_role_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_del_role_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_del_role_in::MergeFrom(const db_del_role_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_del_role_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_del_role_in::CopyFrom(const db_del_role_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_del_role_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_del_role_in::Swap(db_del_role_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_del_role_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_del_role_in_descriptor_;
  metadata.reflection = db_del_role_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_levelup_in::kZoneIdFieldNumber;
const int db_levelup_in::kLevelFieldNumber;
#endif  // !_MSC_VER

db_levelup_in::db_levelup_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_levelup_in::InitAsDefaultInstance() {
}

db_levelup_in::db_levelup_in(const db_levelup_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_levelup_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_levelup_in::~db_levelup_in() {
  SharedDtor();
}

void db_levelup_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_levelup_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_levelup_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_levelup_in_descriptor_;
}

const db_levelup_in& db_levelup_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_levelup_in* db_levelup_in::default_instance_ = NULL;

db_levelup_in* db_levelup_in::New() const {
  return new db_levelup_in;
}

void db_levelup_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_levelup_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_levelup_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_levelup_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_levelup_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_levelup_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_levelup_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_levelup_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_levelup_in::MergeFrom(const db_levelup_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_levelup_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_levelup_in::CopyFrom(const db_levelup_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_levelup_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_levelup_in::Swap(db_levelup_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_levelup_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_levelup_in_descriptor_;
  metadata.reflection = db_levelup_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_backpack_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_backpack_query_in::db_backpack_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_backpack_query_in::InitAsDefaultInstance() {
}

db_backpack_query_in::db_backpack_query_in(const db_backpack_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_backpack_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_backpack_query_in::~db_backpack_query_in() {
  SharedDtor();
}

void db_backpack_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_backpack_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_backpack_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_backpack_query_in_descriptor_;
}

const db_backpack_query_in& db_backpack_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_backpack_query_in* db_backpack_query_in::default_instance_ = NULL;

db_backpack_query_in* db_backpack_query_in::New() const {
  return new db_backpack_query_in;
}

void db_backpack_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_backpack_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_backpack_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_backpack_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_backpack_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_backpack_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_backpack_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_backpack_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_backpack_query_in::MergeFrom(const db_backpack_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_backpack_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_backpack_query_in::CopyFrom(const db_backpack_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_backpack_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_backpack_query_in::Swap(db_backpack_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_backpack_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_backpack_query_in_descriptor_;
  metadata.reflection = db_backpack_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_equip_hole::kHoleIndexFieldNumber;
const int db_equip_hole::kItemGemIdFieldNumber;
const int db_equip_hole::kAttrKeyFieldNumber;
const int db_equip_hole::kAttrValueFieldNumber;
#endif  // !_MSC_VER

db_equip_hole::db_equip_hole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_equip_hole::InitAsDefaultInstance() {
}

db_equip_hole::db_equip_hole(const db_equip_hole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_equip_hole::SharedCtor() {
  _cached_size_ = 0;
  hole_index_ = 0u;
  item_gem_id_ = 0u;
  attr_key_ = 0u;
  attr_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_equip_hole::~db_equip_hole() {
  SharedDtor();
}

void db_equip_hole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_equip_hole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_equip_hole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_equip_hole_descriptor_;
}

const db_equip_hole& db_equip_hole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_equip_hole* db_equip_hole::default_instance_ = NULL;

db_equip_hole* db_equip_hole::New() const {
  return new db_equip_hole;
}

void db_equip_hole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hole_index_ = 0u;
    item_gem_id_ = 0u;
    attr_key_ = 0u;
    attr_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_equip_hole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hole_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hole_index_)));
          set_has_hole_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_gem_id;
        break;
      }
      
      // required uint32 item_gem_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_gem_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_gem_id_)));
          set_has_item_gem_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attr_key;
        break;
      }
      
      // required uint32 attr_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_key_)));
          set_has_attr_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attr_value;
        break;
      }
      
      // required uint32 attr_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_value_)));
          set_has_attr_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_equip_hole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hole_index = 1;
  if (has_hole_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hole_index(), output);
  }
  
  // required uint32 item_gem_id = 2;
  if (has_item_gem_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_gem_id(), output);
  }
  
  // required uint32 attr_key = 3;
  if (has_attr_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attr_key(), output);
  }
  
  // required uint32 attr_value = 4;
  if (has_attr_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attr_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_equip_hole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hole_index = 1;
  if (has_hole_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hole_index(), target);
  }
  
  // required uint32 item_gem_id = 2;
  if (has_item_gem_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_gem_id(), target);
  }
  
  // required uint32 attr_key = 3;
  if (has_attr_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attr_key(), target);
  }
  
  // required uint32 attr_value = 4;
  if (has_attr_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attr_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_equip_hole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hole_index = 1;
    if (has_hole_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hole_index());
    }
    
    // required uint32 item_gem_id = 2;
    if (has_item_gem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_gem_id());
    }
    
    // required uint32 attr_key = 3;
    if (has_attr_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_key());
    }
    
    // required uint32 attr_value = 4;
    if (has_attr_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_equip_hole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_equip_hole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_equip_hole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_equip_hole::MergeFrom(const db_equip_hole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hole_index()) {
      set_hole_index(from.hole_index());
    }
    if (from.has_item_gem_id()) {
      set_item_gem_id(from.item_gem_id());
    }
    if (from.has_attr_key()) {
      set_attr_key(from.attr_key());
    }
    if (from.has_attr_value()) {
      set_attr_value(from.attr_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_equip_hole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_equip_hole::CopyFrom(const db_equip_hole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_equip_hole::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_equip_hole::Swap(db_equip_hole* other) {
  if (other != this) {
    std::swap(hole_index_, other->hole_index_);
    std::swap(item_gem_id_, other->item_gem_id_);
    std::swap(attr_key_, other->attr_key_);
    std::swap(attr_value_, other->attr_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_equip_hole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_equip_hole_descriptor_;
  metadata.reflection = db_equip_hole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_packpos::kPosFieldNumber;
const int db_packpos::kItemIdFieldNumber;
const int db_packpos::kItemLevelFieldNumber;
const int db_packpos::kItemNumFieldNumber;
const int db_packpos::kHole1FieldNumber;
const int db_packpos::kHole2FieldNumber;
const int db_packpos::kHole3FieldNumber;
const int db_packpos::kHole4FieldNumber;
const int db_packpos::kEquipHolesFieldNumber;
#endif  // !_MSC_VER

db_packpos::db_packpos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_packpos::InitAsDefaultInstance() {
}

db_packpos::db_packpos(const db_packpos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_packpos::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  item_id_ = 0u;
  item_level_ = 0u;
  item_num_ = 0u;
  hole1_ = 0u;
  hole2_ = 0u;
  hole3_ = 0u;
  hole4_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_packpos::~db_packpos() {
  SharedDtor();
}

void db_packpos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_packpos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_packpos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_packpos_descriptor_;
}

const db_packpos& db_packpos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_packpos* db_packpos::default_instance_ = NULL;

db_packpos* db_packpos::New() const {
  return new db_packpos;
}

void db_packpos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    item_id_ = 0u;
    item_level_ = 0u;
    item_num_ = 0u;
    hole1_ = 0u;
    hole2_ = 0u;
    hole3_ = 0u;
    hole4_ = 0u;
  }
  equip_holes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_packpos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }
      
      // required uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_level;
        break;
      }
      
      // required uint32 item_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_level_)));
          set_has_item_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_num;
        break;
      }
      
      // required uint32 item_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_equip_holes;
        break;
      }
      
      // repeated .rudb.db_equip_hole equip_holes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_holes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_holes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_equip_holes;
        if (input->ExpectTag(48)) goto parse_hole2;
        break;
      }
      
      // optional uint32 hole2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hole2_)));
          set_has_hole2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hole3;
        break;
      }
      
      // optional uint32 hole3 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hole3_)));
          set_has_hole3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hole4;
        break;
      }
      
      // optional uint32 hole4 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hole4_)));
          set_has_hole4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hole1;
        break;
      }
      
      // optional uint32 hole1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hole1_)));
          set_has_hole1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_packpos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }
  
  // required uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }
  
  // required uint32 item_level = 3;
  if (has_item_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_level(), output);
  }
  
  // required uint32 item_num = 4;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->item_num(), output);
  }
  
  // repeated .rudb.db_equip_hole equip_holes = 5;
  for (int i = 0; i < this->equip_holes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->equip_holes(i), output);
  }
  
  // optional uint32 hole2 = 6;
  if (has_hole2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hole2(), output);
  }
  
  // optional uint32 hole3 = 7;
  if (has_hole3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hole3(), output);
  }
  
  // optional uint32 hole4 = 8;
  if (has_hole4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->hole4(), output);
  }
  
  // optional uint32 hole1 = 9;
  if (has_hole1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->hole1(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_packpos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }
  
  // required uint32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_id(), target);
  }
  
  // required uint32 item_level = 3;
  if (has_item_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_level(), target);
  }
  
  // required uint32 item_num = 4;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->item_num(), target);
  }
  
  // repeated .rudb.db_equip_hole equip_holes = 5;
  for (int i = 0; i < this->equip_holes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->equip_holes(i), target);
  }
  
  // optional uint32 hole2 = 6;
  if (has_hole2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hole2(), target);
  }
  
  // optional uint32 hole3 = 7;
  if (has_hole3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->hole3(), target);
  }
  
  // optional uint32 hole4 = 8;
  if (has_hole4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->hole4(), target);
  }
  
  // optional uint32 hole1 = 9;
  if (has_hole1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->hole1(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_packpos::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }
    
    // required uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }
    
    // required uint32 item_level = 3;
    if (has_item_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_level());
    }
    
    // required uint32 item_num = 4;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_num());
    }
    
    // optional uint32 hole1 = 9;
    if (has_hole1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hole1());
    }
    
    // optional uint32 hole2 = 6;
    if (has_hole2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hole2());
    }
    
    // optional uint32 hole3 = 7;
    if (has_hole3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hole3());
    }
    
    // optional uint32 hole4 = 8;
    if (has_hole4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hole4());
    }
    
  }
  // repeated .rudb.db_equip_hole equip_holes = 5;
  total_size += 1 * this->equip_holes_size();
  for (int i = 0; i < this->equip_holes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_holes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_packpos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_packpos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_packpos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_packpos::MergeFrom(const db_packpos& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_holes_.MergeFrom(from.equip_holes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_level()) {
      set_item_level(from.item_level());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_hole1()) {
      set_hole1(from.hole1());
    }
    if (from.has_hole2()) {
      set_hole2(from.hole2());
    }
    if (from.has_hole3()) {
      set_hole3(from.hole3());
    }
    if (from.has_hole4()) {
      set_hole4(from.hole4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_packpos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_packpos::CopyFrom(const db_packpos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_packpos::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < equip_holes_size(); i++) {
    if (!this->equip_holes(i).IsInitialized()) return false;
  }
  return true;
}

void db_packpos::Swap(db_packpos* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_level_, other->item_level_);
    std::swap(item_num_, other->item_num_);
    std::swap(hole1_, other->hole1_);
    std::swap(hole2_, other->hole2_);
    std::swap(hole3_, other->hole3_);
    std::swap(hole4_, other->hole4_);
    equip_holes_.Swap(&other->equip_holes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_packpos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_packpos_descriptor_;
  metadata.reflection = db_packpos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_backpack_query_out::kItemsFieldNumber;
#endif  // !_MSC_VER

db_backpack_query_out::db_backpack_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_backpack_query_out::InitAsDefaultInstance() {
}

db_backpack_query_out::db_backpack_query_out(const db_backpack_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_backpack_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_backpack_query_out::~db_backpack_query_out() {
  SharedDtor();
}

void db_backpack_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_backpack_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_backpack_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_backpack_query_out_descriptor_;
}

const db_backpack_query_out& db_backpack_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_backpack_query_out* db_backpack_query_out::default_instance_ = NULL;

db_backpack_query_out* db_backpack_query_out::New() const {
  return new db_backpack_query_out;
}

void db_backpack_query_out::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_backpack_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_packpos items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_backpack_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_packpos items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_backpack_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_packpos items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_backpack_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_packpos items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_backpack_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_backpack_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_backpack_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_backpack_query_out::MergeFrom(const db_backpack_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_backpack_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_backpack_query_out::CopyFrom(const db_backpack_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_backpack_query_out::IsInitialized() const {
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_backpack_query_out::Swap(db_backpack_query_out* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_backpack_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_backpack_query_out_descriptor_;
  metadata.reflection = db_backpack_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_backpack_add_in::kZoneIdFieldNumber;
const int db_backpack_add_in::kItemsFieldNumber;
#endif  // !_MSC_VER

db_backpack_add_in::db_backpack_add_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_backpack_add_in::InitAsDefaultInstance() {
}

db_backpack_add_in::db_backpack_add_in(const db_backpack_add_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_backpack_add_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_backpack_add_in::~db_backpack_add_in() {
  SharedDtor();
}

void db_backpack_add_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_backpack_add_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_backpack_add_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_backpack_add_in_descriptor_;
}

const db_backpack_add_in& db_backpack_add_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_backpack_add_in* db_backpack_add_in::default_instance_ = NULL;

db_backpack_add_in* db_backpack_add_in::New() const {
  return new db_backpack_add_in;
}

void db_backpack_add_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_backpack_add_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .rudb.db_packpos items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_backpack_add_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_packpos items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_backpack_add_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_packpos items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_backpack_add_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_packpos items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_backpack_add_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_backpack_add_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_backpack_add_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_backpack_add_in::MergeFrom(const db_backpack_add_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_backpack_add_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_backpack_add_in::CopyFrom(const db_backpack_add_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_backpack_add_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_backpack_add_in::Swap(db_backpack_add_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_backpack_add_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_backpack_add_in_descriptor_;
  metadata.reflection = db_backpack_add_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_backpack_update_in::kZoneIdFieldNumber;
const int db_backpack_update_in::kItemsFieldNumber;
#endif  // !_MSC_VER

db_backpack_update_in::db_backpack_update_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_backpack_update_in::InitAsDefaultInstance() {
}

db_backpack_update_in::db_backpack_update_in(const db_backpack_update_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_backpack_update_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_backpack_update_in::~db_backpack_update_in() {
  SharedDtor();
}

void db_backpack_update_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_backpack_update_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_backpack_update_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_backpack_update_in_descriptor_;
}

const db_backpack_update_in& db_backpack_update_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_backpack_update_in* db_backpack_update_in::default_instance_ = NULL;

db_backpack_update_in* db_backpack_update_in::New() const {
  return new db_backpack_update_in;
}

void db_backpack_update_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_backpack_update_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .rudb.db_packpos items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_backpack_update_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_packpos items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_backpack_update_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_packpos items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_backpack_update_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_packpos items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_backpack_update_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_backpack_update_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_backpack_update_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_backpack_update_in::MergeFrom(const db_backpack_update_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_backpack_update_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_backpack_update_in::CopyFrom(const db_backpack_update_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_backpack_update_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_backpack_update_in::Swap(db_backpack_update_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_backpack_update_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_backpack_update_in_descriptor_;
  metadata.reflection = db_backpack_update_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_backpack_del_in::kZoneIdFieldNumber;
const int db_backpack_del_in::kItemsFieldNumber;
#endif  // !_MSC_VER

db_backpack_del_in::db_backpack_del_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_backpack_del_in::InitAsDefaultInstance() {
}

db_backpack_del_in::db_backpack_del_in(const db_backpack_del_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_backpack_del_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_backpack_del_in::~db_backpack_del_in() {
  SharedDtor();
}

void db_backpack_del_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_backpack_del_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_backpack_del_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_backpack_del_in_descriptor_;
}

const db_backpack_del_in& db_backpack_del_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_backpack_del_in* db_backpack_del_in::default_instance_ = NULL;

db_backpack_del_in* db_backpack_del_in::New() const {
  return new db_backpack_del_in;
}

void db_backpack_del_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_backpack_del_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .rudb.db_packpos items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_backpack_del_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_packpos items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_backpack_del_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_packpos items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_backpack_del_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_packpos items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_backpack_del_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_backpack_del_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_backpack_del_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_backpack_del_in::MergeFrom(const db_backpack_del_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_backpack_del_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_backpack_del_in::CopyFrom(const db_backpack_del_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_backpack_del_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_backpack_del_in::Swap(db_backpack_del_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_backpack_del_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_backpack_del_in_descriptor_;
  metadata.reflection = db_backpack_del_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_backpack_move_in::kZoneIdFieldNumber;
const int db_backpack_move_in::kPosFromFieldNumber;
const int db_backpack_move_in::kPosToFieldNumber;
#endif  // !_MSC_VER

db_backpack_move_in::db_backpack_move_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_backpack_move_in::InitAsDefaultInstance() {
}

db_backpack_move_in::db_backpack_move_in(const db_backpack_move_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_backpack_move_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  pos_from_ = 0u;
  pos_to_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_backpack_move_in::~db_backpack_move_in() {
  SharedDtor();
}

void db_backpack_move_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_backpack_move_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_backpack_move_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_backpack_move_in_descriptor_;
}

const db_backpack_move_in& db_backpack_move_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_backpack_move_in* db_backpack_move_in::default_instance_ = NULL;

db_backpack_move_in* db_backpack_move_in::New() const {
  return new db_backpack_move_in;
}

void db_backpack_move_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    pos_from_ = 0u;
    pos_to_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_backpack_move_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos_from;
        break;
      }
      
      // required uint32 pos_from = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_from_)));
          set_has_pos_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos_to;
        break;
      }
      
      // required uint32 pos_to = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_to_)));
          set_has_pos_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_backpack_move_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 pos_from = 2;
  if (has_pos_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos_from(), output);
  }
  
  // required uint32 pos_to = 3;
  if (has_pos_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos_to(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_backpack_move_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 pos_from = 2;
  if (has_pos_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos_from(), target);
  }
  
  // required uint32 pos_to = 3;
  if (has_pos_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos_to(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_backpack_move_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 pos_from = 2;
    if (has_pos_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos_from());
    }
    
    // required uint32 pos_to = 3;
    if (has_pos_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos_to());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_backpack_move_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_backpack_move_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_backpack_move_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_backpack_move_in::MergeFrom(const db_backpack_move_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_pos_from()) {
      set_pos_from(from.pos_from());
    }
    if (from.has_pos_to()) {
      set_pos_to(from.pos_to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_backpack_move_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_backpack_move_in::CopyFrom(const db_backpack_move_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_backpack_move_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_backpack_move_in::Swap(db_backpack_move_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(pos_from_, other->pos_from_);
    std::swap(pos_to_, other->pos_to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_backpack_move_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_backpack_move_in_descriptor_;
  metadata.reflection = db_backpack_move_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_instance_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_instance_query_in::db_instance_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_instance_query_in::InitAsDefaultInstance() {
}

db_instance_query_in::db_instance_query_in(const db_instance_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_instance_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_instance_query_in::~db_instance_query_in() {
  SharedDtor();
}

void db_instance_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_instance_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_instance_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_instance_query_in_descriptor_;
}

const db_instance_query_in& db_instance_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_instance_query_in* db_instance_query_in::default_instance_ = NULL;

db_instance_query_in* db_instance_query_in::New() const {
  return new db_instance_query_in;
}

void db_instance_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_instance_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_instance_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_instance_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_instance_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_instance_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_instance_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_instance_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_instance_query_in::MergeFrom(const db_instance_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_instance_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_instance_query_in::CopyFrom(const db_instance_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_instance_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_instance_query_in::Swap(db_instance_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_instance_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_instance_query_in_descriptor_;
  metadata.reflection = db_instance_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_instance_info::kInstanceIdFieldNumber;
const int db_instance_info::kStarFieldNumber;
#endif  // !_MSC_VER

db_instance_info::db_instance_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_instance_info::InitAsDefaultInstance() {
}

db_instance_info::db_instance_info(const db_instance_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_instance_info::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0u;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_instance_info::~db_instance_info() {
  SharedDtor();
}

void db_instance_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_instance_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_instance_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_instance_info_descriptor_;
}

const db_instance_info& db_instance_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_instance_info* db_instance_info::default_instance_ = NULL;

db_instance_info* db_instance_info::New() const {
  return new db_instance_info;
}

void db_instance_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0u;
    star_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_instance_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }
      
      // required uint32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_instance_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->instance_id(), output);
  }
  
  // required uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_instance_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->instance_id(), target);
  }
  
  // required uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_instance_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }
    
    // required uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_instance_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_instance_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_instance_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_instance_info::MergeFrom(const db_instance_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_instance_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_instance_info::CopyFrom(const db_instance_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_instance_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_instance_info::Swap(db_instance_info* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_instance_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_instance_info_descriptor_;
  metadata.reflection = db_instance_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_instance_query_out::kInstancesFieldNumber;
#endif  // !_MSC_VER

db_instance_query_out::db_instance_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_instance_query_out::InitAsDefaultInstance() {
}

db_instance_query_out::db_instance_query_out(const db_instance_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_instance_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_instance_query_out::~db_instance_query_out() {
  SharedDtor();
}

void db_instance_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_instance_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_instance_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_instance_query_out_descriptor_;
}

const db_instance_query_out& db_instance_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_instance_query_out* db_instance_query_out::default_instance_ = NULL;

db_instance_query_out* db_instance_query_out::New() const {
  return new db_instance_query_out;
}

void db_instance_query_out::Clear() {
  instances_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_instance_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_instance_info instances = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_instances;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_instance_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_instance_info instances = 1;
  for (int i = 0; i < this->instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->instances(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_instance_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_instance_info instances = 1;
  for (int i = 0; i < this->instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->instances(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_instance_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_instance_info instances = 1;
  total_size += 1 * this->instances_size();
  for (int i = 0; i < this->instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instances(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_instance_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_instance_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_instance_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_instance_query_out::MergeFrom(const db_instance_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  instances_.MergeFrom(from.instances_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_instance_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_instance_query_out::CopyFrom(const db_instance_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_instance_query_out::IsInitialized() const {
  
  for (int i = 0; i < instances_size(); i++) {
    if (!this->instances(i).IsInitialized()) return false;
  }
  return true;
}

void db_instance_query_out::Swap(db_instance_query_out* other) {
  if (other != this) {
    instances_.Swap(&other->instances_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_instance_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_instance_query_out_descriptor_;
  metadata.reflection = db_instance_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_instance_modify_in::kZoneIdFieldNumber;
const int db_instance_modify_in::kInstanceIdFieldNumber;
const int db_instance_modify_in::kStarFieldNumber;
#endif  // !_MSC_VER

db_instance_modify_in::db_instance_modify_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_instance_modify_in::InitAsDefaultInstance() {
}

db_instance_modify_in::db_instance_modify_in(const db_instance_modify_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_instance_modify_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  instance_id_ = 0u;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_instance_modify_in::~db_instance_modify_in() {
  SharedDtor();
}

void db_instance_modify_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_instance_modify_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_instance_modify_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_instance_modify_in_descriptor_;
}

const db_instance_modify_in& db_instance_modify_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_instance_modify_in* db_instance_modify_in::default_instance_ = NULL;

db_instance_modify_in* db_instance_modify_in::New() const {
  return new db_instance_modify_in;
}

void db_instance_modify_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    instance_id_ = 0u;
    star_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_instance_modify_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instance_id;
        break;
      }
      
      // required uint32 instance_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }
      
      // required uint32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_instance_modify_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 instance_id = 2;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->instance_id(), output);
  }
  
  // required uint32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_instance_modify_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 instance_id = 2;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->instance_id(), target);
  }
  
  // required uint32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->star(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_instance_modify_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 instance_id = 2;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }
    
    // required uint32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_instance_modify_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_instance_modify_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_instance_modify_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_instance_modify_in::MergeFrom(const db_instance_modify_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_instance_modify_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_instance_modify_in::CopyFrom(const db_instance_modify_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_instance_modify_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_instance_modify_in::Swap(db_instance_modify_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(instance_id_, other->instance_id_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_instance_modify_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_instance_modify_in_descriptor_;
  metadata.reflection = db_instance_modify_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_task_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_task_query_in::db_task_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_task_query_in::InitAsDefaultInstance() {
}

db_task_query_in::db_task_query_in(const db_task_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_task_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_task_query_in::~db_task_query_in() {
  SharedDtor();
}

void db_task_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_task_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_task_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_task_query_in_descriptor_;
}

const db_task_query_in& db_task_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_task_query_in* db_task_query_in::default_instance_ = NULL;

db_task_query_in* db_task_query_in::New() const {
  return new db_task_query_in;
}

void db_task_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_task_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_task_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_task_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_task_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_task_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_task_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_task_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_task_query_in::MergeFrom(const db_task_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_task_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_task_query_in::CopyFrom(const db_task_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_task_query_in::Swap(db_task_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_task_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_task_query_in_descriptor_;
  metadata.reflection = db_task_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_task_info::kTaskIdFieldNumber;
const int db_task_info::kStepIdFieldNumber;
const int db_task_info::kStepRateFieldNumber;
#endif  // !_MSC_VER

db_task_info::db_task_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_task_info::InitAsDefaultInstance() {
}

db_task_info::db_task_info(const db_task_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_task_info::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  step_id_ = 0u;
  step_rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_task_info::~db_task_info() {
  SharedDtor();
}

void db_task_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_task_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_task_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_task_info_descriptor_;
}

const db_task_info& db_task_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_task_info* db_task_info::default_instance_ = NULL;

db_task_info* db_task_info::New() const {
  return new db_task_info;
}

void db_task_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    step_id_ = 0u;
    step_rate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_task_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_step_id;
        break;
      }
      
      // required uint32 step_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_id_)));
          set_has_step_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_step_rate;
        break;
      }
      
      // required uint32 step_rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_rate_)));
          set_has_step_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_task_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  // required uint32 step_id = 2;
  if (has_step_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->step_id(), output);
  }
  
  // required uint32 step_rate = 3;
  if (has_step_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->step_rate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_task_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // required uint32 step_id = 2;
  if (has_step_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->step_id(), target);
  }
  
  // required uint32 step_rate = 3;
  if (has_step_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->step_rate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_task_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
    // required uint32 step_id = 2;
    if (has_step_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_id());
    }
    
    // required uint32 step_rate = 3;
    if (has_step_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_rate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_task_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_task_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_task_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_task_info::MergeFrom(const db_task_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_step_id()) {
      set_step_id(from.step_id());
    }
    if (from.has_step_rate()) {
      set_step_rate(from.step_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_task_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_task_info::CopyFrom(const db_task_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_task_info::Swap(db_task_info* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(step_id_, other->step_id_);
    std::swap(step_rate_, other->step_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_task_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_task_info_descriptor_;
  metadata.reflection = db_task_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_task_query_out::kTasksFieldNumber;
#endif  // !_MSC_VER

db_task_query_out::db_task_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_task_query_out::InitAsDefaultInstance() {
}

db_task_query_out::db_task_query_out(const db_task_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_task_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_task_query_out::~db_task_query_out() {
  SharedDtor();
}

void db_task_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_task_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_task_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_task_query_out_descriptor_;
}

const db_task_query_out& db_task_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_task_query_out* db_task_query_out::default_instance_ = NULL;

db_task_query_out* db_task_query_out::New() const {
  return new db_task_query_out;
}

void db_task_query_out::Clear() {
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_task_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_task_info tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_task_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_task_info tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_task_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_task_info tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_task_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_task_info tasks = 1;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_task_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_task_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_task_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_task_query_out::MergeFrom(const db_task_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_task_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_task_query_out::CopyFrom(const db_task_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task_query_out::IsInitialized() const {
  
  for (int i = 0; i < tasks_size(); i++) {
    if (!this->tasks(i).IsInitialized()) return false;
  }
  return true;
}

void db_task_query_out::Swap(db_task_query_out* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_task_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_task_query_out_descriptor_;
  metadata.reflection = db_task_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_task_step_in::kZoneIdFieldNumber;
const int db_task_step_in::kTaskIdFieldNumber;
const int db_task_step_in::kStepIdFieldNumber;
const int db_task_step_in::kStepRateFieldNumber;
#endif  // !_MSC_VER

db_task_step_in::db_task_step_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_task_step_in::InitAsDefaultInstance() {
}

db_task_step_in::db_task_step_in(const db_task_step_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_task_step_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  task_id_ = 0u;
  step_id_ = 0u;
  step_rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_task_step_in::~db_task_step_in() {
  SharedDtor();
}

void db_task_step_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_task_step_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_task_step_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_task_step_in_descriptor_;
}

const db_task_step_in& db_task_step_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_task_step_in* db_task_step_in::default_instance_ = NULL;

db_task_step_in* db_task_step_in::New() const {
  return new db_task_step_in;
}

void db_task_step_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    task_id_ = 0u;
    step_id_ = 0u;
    step_rate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_task_step_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_id;
        break;
      }
      
      // required uint32 task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_step_id;
        break;
      }
      
      // required uint32 step_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_id_)));
          set_has_step_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_step_rate;
        break;
      }
      
      // required uint32 step_rate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_rate_)));
          set_has_step_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_task_step_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_id(), output);
  }
  
  // required uint32 step_id = 3;
  if (has_step_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->step_id(), output);
  }
  
  // required uint32 step_rate = 4;
  if (has_step_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->step_rate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_task_step_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_id(), target);
  }
  
  // required uint32 step_id = 3;
  if (has_step_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->step_id(), target);
  }
  
  // required uint32 step_rate = 4;
  if (has_step_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->step_rate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_task_step_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
    // required uint32 step_id = 3;
    if (has_step_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_id());
    }
    
    // required uint32 step_rate = 4;
    if (has_step_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_rate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_task_step_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_task_step_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_task_step_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_task_step_in::MergeFrom(const db_task_step_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_step_id()) {
      set_step_id(from.step_id());
    }
    if (from.has_step_rate()) {
      set_step_rate(from.step_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_task_step_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_task_step_in::CopyFrom(const db_task_step_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task_step_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_task_step_in::Swap(db_task_step_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(step_id_, other->step_id_);
    std::swap(step_rate_, other->step_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_task_step_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_task_step_in_descriptor_;
  metadata.reflection = db_task_step_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_attribute_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_attribute_query_in::db_attribute_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_attribute_query_in::InitAsDefaultInstance() {
}

db_attribute_query_in::db_attribute_query_in(const db_attribute_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_attribute_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_attribute_query_in::~db_attribute_query_in() {
  SharedDtor();
}

void db_attribute_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_attribute_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_attribute_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_attribute_query_in_descriptor_;
}

const db_attribute_query_in& db_attribute_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_attribute_query_in* db_attribute_query_in::default_instance_ = NULL;

db_attribute_query_in* db_attribute_query_in::New() const {
  return new db_attribute_query_in;
}

void db_attribute_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_attribute_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_attribute_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_attribute_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_attribute_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_attribute_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_attribute_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_attribute_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_attribute_query_in::MergeFrom(const db_attribute_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_attribute_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_attribute_query_in::CopyFrom(const db_attribute_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_attribute_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_attribute_query_in::Swap(db_attribute_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_attribute_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_attribute_query_in_descriptor_;
  metadata.reflection = db_attribute_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_attribute_info::kAttributeIdFieldNumber;
const int db_attribute_info::kAttributeValueFieldNumber;
const int db_attribute_info::kDeadTmFieldNumber;
#endif  // !_MSC_VER

db_attribute_info::db_attribute_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_attribute_info::InitAsDefaultInstance() {
}

db_attribute_info::db_attribute_info(const db_attribute_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_attribute_info::SharedCtor() {
  _cached_size_ = 0;
  attribute_id_ = 0u;
  attribute_value_ = 0u;
  dead_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_attribute_info::~db_attribute_info() {
  SharedDtor();
}

void db_attribute_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_attribute_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_attribute_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_attribute_info_descriptor_;
}

const db_attribute_info& db_attribute_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_attribute_info* db_attribute_info::default_instance_ = NULL;

db_attribute_info* db_attribute_info::New() const {
  return new db_attribute_info;
}

void db_attribute_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attribute_id_ = 0u;
    attribute_value_ = 0u;
    dead_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_attribute_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attribute_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_id_)));
          set_has_attribute_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attribute_value;
        break;
      }
      
      // required uint32 attribute_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_value_)));
          set_has_attribute_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dead_tm;
        break;
      }
      
      // required uint32 dead_tm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_tm_)));
          set_has_dead_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_attribute_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 attribute_id = 1;
  if (has_attribute_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attribute_id(), output);
  }
  
  // required uint32 attribute_value = 2;
  if (has_attribute_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attribute_value(), output);
  }
  
  // required uint32 dead_tm = 3;
  if (has_dead_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dead_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_attribute_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attribute_id = 1;
  if (has_attribute_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attribute_id(), target);
  }
  
  // required uint32 attribute_value = 2;
  if (has_attribute_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attribute_value(), target);
  }
  
  // required uint32 dead_tm = 3;
  if (has_dead_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dead_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_attribute_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attribute_id = 1;
    if (has_attribute_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_id());
    }
    
    // required uint32 attribute_value = 2;
    if (has_attribute_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_value());
    }
    
    // required uint32 dead_tm = 3;
    if (has_dead_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_attribute_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_attribute_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_attribute_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_attribute_info::MergeFrom(const db_attribute_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attribute_id()) {
      set_attribute_id(from.attribute_id());
    }
    if (from.has_attribute_value()) {
      set_attribute_value(from.attribute_value());
    }
    if (from.has_dead_tm()) {
      set_dead_tm(from.dead_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_attribute_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_attribute_info::CopyFrom(const db_attribute_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_attribute_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_attribute_info::Swap(db_attribute_info* other) {
  if (other != this) {
    std::swap(attribute_id_, other->attribute_id_);
    std::swap(attribute_value_, other->attribute_value_);
    std::swap(dead_tm_, other->dead_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_attribute_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_attribute_info_descriptor_;
  metadata.reflection = db_attribute_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_attribute_query_out::kAttributesFieldNumber;
#endif  // !_MSC_VER

db_attribute_query_out::db_attribute_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_attribute_query_out::InitAsDefaultInstance() {
}

db_attribute_query_out::db_attribute_query_out(const db_attribute_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_attribute_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_attribute_query_out::~db_attribute_query_out() {
  SharedDtor();
}

void db_attribute_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_attribute_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_attribute_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_attribute_query_out_descriptor_;
}

const db_attribute_query_out& db_attribute_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_attribute_query_out* db_attribute_query_out::default_instance_ = NULL;

db_attribute_query_out* db_attribute_query_out::New() const {
  return new db_attribute_query_out;
}

void db_attribute_query_out::Clear() {
  attributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_attribute_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_attribute_info attributes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attributes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_attribute_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_attribute_info attributes = 1;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attributes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_attribute_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_attribute_info attributes = 1;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attributes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_attribute_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_attribute_info attributes = 1;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attributes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_attribute_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_attribute_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_attribute_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_attribute_query_out::MergeFrom(const db_attribute_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributes_.MergeFrom(from.attributes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_attribute_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_attribute_query_out::CopyFrom(const db_attribute_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_attribute_query_out::IsInitialized() const {
  
  for (int i = 0; i < attributes_size(); i++) {
    if (!this->attributes(i).IsInitialized()) return false;
  }
  return true;
}

void db_attribute_query_out::Swap(db_attribute_query_out* other) {
  if (other != this) {
    attributes_.Swap(&other->attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_attribute_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_attribute_query_out_descriptor_;
  metadata.reflection = db_attribute_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_attribute_set_in::kZoneIdFieldNumber;
const int db_attribute_set_in::kAttributeIdFieldNumber;
const int db_attribute_set_in::kAttributeValueFieldNumber;
const int db_attribute_set_in::kDeadTmFieldNumber;
#endif  // !_MSC_VER

db_attribute_set_in::db_attribute_set_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_attribute_set_in::InitAsDefaultInstance() {
}

db_attribute_set_in::db_attribute_set_in(const db_attribute_set_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_attribute_set_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  attribute_id_ = 0u;
  attribute_value_ = 0u;
  dead_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_attribute_set_in::~db_attribute_set_in() {
  SharedDtor();
}

void db_attribute_set_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_attribute_set_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_attribute_set_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_attribute_set_in_descriptor_;
}

const db_attribute_set_in& db_attribute_set_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_attribute_set_in* db_attribute_set_in::default_instance_ = NULL;

db_attribute_set_in* db_attribute_set_in::New() const {
  return new db_attribute_set_in;
}

void db_attribute_set_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    attribute_id_ = 0u;
    attribute_value_ = 0u;
    dead_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_attribute_set_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attribute_id;
        break;
      }
      
      // required uint32 attribute_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_id_)));
          set_has_attribute_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attribute_value;
        break;
      }
      
      // required uint32 attribute_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_value_)));
          set_has_attribute_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dead_tm;
        break;
      }
      
      // required uint32 dead_tm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_tm_)));
          set_has_dead_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_attribute_set_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 attribute_id = 2;
  if (has_attribute_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attribute_id(), output);
  }
  
  // required uint32 attribute_value = 3;
  if (has_attribute_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attribute_value(), output);
  }
  
  // required uint32 dead_tm = 4;
  if (has_dead_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dead_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_attribute_set_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 attribute_id = 2;
  if (has_attribute_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attribute_id(), target);
  }
  
  // required uint32 attribute_value = 3;
  if (has_attribute_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attribute_value(), target);
  }
  
  // required uint32 dead_tm = 4;
  if (has_dead_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dead_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_attribute_set_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 attribute_id = 2;
    if (has_attribute_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_id());
    }
    
    // required uint32 attribute_value = 3;
    if (has_attribute_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_value());
    }
    
    // required uint32 dead_tm = 4;
    if (has_dead_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_attribute_set_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_attribute_set_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_attribute_set_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_attribute_set_in::MergeFrom(const db_attribute_set_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_attribute_id()) {
      set_attribute_id(from.attribute_id());
    }
    if (from.has_attribute_value()) {
      set_attribute_value(from.attribute_value());
    }
    if (from.has_dead_tm()) {
      set_dead_tm(from.dead_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_attribute_set_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_attribute_set_in::CopyFrom(const db_attribute_set_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_attribute_set_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_attribute_set_in::Swap(db_attribute_set_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(attribute_id_, other->attribute_id_);
    std::swap(attribute_value_, other->attribute_value_);
    std::swap(dead_tm_, other->dead_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_attribute_set_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_attribute_set_in_descriptor_;
  metadata.reflection = db_attribute_set_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_skill_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_skill_query_in::db_skill_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_skill_query_in::InitAsDefaultInstance() {
}

db_skill_query_in::db_skill_query_in(const db_skill_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_skill_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_skill_query_in::~db_skill_query_in() {
  SharedDtor();
}

void db_skill_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_skill_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_skill_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_skill_query_in_descriptor_;
}

const db_skill_query_in& db_skill_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_skill_query_in* db_skill_query_in::default_instance_ = NULL;

db_skill_query_in* db_skill_query_in::New() const {
  return new db_skill_query_in;
}

void db_skill_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_skill_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_skill_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_skill_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_skill_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_skill_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_skill_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_skill_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_skill_query_in::MergeFrom(const db_skill_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_skill_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_skill_query_in::CopyFrom(const db_skill_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_skill_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_skill_query_in::Swap(db_skill_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_skill_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_skill_query_in_descriptor_;
  metadata.reflection = db_skill_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_skill_query_out_skill_info::kSkillIdFieldNumber;
const int db_skill_query_out_skill_info::kSkillLevelFieldNumber;
#endif  // !_MSC_VER

db_skill_query_out_skill_info::db_skill_query_out_skill_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_skill_query_out_skill_info::InitAsDefaultInstance() {
}

db_skill_query_out_skill_info::db_skill_query_out_skill_info(const db_skill_query_out_skill_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_skill_query_out_skill_info::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0u;
  skill_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_skill_query_out_skill_info::~db_skill_query_out_skill_info() {
  SharedDtor();
}

void db_skill_query_out_skill_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_skill_query_out_skill_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_skill_query_out_skill_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_skill_query_out_skill_info_descriptor_;
}

const db_skill_query_out_skill_info& db_skill_query_out_skill_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_skill_query_out_skill_info* db_skill_query_out_skill_info::default_instance_ = NULL;

db_skill_query_out_skill_info* db_skill_query_out_skill_info::New() const {
  return new db_skill_query_out_skill_info;
}

void db_skill_query_out_skill_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0u;
    skill_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_skill_query_out_skill_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }
      
      // required uint32 skill_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_skill_query_out_skill_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }
  
  // required uint32 skill_level = 2;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_skill_query_out_skill_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_id(), target);
  }
  
  // required uint32 skill_level = 2;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_skill_query_out_skill_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }
    
    // required uint32 skill_level = 2;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_skill_query_out_skill_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_skill_query_out_skill_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_skill_query_out_skill_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_skill_query_out_skill_info::MergeFrom(const db_skill_query_out_skill_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_skill_query_out_skill_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_skill_query_out_skill_info::CopyFrom(const db_skill_query_out_skill_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_skill_query_out_skill_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_skill_query_out_skill_info::Swap(db_skill_query_out_skill_info* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_skill_query_out_skill_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_skill_query_out_skill_info_descriptor_;
  metadata.reflection = db_skill_query_out_skill_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int db_skill_query_out::kSkillsFieldNumber;
#endif  // !_MSC_VER

db_skill_query_out::db_skill_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_skill_query_out::InitAsDefaultInstance() {
}

db_skill_query_out::db_skill_query_out(const db_skill_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_skill_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_skill_query_out::~db_skill_query_out() {
  SharedDtor();
}

void db_skill_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_skill_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_skill_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_skill_query_out_descriptor_;
}

const db_skill_query_out& db_skill_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_skill_query_out* db_skill_query_out::default_instance_ = NULL;

db_skill_query_out* db_skill_query_out::New() const {
  return new db_skill_query_out;
}

void db_skill_query_out::Clear() {
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_skill_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_skill_query_out.skill_info skills = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skills;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_skill_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_skill_query_out.skill_info skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skills(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_skill_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_skill_query_out.skill_info skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skills(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_skill_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_skill_query_out.skill_info skills = 1;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_skill_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_skill_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_skill_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_skill_query_out::MergeFrom(const db_skill_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_skill_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_skill_query_out::CopyFrom(const db_skill_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_skill_query_out::IsInitialized() const {
  
  for (int i = 0; i < skills_size(); i++) {
    if (!this->skills(i).IsInitialized()) return false;
  }
  return true;
}

void db_skill_query_out::Swap(db_skill_query_out* other) {
  if (other != this) {
    skills_.Swap(&other->skills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_skill_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_skill_query_out_descriptor_;
  metadata.reflection = db_skill_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_skill_add_in::kZoneIdFieldNumber;
const int db_skill_add_in::kSkillIdFieldNumber;
const int db_skill_add_in::kSkillLevelFieldNumber;
#endif  // !_MSC_VER

db_skill_add_in::db_skill_add_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_skill_add_in::InitAsDefaultInstance() {
}

db_skill_add_in::db_skill_add_in(const db_skill_add_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_skill_add_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  skill_id_ = 0u;
  skill_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_skill_add_in::~db_skill_add_in() {
  SharedDtor();
}

void db_skill_add_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_skill_add_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_skill_add_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_skill_add_in_descriptor_;
}

const db_skill_add_in& db_skill_add_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_skill_add_in* db_skill_add_in::default_instance_ = NULL;

db_skill_add_in* db_skill_add_in::New() const {
  return new db_skill_add_in;
}

void db_skill_add_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    skill_id_ = 0u;
    skill_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_skill_add_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }
      
      // required uint32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_level;
        break;
      }
      
      // required uint32 skill_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_skill_add_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_id(), output);
  }
  
  // required uint32 skill_level = 3;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_skill_add_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_id(), target);
  }
  
  // required uint32 skill_level = 3;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_skill_add_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }
    
    // required uint32 skill_level = 3;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_skill_add_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_skill_add_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_skill_add_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_skill_add_in::MergeFrom(const db_skill_add_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_skill_add_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_skill_add_in::CopyFrom(const db_skill_add_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_skill_add_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_skill_add_in::Swap(db_skill_add_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_skill_add_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_skill_add_in_descriptor_;
  metadata.reflection = db_skill_add_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_info::kUseridFieldNumber;
const int db_ai_rank_info::kRegTimeFieldNumber;
const int db_ai_rank_info::kRankFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_info::db_ai_rank_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_info::InitAsDefaultInstance() {
}

db_ai_rank_info::db_ai_rank_info(const db_ai_rank_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_info::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_info::~db_ai_rank_info() {
  SharedDtor();
}

void db_ai_rank_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_ai_rank_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_info_descriptor_;
}

const db_ai_rank_info& db_ai_rank_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_info* db_ai_rank_info::default_instance_ = NULL;

db_ai_rank_info* db_ai_rank_info::New() const {
  return new db_ai_rank_info;
}

void db_ai_rank_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    rank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }
      
      // required uint32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_info::MergeFrom(const db_ai_rank_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_info::CopyFrom(const db_ai_rank_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_ai_rank_info::Swap(db_ai_rank_info* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_info_descriptor_;
  metadata.reflection = db_ai_rank_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_log_one_log::kNameFieldNumber;
const int db_ai_rank_log_one_log::kDirectFieldNumber;
const int db_ai_rank_log_one_log::kWinFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_log_one_log::db_ai_rank_log_one_log()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_log_one_log::InitAsDefaultInstance() {
}

db_ai_rank_log_one_log::db_ai_rank_log_one_log(const db_ai_rank_log_one_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_log_one_log::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  direct_ = false;
  win_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_log_one_log::~db_ai_rank_log_one_log() {
  SharedDtor();
}

void db_ai_rank_log_one_log::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_ai_rank_log_one_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_log_one_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_log_one_log_descriptor_;
}

const db_ai_rank_log_one_log& db_ai_rank_log_one_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_log_one_log* db_ai_rank_log_one_log::default_instance_ = NULL;

db_ai_rank_log_one_log* db_ai_rank_log_one_log::New() const {
  return new db_ai_rank_log_one_log;
}

void db_ai_rank_log_one_log::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    direct_ = false;
    win_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_log_one_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_direct;
        break;
      }
      
      // required bool direct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &direct_)));
          set_has_direct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win;
        break;
      }
      
      // required bool win = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_log_one_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required bool direct = 2;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->direct(), output);
  }
  
  // required bool win = 3;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->win(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_log_one_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required bool direct = 2;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->direct(), target);
  }
  
  // required bool win = 3;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->win(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_log_one_log::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required bool direct = 2;
    if (has_direct()) {
      total_size += 1 + 1;
    }
    
    // required bool win = 3;
    if (has_win()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_log_one_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_log_one_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_log_one_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_log_one_log::MergeFrom(const db_ai_rank_log_one_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_direct()) {
      set_direct(from.direct());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_log_one_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_log_one_log::CopyFrom(const db_ai_rank_log_one_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_log_one_log::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_ai_rank_log_one_log::Swap(db_ai_rank_log_one_log* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(direct_, other->direct_);
    std::swap(win_, other->win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_log_one_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_log_one_log_descriptor_;
  metadata.reflection = db_ai_rank_log_one_log_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int db_ai_rank_log::kLogsFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_log::db_ai_rank_log()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_log::InitAsDefaultInstance() {
}

db_ai_rank_log::db_ai_rank_log(const db_ai_rank_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_log::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_log::~db_ai_rank_log() {
  SharedDtor();
}

void db_ai_rank_log::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_ai_rank_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_log_descriptor_;
}

const db_ai_rank_log& db_ai_rank_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_log* db_ai_rank_log::default_instance_ = NULL;

db_ai_rank_log* db_ai_rank_log::New() const {
  return new db_ai_rank_log;
}

void db_ai_rank_log::Clear() {
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_ai_rank_log.one_log logs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_logs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_ai_rank_log.one_log logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_ai_rank_log.one_log logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->logs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_log::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_ai_rank_log.one_log logs = 1;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_log::MergeFrom(const db_ai_rank_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  logs_.MergeFrom(from.logs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_log::CopyFrom(const db_ai_rank_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_log::IsInitialized() const {
  
  for (int i = 0; i < logs_size(); i++) {
    if (!this->logs(i).IsInitialized()) return false;
  }
  return true;
}

void db_ai_rank_log::Swap(db_ai_rank_log* other) {
  if (other != this) {
    logs_.Swap(&other->logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_log_descriptor_;
  metadata.reflection = db_ai_rank_log_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_add_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_add_in::db_ai_rank_add_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_add_in::InitAsDefaultInstance() {
}

db_ai_rank_add_in::db_ai_rank_add_in(const db_ai_rank_add_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_add_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_add_in::~db_ai_rank_add_in() {
  SharedDtor();
}

void db_ai_rank_add_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_ai_rank_add_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_add_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_add_in_descriptor_;
}

const db_ai_rank_add_in& db_ai_rank_add_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_add_in* db_ai_rank_add_in::default_instance_ = NULL;

db_ai_rank_add_in* db_ai_rank_add_in::New() const {
  return new db_ai_rank_add_in;
}

void db_ai_rank_add_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_add_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_add_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_add_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_add_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_add_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_add_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_add_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_add_in::MergeFrom(const db_ai_rank_add_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_add_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_add_in::CopyFrom(const db_ai_rank_add_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_add_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_ai_rank_add_in::Swap(db_ai_rank_add_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_add_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_add_in_descriptor_;
  metadata.reflection = db_ai_rank_add_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_query_in::kZoneIdFieldNumber;
const int db_ai_rank_query_in::kLengthFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_query_in::db_ai_rank_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_query_in::InitAsDefaultInstance() {
}

db_ai_rank_query_in::db_ai_rank_query_in(const db_ai_rank_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_query_in::~db_ai_rank_query_in() {
  SharedDtor();
}

void db_ai_rank_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_ai_rank_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_query_in_descriptor_;
}

const db_ai_rank_query_in& db_ai_rank_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_query_in* db_ai_rank_query_in::default_instance_ = NULL;

db_ai_rank_query_in* db_ai_rank_query_in::New() const {
  return new db_ai_rank_query_in;
}

void db_ai_rank_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }
      
      // required uint32 length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_query_in::MergeFrom(const db_ai_rank_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_query_in::CopyFrom(const db_ai_rank_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_ai_rank_query_in::Swap(db_ai_rank_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_query_in_descriptor_;
  metadata.reflection = db_ai_rank_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_query_out::kRankFieldNumber;
const int db_ai_rank_query_out::kInfosFieldNumber;
const int db_ai_rank_query_out::kLogFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_query_out::db_ai_rank_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_query_out::InitAsDefaultInstance() {
  log_ = const_cast< ::rudb::db_ai_rank_log*>(&::rudb::db_ai_rank_log::default_instance());
}

db_ai_rank_query_out::db_ai_rank_query_out(const db_ai_rank_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_query_out::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  log_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_query_out::~db_ai_rank_query_out() {
  SharedDtor();
}

void db_ai_rank_query_out::SharedDtor() {
  if (this != default_instance_) {
    delete log_;
  }
}

void db_ai_rank_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_query_out_descriptor_;
}

const db_ai_rank_query_out& db_ai_rank_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_query_out* db_ai_rank_query_out::default_instance_ = NULL;

db_ai_rank_query_out* db_ai_rank_query_out::New() const {
  return new db_ai_rank_query_out;
}

void db_ai_rank_query_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    if (has_log()) {
      if (log_ != NULL) log_->::rudb::db_ai_rank_log::Clear();
    }
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }
      
      // repeated .rudb.db_ai_rank_info infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectTag(26)) goto parse_log;
        break;
      }
      
      // required .rudb.db_ai_rank_log log = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }
  
  // repeated .rudb.db_ai_rank_info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }
  
  // required .rudb.db_ai_rank_log log = 3;
  if (has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->log(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }
  
  // repeated .rudb.db_ai_rank_info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }
  
  // required .rudb.db_ai_rank_log log = 3;
  if (has_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->log(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_query_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }
    
    // required .rudb.db_ai_rank_log log = 3;
    if (has_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log());
    }
    
  }
  // repeated .rudb.db_ai_rank_info infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_query_out::MergeFrom(const db_ai_rank_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_log()) {
      mutable_log()->::rudb::db_ai_rank_log::MergeFrom(from.log());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_query_out::CopyFrom(const db_ai_rank_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_query_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  if (has_log()) {
    if (!this->log().IsInitialized()) return false;
  }
  return true;
}

void db_ai_rank_query_out::Swap(db_ai_rank_query_out* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    infos_.Swap(&other->infos_);
    std::swap(log_, other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_query_out_descriptor_;
  metadata.reflection = db_ai_rank_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_exchange_in::kZoneIdFieldNumber;
const int db_ai_rank_exchange_in::kUseridFieldNumber;
const int db_ai_rank_exchange_in::kTargetUseridFieldNumber;
const int db_ai_rank_exchange_in::kTargetRegTimeFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_exchange_in::db_ai_rank_exchange_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_exchange_in::InitAsDefaultInstance() {
}

db_ai_rank_exchange_in::db_ai_rank_exchange_in(const db_ai_rank_exchange_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_exchange_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  userid_ = 0u;
  target_userid_ = 0u;
  target_reg_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_exchange_in::~db_ai_rank_exchange_in() {
  SharedDtor();
}

void db_ai_rank_exchange_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_ai_rank_exchange_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_exchange_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_exchange_in_descriptor_;
}

const db_ai_rank_exchange_in& db_ai_rank_exchange_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_exchange_in* db_ai_rank_exchange_in::default_instance_ = NULL;

db_ai_rank_exchange_in* db_ai_rank_exchange_in::New() const {
  return new db_ai_rank_exchange_in;
}

void db_ai_rank_exchange_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    userid_ = 0u;
    target_userid_ = 0u;
    target_reg_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_exchange_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // required uint32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_userid;
        break;
      }
      
      // required uint32 target_userid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_userid_)));
          set_has_target_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_target_reg_time;
        break;
      }
      
      // required uint32 target_reg_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_reg_time_)));
          set_has_target_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_exchange_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userid(), output);
  }
  
  // required uint32 target_userid = 3;
  if (has_target_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_userid(), output);
  }
  
  // required uint32 target_reg_time = 4;
  if (has_target_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->target_reg_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_exchange_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userid(), target);
  }
  
  // required uint32 target_userid = 3;
  if (has_target_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_userid(), target);
  }
  
  // required uint32 target_reg_time = 4;
  if (has_target_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->target_reg_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_exchange_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 target_userid = 3;
    if (has_target_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_userid());
    }
    
    // required uint32 target_reg_time = 4;
    if (has_target_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_reg_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_exchange_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_exchange_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_exchange_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_exchange_in::MergeFrom(const db_ai_rank_exchange_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_target_userid()) {
      set_target_userid(from.target_userid());
    }
    if (from.has_target_reg_time()) {
      set_target_reg_time(from.target_reg_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_exchange_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_exchange_in::CopyFrom(const db_ai_rank_exchange_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_exchange_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_ai_rank_exchange_in::Swap(db_ai_rank_exchange_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(userid_, other->userid_);
    std::swap(target_userid_, other->target_userid_);
    std::swap(target_reg_time_, other->target_reg_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_exchange_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_exchange_in_descriptor_;
  metadata.reflection = db_ai_rank_exchange_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_exchange_out::kUserRankFieldNumber;
const int db_ai_rank_exchange_out::kTargetUserRankFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_exchange_out::db_ai_rank_exchange_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_exchange_out::InitAsDefaultInstance() {
}

db_ai_rank_exchange_out::db_ai_rank_exchange_out(const db_ai_rank_exchange_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_exchange_out::SharedCtor() {
  _cached_size_ = 0;
  user_rank_ = 0u;
  target_user_rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_exchange_out::~db_ai_rank_exchange_out() {
  SharedDtor();
}

void db_ai_rank_exchange_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_ai_rank_exchange_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_exchange_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_exchange_out_descriptor_;
}

const db_ai_rank_exchange_out& db_ai_rank_exchange_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_exchange_out* db_ai_rank_exchange_out::default_instance_ = NULL;

db_ai_rank_exchange_out* db_ai_rank_exchange_out::New() const {
  return new db_ai_rank_exchange_out;
}

void db_ai_rank_exchange_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_rank_ = 0u;
    target_user_rank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_exchange_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_rank_)));
          set_has_user_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_user_rank;
        break;
      }
      
      // required uint32 target_user_rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_user_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_user_rank_)));
          set_has_target_user_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_exchange_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_rank = 1;
  if (has_user_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_rank(), output);
  }
  
  // required uint32 target_user_rank = 2;
  if (has_target_user_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_user_rank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_exchange_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_rank = 1;
  if (has_user_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_rank(), target);
  }
  
  // required uint32 target_user_rank = 2;
  if (has_target_user_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_user_rank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_exchange_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_rank = 1;
    if (has_user_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_rank());
    }
    
    // required uint32 target_user_rank = 2;
    if (has_target_user_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_user_rank());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_exchange_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_exchange_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_exchange_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_exchange_out::MergeFrom(const db_ai_rank_exchange_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_rank()) {
      set_user_rank(from.user_rank());
    }
    if (from.has_target_user_rank()) {
      set_target_user_rank(from.target_user_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_exchange_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_exchange_out::CopyFrom(const db_ai_rank_exchange_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_exchange_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_ai_rank_exchange_out::Swap(db_ai_rank_exchange_out* other) {
  if (other != this) {
    std::swap(user_rank_, other->user_rank_);
    std::swap(target_user_rank_, other->target_user_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_exchange_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_exchange_out_descriptor_;
  metadata.reflection = db_ai_rank_exchange_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_range_in::kZoneIdFieldNumber;
const int db_ai_rank_range_in::kStartFieldNumber;
const int db_ai_rank_range_in::kEndFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_range_in::db_ai_rank_range_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_range_in::InitAsDefaultInstance() {
}

db_ai_rank_range_in::db_ai_rank_range_in(const db_ai_rank_range_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_range_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  start_ = 0u;
  end_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_range_in::~db_ai_rank_range_in() {
  SharedDtor();
}

void db_ai_rank_range_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_ai_rank_range_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_range_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_range_in_descriptor_;
}

const db_ai_rank_range_in& db_ai_rank_range_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_range_in* db_ai_rank_range_in::default_instance_ = NULL;

db_ai_rank_range_in* db_ai_rank_range_in::New() const {
  return new db_ai_rank_range_in;
}

void db_ai_rank_range_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    start_ = 0u;
    end_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_range_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start;
        break;
      }
      
      // required uint32 start = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end;
        break;
      }
      
      // required uint32 end = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_range_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start(), output);
  }
  
  // required uint32 end = 3;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_range_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 start = 2;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start(), target);
  }
  
  // required uint32 end = 3;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_range_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 start = 2;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start());
    }
    
    // required uint32 end = 3;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_range_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_range_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_range_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_range_in::MergeFrom(const db_ai_rank_range_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_range_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_range_in::CopyFrom(const db_ai_rank_range_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_range_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_ai_rank_range_in::Swap(db_ai_rank_range_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_range_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_range_in_descriptor_;
  metadata.reflection = db_ai_rank_range_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_range_out::kInfosFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_range_out::db_ai_rank_range_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_range_out::InitAsDefaultInstance() {
}

db_ai_rank_range_out::db_ai_rank_range_out(const db_ai_rank_range_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_range_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_range_out::~db_ai_rank_range_out() {
  SharedDtor();
}

void db_ai_rank_range_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_ai_rank_range_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_range_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_range_out_descriptor_;
}

const db_ai_rank_range_out& db_ai_rank_range_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_range_out* db_ai_rank_range_out::default_instance_ = NULL;

db_ai_rank_range_out* db_ai_rank_range_out::New() const {
  return new db_ai_rank_range_out;
}

void db_ai_rank_range_out::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_range_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_ai_rank_info infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_range_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_ai_rank_info infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_range_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_ai_rank_info infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_range_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_ai_rank_info infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_range_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_range_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_range_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_range_out::MergeFrom(const db_ai_rank_range_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_range_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_range_out::CopyFrom(const db_ai_rank_range_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_range_out::IsInitialized() const {
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_ai_rank_range_out::Swap(db_ai_rank_range_out* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_range_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_range_out_descriptor_;
  metadata.reflection = db_ai_rank_range_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_log_in::kZoneIdFieldNumber;
const int db_ai_rank_log_in::kNameFieldNumber;
const int db_ai_rank_log_in::kTargetUseridFieldNumber;
const int db_ai_rank_log_in::kTargetRegTimeFieldNumber;
const int db_ai_rank_log_in::kTargetNameFieldNumber;
const int db_ai_rank_log_in::kWinFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_log_in::db_ai_rank_log_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_log_in::InitAsDefaultInstance() {
}

db_ai_rank_log_in::db_ai_rank_log_in(const db_ai_rank_log_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_log_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_userid_ = 0u;
  target_reg_time_ = 0u;
  target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  win_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_log_in::~db_ai_rank_log_in() {
  SharedDtor();
}

void db_ai_rank_log_in::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_name_;
  }
  if (this != default_instance_) {
  }
}

void db_ai_rank_log_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_log_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_log_in_descriptor_;
}

const db_ai_rank_log_in& db_ai_rank_log_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_log_in* db_ai_rank_log_in::default_instance_ = NULL;

db_ai_rank_log_in* db_ai_rank_log_in::New() const {
  return new db_ai_rank_log_in;
}

void db_ai_rank_log_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    target_userid_ = 0u;
    target_reg_time_ = 0u;
    if (has_target_name()) {
      if (target_name_ != &::google::protobuf::internal::kEmptyString) {
        target_name_->clear();
      }
    }
    win_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_log_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_userid;
        break;
      }
      
      // required uint32 target_userid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_userid_)));
          set_has_target_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_target_reg_time;
        break;
      }
      
      // required uint32 target_reg_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_reg_time_)));
          set_has_target_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_target_name;
        break;
      }
      
      // required string target_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target_name().data(), this->target_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win;
        break;
      }
      
      // required bool win = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_log_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required uint32 target_userid = 3;
  if (has_target_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_userid(), output);
  }
  
  // required uint32 target_reg_time = 4;
  if (has_target_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->target_reg_time(), output);
  }
  
  // required string target_name = 5;
  if (has_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_name().data(), this->target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->target_name(), output);
  }
  
  // required bool win = 6;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->win(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_log_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required uint32 target_userid = 3;
  if (has_target_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_userid(), target);
  }
  
  // required uint32 target_reg_time = 4;
  if (has_target_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->target_reg_time(), target);
  }
  
  // required string target_name = 5;
  if (has_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_name().data(), this->target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->target_name(), target);
  }
  
  // required bool win = 6;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->win(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_log_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required uint32 target_userid = 3;
    if (has_target_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_userid());
    }
    
    // required uint32 target_reg_time = 4;
    if (has_target_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_reg_time());
    }
    
    // required string target_name = 5;
    if (has_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_name());
    }
    
    // required bool win = 6;
    if (has_win()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_log_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_log_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_log_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_log_in::MergeFrom(const db_ai_rank_log_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_target_userid()) {
      set_target_userid(from.target_userid());
    }
    if (from.has_target_reg_time()) {
      set_target_reg_time(from.target_reg_time());
    }
    if (from.has_target_name()) {
      set_target_name(from.target_name());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_log_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_log_in::CopyFrom(const db_ai_rank_log_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_log_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void db_ai_rank_log_in::Swap(db_ai_rank_log_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(name_, other->name_);
    std::swap(target_userid_, other->target_userid_);
    std::swap(target_reg_time_, other->target_reg_time_);
    std::swap(target_name_, other->target_name_);
    std::swap(win_, other->win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_log_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_log_in_descriptor_;
  metadata.reflection = db_ai_rank_log_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_mon_list_in::kZoneIdFieldNumber;
const int db_query_mon_list_in::kUidFieldNumber;
const int db_query_mon_list_in::kNameFieldNumber;
#endif  // !_MSC_VER

db_query_mon_list_in::db_query_mon_list_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_mon_list_in::InitAsDefaultInstance() {
}

db_query_mon_list_in::db_query_mon_list_in(const db_query_mon_list_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_mon_list_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_mon_list_in::~db_query_mon_list_in() {
  SharedDtor();
}

void db_query_mon_list_in::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_query_mon_list_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_mon_list_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_mon_list_in_descriptor_;
}

const db_query_mon_list_in& db_query_mon_list_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_mon_list_in* db_query_mon_list_in::default_instance_ = NULL;

db_query_mon_list_in* db_query_mon_list_in::New() const {
  return new db_query_mon_list_in;
}

void db_query_mon_list_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_mon_list_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }
      
      // required uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_mon_list_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }
  
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_mon_list_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }
  
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_mon_list_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }
    
    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_mon_list_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_mon_list_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_mon_list_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_mon_list_in::MergeFrom(const db_query_mon_list_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_mon_list_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_mon_list_in::CopyFrom(const db_query_mon_list_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_mon_list_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_query_mon_list_in::Swap(db_query_mon_list_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_mon_list_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_mon_list_in_descriptor_;
  metadata.reflection = db_query_mon_list_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mon_info_t::kMonIdFieldNumber;
const int mon_info_t::kMonStatusFieldNumber;
#endif  // !_MSC_VER

mon_info_t::mon_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mon_info_t::InitAsDefaultInstance() {
}

mon_info_t::mon_info_t(const mon_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mon_info_t::SharedCtor() {
  _cached_size_ = 0;
  mon_id_ = 0u;
  mon_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mon_info_t::~mon_info_t() {
  SharedDtor();
}

void mon_info_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mon_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mon_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mon_info_t_descriptor_;
}

const mon_info_t& mon_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

mon_info_t* mon_info_t::default_instance_ = NULL;

mon_info_t* mon_info_t::New() const {
  return new mon_info_t;
}

void mon_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mon_id_ = 0u;
    mon_status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mon_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mon_id_)));
          set_has_mon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mon_status;
        break;
      }
      
      // required uint32 mon_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mon_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mon_status_)));
          set_has_mon_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mon_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mon_id = 1;
  if (has_mon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mon_id(), output);
  }
  
  // required uint32 mon_status = 2;
  if (has_mon_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mon_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mon_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mon_id = 1;
  if (has_mon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mon_id(), target);
  }
  
  // required uint32 mon_status = 2;
  if (has_mon_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mon_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mon_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mon_id = 1;
    if (has_mon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mon_id());
    }
    
    // required uint32 mon_status = 2;
    if (has_mon_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mon_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mon_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mon_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mon_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mon_info_t::MergeFrom(const mon_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mon_id()) {
      set_mon_id(from.mon_id());
    }
    if (from.has_mon_status()) {
      set_mon_status(from.mon_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mon_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mon_info_t::CopyFrom(const mon_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mon_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void mon_info_t::Swap(mon_info_t* other) {
  if (other != this) {
    std::swap(mon_id_, other->mon_id_);
    std::swap(mon_status_, other->mon_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mon_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mon_info_t_descriptor_;
  metadata.reflection = mon_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_mon_list_out::kUidFieldNumber;
const int db_query_mon_list_out::kNameFieldNumber;
const int db_query_mon_list_out::kMonInfoFieldNumber;
#endif  // !_MSC_VER

db_query_mon_list_out::db_query_mon_list_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_mon_list_out::InitAsDefaultInstance() {
}

db_query_mon_list_out::db_query_mon_list_out(const db_query_mon_list_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_mon_list_out::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_mon_list_out::~db_query_mon_list_out() {
  SharedDtor();
}

void db_query_mon_list_out::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_query_mon_list_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_mon_list_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_mon_list_out_descriptor_;
}

const db_query_mon_list_out& db_query_mon_list_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_mon_list_out* db_query_mon_list_out::default_instance_ = NULL;

db_query_mon_list_out* db_query_mon_list_out::New() const {
  return new db_query_mon_list_out;
}

void db_query_mon_list_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  mon_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_mon_list_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mon_info;
        break;
      }
      
      // repeated .rudb.mon_info_t mon_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mon_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mon_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mon_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_mon_list_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // repeated .rudb.mon_info_t mon_info = 3;
  for (int i = 0; i < this->mon_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mon_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_mon_list_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // repeated .rudb.mon_info_t mon_info = 3;
  for (int i = 0; i < this->mon_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mon_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_mon_list_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated .rudb.mon_info_t mon_info = 3;
  total_size += 1 * this->mon_info_size();
  for (int i = 0; i < this->mon_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mon_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_mon_list_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_mon_list_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_mon_list_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_mon_list_out::MergeFrom(const db_query_mon_list_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  mon_info_.MergeFrom(from.mon_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_mon_list_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_mon_list_out::CopyFrom(const db_query_mon_list_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_mon_list_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < mon_info_size(); i++) {
    if (!this->mon_info(i).IsInitialized()) return false;
  }
  return true;
}

void db_query_mon_list_out::Swap(db_query_mon_list_out* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    mon_info_.Swap(&other->mon_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_mon_list_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_mon_list_out_descriptor_;
  metadata.reflection = db_query_mon_list_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_players_info_in::kZoneIdFieldNumber;
const int db_query_players_info_in::kCmdFieldNumber;
const int db_query_players_info_in::kPlayersFieldNumber;
#endif  // !_MSC_VER

db_query_players_info_in::db_query_players_info_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_players_info_in::InitAsDefaultInstance() {
}

db_query_players_info_in::db_query_players_info_in(const db_query_players_info_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_players_info_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_players_info_in::~db_query_players_info_in() {
  SharedDtor();
}

void db_query_players_info_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_players_info_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_players_info_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_players_info_in_descriptor_;
}

const db_query_players_info_in& db_query_players_info_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_players_info_in* db_query_players_info_in::default_instance_ = NULL;

db_query_players_info_in* db_query_players_info_in::New() const {
  return new db_query_players_info_in;
}

void db_query_players_info_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    cmd_ = 0u;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_players_info_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }
      
      // required uint32 cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_players;
        break;
      }
      
      // repeated .rudb.db_player_info_t players = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_players_info_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmd(), output);
  }
  
  // repeated .rudb.db_player_info_t players = 3;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->players(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_players_info_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmd(), target);
  }
  
  // repeated .rudb.db_player_info_t players = 3;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->players(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_players_info_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }
    
  }
  // repeated .rudb.db_player_info_t players = 3;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_players_info_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_players_info_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_players_info_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_players_info_in::MergeFrom(const db_query_players_info_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_players_info_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_players_info_in::CopyFrom(const db_query_players_info_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_players_info_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void db_query_players_info_in::Swap(db_query_players_info_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(cmd_, other->cmd_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_players_info_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_players_info_in_descriptor_;
  metadata.reflection = db_query_players_info_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_players_info_out::kCmdFieldNumber;
const int db_query_players_info_out::kPlayersFieldNumber;
#endif  // !_MSC_VER

db_query_players_info_out::db_query_players_info_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_players_info_out::InitAsDefaultInstance() {
}

db_query_players_info_out::db_query_players_info_out(const db_query_players_info_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_players_info_out::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_players_info_out::~db_query_players_info_out() {
  SharedDtor();
}

void db_query_players_info_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_players_info_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_players_info_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_players_info_out_descriptor_;
}

const db_query_players_info_out& db_query_players_info_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_players_info_out* db_query_players_info_out::default_instance_ = NULL;

db_query_players_info_out* db_query_players_info_out::New() const {
  return new db_query_players_info_out;
}

void db_query_players_info_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0u;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_players_info_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_players;
        break;
      }
      
      // repeated .rudb.db_player_info_t players = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_players_info_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }
  
  // repeated .rudb.db_player_info_t players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->players(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_players_info_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }
  
  // repeated .rudb.db_player_info_t players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->players(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_players_info_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }
    
  }
  // repeated .rudb.db_player_info_t players = 2;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_players_info_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_players_info_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_players_info_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_players_info_out::MergeFrom(const db_query_players_info_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_players_info_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_players_info_out::CopyFrom(const db_query_players_info_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_players_info_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void db_query_players_info_out::Swap(db_query_players_info_out* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_players_info_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_players_info_out_descriptor_;
  metadata.reflection = db_query_players_info_out_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rudb

// @@protoc_insertion_point(global_scope)
