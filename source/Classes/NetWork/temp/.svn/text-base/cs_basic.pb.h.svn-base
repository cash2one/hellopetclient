// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_basic.proto

#ifndef PROTOBUF_cs_5fbasic_2eproto__INCLUDED
#define PROTOBUF_cs_5fbasic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cs_5fbasic_2eproto();
void protobuf_AssignDesc_cs_5fbasic_2eproto();
void protobuf_ShutdownFile_cs_5fbasic_2eproto();

class CSMessageHeader;
class CSLoginReq;
class CSLoginRsp;
class CSCrtRoleReq;
class CSDelRoleReq;
class CSCrtRoleRsp;
class CSQueryShardReq;
class CSServerBase;
class CSShardBase;
class CSQueryShardRsp;
class FlushOnline;
class FlushServer;
class CSPingReq;
class CSPingRsp;
class CSTaskAccept;

enum CSMessageConst {
  cs_msg_min_size = 10,
  cs_msg_max_size = 65537
};
bool CSMessageConst_IsValid(int value);
const CSMessageConst CSMessageConst_MIN = cs_msg_min_size;
const CSMessageConst CSMessageConst_MAX = cs_msg_max_size;
const int CSMessageConst_ARRAYSIZE = CSMessageConst_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSMessageConst_descriptor();
inline const ::std::string& CSMessageConst_Name(CSMessageConst value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSMessageConst_descriptor(), value);
}
inline bool CSMessageConst_Parse(
    const ::std::string& name, CSMessageConst* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSMessageConst>(
    CSMessageConst_descriptor(), name, value);
}
// ===================================================================

class CSMessageHeader : public ::google::protobuf::Message {
 public:
  CSMessageHeader();
  virtual ~CSMessageHeader();

  CSMessageHeader(const CSMessageHeader& from);

  inline CSMessageHeader& operator=(const CSMessageHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMessageHeader& default_instance();

  void Swap(CSMessageHeader* other);

  // implements Message ----------------------------------------------

  CSMessageHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMessageHeader& from);
  void MergeFrom(const CSMessageHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string msg_name = 1;
  inline bool has_msg_name() const;
  inline void clear_msg_name();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msg_name() const;
  inline void set_msg_name(const ::std::string& value);
  inline void set_msg_name(const char* value);
  inline void set_msg_name(const char* value, size_t size);
  inline ::std::string* mutable_msg_name();
  inline ::std::string* release_msg_name();
  inline void set_allocated_msg_name(::std::string* msg_name);

  // optional uint32 errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSMessageHeader)
 private:
  inline void set_has_msg_name();
  inline void clear_has_msg_name();
  inline void set_has_errcode();
  inline void clear_has_errcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_name_;
  ::google::protobuf::uint32 errcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();

  void InitAsDefaultInstance();
  static CSMessageHeader* default_instance_;
};
// -------------------------------------------------------------------

class CSLoginReq : public ::google::protobuf::Message {
 public:
  CSLoginReq();
  virtual ~CSLoginReq();

  CSLoginReq(const CSLoginReq& from);

  inline CSLoginReq& operator=(const CSLoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSLoginReq& default_instance();

  void Swap(CSLoginReq* other);

  // implements Message ----------------------------------------------

  CSLoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSLoginReq& from);
  void MergeFrom(const CSLoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required string sid = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 2;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  inline ::std::string* release_sid();
  inline void set_allocated_sid(::std::string* sid);

  // optional uint64 tokenid = 3;
  inline bool has_tokenid() const;
  inline void clear_tokenid();
  static const int kTokenidFieldNumber = 3;
  inline ::google::protobuf::uint64 tokenid() const;
  inline void set_tokenid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CSLoginReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_tokenid();
  inline void clear_has_tokenid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sid_;
  ::google::protobuf::uint64 tokenid_;
  ::google::protobuf::uint32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();

  void InitAsDefaultInstance();
  static CSLoginReq* default_instance_;
};
// -------------------------------------------------------------------

class CSLoginRsp : public ::google::protobuf::Message {
 public:
  CSLoginRsp();
  virtual ~CSLoginRsp();

  CSLoginRsp(const CSLoginRsp& from);

  inline CSLoginRsp& operator=(const CSLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSLoginRsp& default_instance();

  void Swap(CSLoginRsp* other);

  // implements Message ----------------------------------------------

  CSLoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSLoginRsp& from);
  void MergeFrom(const CSLoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 tokenid = 1;
  inline bool has_tokenid() const;
  inline void clear_tokenid();
  static const int kTokenidFieldNumber = 1;
  inline ::google::protobuf::uint64 tokenid() const;
  inline void set_tokenid(::google::protobuf::uint64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 lv = 3;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 3;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // required uint32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // required uint32 type = 9;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 9;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSLoginRsp)
 private:
  inline void set_has_tokenid();
  inline void clear_has_tokenid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 tokenid_;
  ::std::string* name_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();

  void InitAsDefaultInstance();
  static CSLoginRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSCrtRoleReq : public ::google::protobuf::Message {
 public:
  CSCrtRoleReq();
  virtual ~CSCrtRoleReq();

  CSCrtRoleReq(const CSCrtRoleReq& from);

  inline CSCrtRoleReq& operator=(const CSCrtRoleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSCrtRoleReq& default_instance();

  void Swap(CSCrtRoleReq* other);

  // implements Message ----------------------------------------------

  CSCrtRoleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSCrtRoleReq& from);
  void MergeFrom(const CSCrtRoleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 role_type = 2;
  inline bool has_role_type() const;
  inline void clear_role_type();
  static const int kRoleTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 role_type() const;
  inline void set_role_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSCrtRoleReq)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_role_type();
  inline void clear_has_role_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 role_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();

  void InitAsDefaultInstance();
  static CSCrtRoleReq* default_instance_;
};
// -------------------------------------------------------------------

class CSDelRoleReq : public ::google::protobuf::Message {
 public:
  CSDelRoleReq();
  virtual ~CSDelRoleReq();

  CSDelRoleReq(const CSDelRoleReq& from);

  inline CSDelRoleReq& operator=(const CSDelRoleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSDelRoleReq& default_instance();

  void Swap(CSDelRoleReq* other);

  // implements Message ----------------------------------------------

  CSDelRoleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSDelRoleReq& from);
  void MergeFrom(const CSDelRoleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSDelRoleReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();

  void InitAsDefaultInstance();
  static CSDelRoleReq* default_instance_;
};
// -------------------------------------------------------------------

class CSCrtRoleRsp : public ::google::protobuf::Message {
 public:
  CSCrtRoleRsp();
  virtual ~CSCrtRoleRsp();

  CSCrtRoleRsp(const CSCrtRoleRsp& from);

  inline CSCrtRoleRsp& operator=(const CSCrtRoleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSCrtRoleRsp& default_instance();

  void Swap(CSCrtRoleRsp* other);

  // implements Message ----------------------------------------------

  CSCrtRoleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSCrtRoleRsp& from);
  void MergeFrom(const CSCrtRoleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 tokenid = 1;
  inline bool has_tokenid() const;
  inline void clear_tokenid();
  static const int kTokenidFieldNumber = 1;
  inline ::google::protobuf::uint64 tokenid() const;
  inline void set_tokenid(::google::protobuf::uint64 value);

  // required uint32 mapid = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 2;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // required uint32 xpos = 3;
  inline bool has_xpos() const;
  inline void clear_xpos();
  static const int kXposFieldNumber = 3;
  inline ::google::protobuf::uint32 xpos() const;
  inline void set_xpos(::google::protobuf::uint32 value);

  // required uint32 ypos = 4;
  inline bool has_ypos() const;
  inline void clear_ypos();
  static const int kYposFieldNumber = 4;
  inline ::google::protobuf::uint32 ypos() const;
  inline void set_ypos(::google::protobuf::uint32 value);

  // required uint32 orient = 5;
  inline bool has_orient() const;
  inline void clear_orient();
  static const int kOrientFieldNumber = 5;
  inline ::google::protobuf::uint32 orient() const;
  inline void set_orient(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSCrtRoleRsp)
 private:
  inline void set_has_tokenid();
  inline void clear_has_tokenid();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_xpos();
  inline void clear_has_xpos();
  inline void set_has_ypos();
  inline void clear_has_ypos();
  inline void set_has_orient();
  inline void clear_has_orient();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 tokenid_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 xpos_;
  ::google::protobuf::uint32 ypos_;
  ::google::protobuf::uint32 orient_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();

  void InitAsDefaultInstance();
  static CSCrtRoleRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSQueryShardReq : public ::google::protobuf::Message {
 public:
  CSQueryShardReq();
  virtual ~CSQueryShardReq();

  CSQueryShardReq(const CSQueryShardReq& from);

  inline CSQueryShardReq& operator=(const CSQueryShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSQueryShardReq& default_instance();

  void Swap(CSQueryShardReq* other);

  // implements Message ----------------------------------------------

  CSQueryShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSQueryShardReq& from);
  void MergeFrom(const CSQueryShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSQueryShardReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();

  void InitAsDefaultInstance();
  static CSQueryShardReq* default_instance_;
};
// -------------------------------------------------------------------

class CSServerBase : public ::google::protobuf::Message {
 public:
  CSServerBase();
  virtual ~CSServerBase();

  CSServerBase(const CSServerBase& from);

  inline CSServerBase& operator=(const CSServerBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSServerBase& default_instance();

  void Swap(CSServerBase* other);

  // implements Message ----------------------------------------------

  CSServerBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSServerBase& from);
  void MergeFrom(const CSServerBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string desc = 1;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 1;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // required string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // required uint32 online = 4;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 4;
  inline ::google::protobuf::uint32 online() const;
  inline void set_online(::google::protobuf::uint32 value);

  // required uint32 newsvr = 5;
  inline bool has_newsvr() const;
  inline void clear_newsvr();
  static const int kNewsvrFieldNumber = 5;
  inline ::google::protobuf::uint32 newsvr() const;
  inline void set_newsvr(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSServerBase)
 private:
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_newsvr();
  inline void clear_has_newsvr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* desc_;
  ::std::string* ip_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 online_;
  ::google::protobuf::uint32 newsvr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();

  void InitAsDefaultInstance();
  static CSServerBase* default_instance_;
};
// -------------------------------------------------------------------

class CSShardBase : public ::google::protobuf::Message {
 public:
  CSShardBase();
  virtual ~CSShardBase();

  CSShardBase(const CSShardBase& from);

  inline CSShardBase& operator=(const CSShardBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSShardBase& default_instance();

  void Swap(CSShardBase* other);

  // implements Message ----------------------------------------------

  CSShardBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSShardBase& from);
  void MergeFrom(const CSShardBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 os = 2;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 2;
  inline ::google::protobuf::uint32 os() const;
  inline void set_os(::google::protobuf::uint32 value);

  // required uint32 provider = 3;
  inline bool has_provider() const;
  inline void clear_provider();
  static const int kProviderFieldNumber = 3;
  inline ::google::protobuf::uint32 provider() const;
  inline void set_provider(::google::protobuf::uint32 value);

  // repeated .CSServerBase svrs = 4;
  inline int svrs_size() const;
  inline void clear_svrs();
  static const int kSvrsFieldNumber = 4;
  inline const ::CSServerBase& svrs(int index) const;
  inline ::CSServerBase* mutable_svrs(int index);
  inline ::CSServerBase* add_svrs();
  inline const ::google::protobuf::RepeatedPtrField< ::CSServerBase >&
      svrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSServerBase >*
      mutable_svrs();

  // @@protoc_insertion_point(class_scope:CSShardBase)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_os();
  inline void clear_has_os();
  inline void set_has_provider();
  inline void clear_has_provider();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 os_;
  ::google::protobuf::RepeatedPtrField< ::CSServerBase > svrs_;
  ::google::protobuf::uint32 provider_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();

  void InitAsDefaultInstance();
  static CSShardBase* default_instance_;
};
// -------------------------------------------------------------------

class CSQueryShardRsp : public ::google::protobuf::Message {
 public:
  CSQueryShardRsp();
  virtual ~CSQueryShardRsp();

  CSQueryShardRsp(const CSQueryShardRsp& from);

  inline CSQueryShardRsp& operator=(const CSQueryShardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSQueryShardRsp& default_instance();

  void Swap(CSQueryShardRsp* other);

  // implements Message ----------------------------------------------

  CSQueryShardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSQueryShardRsp& from);
  void MergeFrom(const CSQueryShardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CSShardBase shards = 1;
  inline int shards_size() const;
  inline void clear_shards();
  static const int kShardsFieldNumber = 1;
  inline const ::CSShardBase& shards(int index) const;
  inline ::CSShardBase* mutable_shards(int index);
  inline ::CSShardBase* add_shards();
  inline const ::google::protobuf::RepeatedPtrField< ::CSShardBase >&
      shards() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSShardBase >*
      mutable_shards();

  // @@protoc_insertion_point(class_scope:CSQueryShardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CSShardBase > shards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();

  void InitAsDefaultInstance();
  static CSQueryShardRsp* default_instance_;
};
// -------------------------------------------------------------------

class FlushOnline : public ::google::protobuf::Message {
 public:
  FlushOnline();
  virtual ~FlushOnline();

  FlushOnline(const FlushOnline& from);

  inline FlushOnline& operator=(const FlushOnline& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlushOnline& default_instance();

  void Swap(FlushOnline* other);

  // implements Message ----------------------------------------------

  FlushOnline* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlushOnline& from);
  void MergeFrom(const FlushOnline& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 online = 1;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 1;
  inline ::google::protobuf::uint32 online() const;
  inline void set_online(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FlushOnline)
 private:
  inline void set_has_online();
  inline void clear_has_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();

  void InitAsDefaultInstance();
  static FlushOnline* default_instance_;
};
// -------------------------------------------------------------------

class FlushServer : public ::google::protobuf::Message {
 public:
  FlushServer();
  virtual ~FlushServer();

  FlushServer(const FlushServer& from);

  inline FlushServer& operator=(const FlushServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlushServer& default_instance();

  void Swap(FlushServer* other);

  // implements Message ----------------------------------------------

  FlushServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlushServer& from);
  void MergeFrom(const FlushServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated .CSServerBase svrs = 2;
  inline int svrs_size() const;
  inline void clear_svrs();
  static const int kSvrsFieldNumber = 2;
  inline const ::CSServerBase& svrs(int index) const;
  inline ::CSServerBase* mutable_svrs(int index);
  inline ::CSServerBase* add_svrs();
  inline const ::google::protobuf::RepeatedPtrField< ::CSServerBase >&
      svrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSServerBase >*
      mutable_svrs();

  // @@protoc_insertion_point(class_scope:FlushServer)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CSServerBase > svrs_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();

  void InitAsDefaultInstance();
  static FlushServer* default_instance_;
};
// -------------------------------------------------------------------

class CSPingReq : public ::google::protobuf::Message {
 public:
  CSPingReq();
  virtual ~CSPingReq();

  CSPingReq(const CSPingReq& from);

  inline CSPingReq& operator=(const CSPingReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPingReq& default_instance();

  void Swap(CSPingReq* other);

  // implements Message ----------------------------------------------

  CSPingReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPingReq& from);
  void MergeFrom(const CSPingReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSPingReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();

  void InitAsDefaultInstance();
  static CSPingReq* default_instance_;
};
// -------------------------------------------------------------------

class CSPingRsp : public ::google::protobuf::Message {
 public:
  CSPingRsp();
  virtual ~CSPingRsp();

  CSPingRsp(const CSPingRsp& from);

  inline CSPingRsp& operator=(const CSPingRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPingRsp& default_instance();

  void Swap(CSPingRsp* other);

  // implements Message ----------------------------------------------

  CSPingRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPingRsp& from);
  void MergeFrom(const CSPingRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // required uint32 utime = 2;
  inline bool has_utime() const;
  inline void clear_utime();
  static const int kUtimeFieldNumber = 2;
  inline ::google::protobuf::uint32 utime() const;
  inline void set_utime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSPingRsp)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_utime();
  inline void clear_has_utime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 utime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();

  void InitAsDefaultInstance();
  static CSPingRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSTaskAccept : public ::google::protobuf::Message {
 public:
  CSTaskAccept();
  virtual ~CSTaskAccept();

  CSTaskAccept(const CSTaskAccept& from);

  inline CSTaskAccept& operator=(const CSTaskAccept& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSTaskAccept& default_instance();

  void Swap(CSTaskAccept* other);

  // implements Message ----------------------------------------------

  CSTaskAccept* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSTaskAccept& from);
  void MergeFrom(const CSTaskAccept& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSTaskAccept)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();

  void InitAsDefaultInstance();
  static CSTaskAccept* default_instance_;
};
// ===================================================================


// ===================================================================

// CSMessageHeader

// required string msg_name = 1;
inline bool CSMessageHeader::has_msg_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMessageHeader::set_has_msg_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMessageHeader::clear_has_msg_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMessageHeader::clear_msg_name() {
  if (msg_name_ != &::google::protobuf::internal::kEmptyString) {
    msg_name_->clear();
  }
  clear_has_msg_name();
}
inline const ::std::string& CSMessageHeader::msg_name() const {
  return *msg_name_;
}
inline void CSMessageHeader::set_msg_name(const ::std::string& value) {
  set_has_msg_name();
  if (msg_name_ == &::google::protobuf::internal::kEmptyString) {
    msg_name_ = new ::std::string;
  }
  msg_name_->assign(value);
}
inline void CSMessageHeader::set_msg_name(const char* value) {
  set_has_msg_name();
  if (msg_name_ == &::google::protobuf::internal::kEmptyString) {
    msg_name_ = new ::std::string;
  }
  msg_name_->assign(value);
}
inline void CSMessageHeader::set_msg_name(const char* value, size_t size) {
  set_has_msg_name();
  if (msg_name_ == &::google::protobuf::internal::kEmptyString) {
    msg_name_ = new ::std::string;
  }
  msg_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSMessageHeader::mutable_msg_name() {
  set_has_msg_name();
  if (msg_name_ == &::google::protobuf::internal::kEmptyString) {
    msg_name_ = new ::std::string;
  }
  return msg_name_;
}
inline ::std::string* CSMessageHeader::release_msg_name() {
  clear_has_msg_name();
  if (msg_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_name_;
    msg_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSMessageHeader::set_allocated_msg_name(::std::string* msg_name) {
  if (msg_name_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_name_;
  }
  if (msg_name) {
    set_has_msg_name();
    msg_name_ = msg_name;
  } else {
    clear_has_msg_name();
    msg_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 errcode = 2;
inline bool CSMessageHeader::has_errcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMessageHeader::set_has_errcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMessageHeader::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMessageHeader::clear_errcode() {
  errcode_ = 0u;
  clear_has_errcode();
}
inline ::google::protobuf::uint32 CSMessageHeader::errcode() const {
  return errcode_;
}
inline void CSMessageHeader::set_errcode(::google::protobuf::uint32 value) {
  set_has_errcode();
  errcode_ = value;
}

// -------------------------------------------------------------------

// CSLoginReq

// required uint32 uid = 1;
inline bool CSLoginReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSLoginReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSLoginReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSLoginReq::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 CSLoginReq::uid() const {
  return uid_;
}
inline void CSLoginReq::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// required string sid = 2;
inline bool CSLoginReq::has_sid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSLoginReq::set_has_sid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSLoginReq::clear_has_sid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSLoginReq::clear_sid() {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    sid_->clear();
  }
  clear_has_sid();
}
inline const ::std::string& CSLoginReq::sid() const {
  return *sid_;
}
inline void CSLoginReq::set_sid(const ::std::string& value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void CSLoginReq::set_sid(const char* value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void CSLoginReq::set_sid(const char* value, size_t size) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSLoginReq::mutable_sid() {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  return sid_;
}
inline ::std::string* CSLoginReq::release_sid() {
  clear_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sid_;
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSLoginReq::set_allocated_sid(::std::string* sid) {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    delete sid_;
  }
  if (sid) {
    set_has_sid();
    sid_ = sid;
  } else {
    clear_has_sid();
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 tokenid = 3;
inline bool CSLoginReq::has_tokenid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSLoginReq::set_has_tokenid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSLoginReq::clear_has_tokenid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSLoginReq::clear_tokenid() {
  tokenid_ = GOOGLE_ULONGLONG(0);
  clear_has_tokenid();
}
inline ::google::protobuf::uint64 CSLoginReq::tokenid() const {
  return tokenid_;
}
inline void CSLoginReq::set_tokenid(::google::protobuf::uint64 value) {
  set_has_tokenid();
  tokenid_ = value;
}

// -------------------------------------------------------------------

// CSLoginRsp

// required uint64 tokenid = 1;
inline bool CSLoginRsp::has_tokenid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSLoginRsp::set_has_tokenid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSLoginRsp::clear_has_tokenid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSLoginRsp::clear_tokenid() {
  tokenid_ = GOOGLE_ULONGLONG(0);
  clear_has_tokenid();
}
inline ::google::protobuf::uint64 CSLoginRsp::tokenid() const {
  return tokenid_;
}
inline void CSLoginRsp::set_tokenid(::google::protobuf::uint64 value) {
  set_has_tokenid();
  tokenid_ = value;
}

// required string name = 2;
inline bool CSLoginRsp::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSLoginRsp::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSLoginRsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSLoginRsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CSLoginRsp::name() const {
  return *name_;
}
inline void CSLoginRsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CSLoginRsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CSLoginRsp::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSLoginRsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CSLoginRsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSLoginRsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 lv = 3;
inline bool CSLoginRsp::has_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSLoginRsp::set_has_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSLoginRsp::clear_has_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSLoginRsp::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 CSLoginRsp::lv() const {
  return lv_;
}
inline void CSLoginRsp::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// required uint32 exp = 4;
inline bool CSLoginRsp::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSLoginRsp::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSLoginRsp::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSLoginRsp::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 CSLoginRsp::exp() const {
  return exp_;
}
inline void CSLoginRsp::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// required uint32 type = 9;
inline bool CSLoginRsp::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSLoginRsp::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSLoginRsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSLoginRsp::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CSLoginRsp::type() const {
  return type_;
}
inline void CSLoginRsp::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// CSCrtRoleReq

// required string name = 1;
inline bool CSCrtRoleReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSCrtRoleReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSCrtRoleReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSCrtRoleReq::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CSCrtRoleReq::name() const {
  return *name_;
}
inline void CSCrtRoleReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CSCrtRoleReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CSCrtRoleReq::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSCrtRoleReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CSCrtRoleReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSCrtRoleReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 role_type = 2;
inline bool CSCrtRoleReq::has_role_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSCrtRoleReq::set_has_role_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSCrtRoleReq::clear_has_role_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSCrtRoleReq::clear_role_type() {
  role_type_ = 0u;
  clear_has_role_type();
}
inline ::google::protobuf::uint32 CSCrtRoleReq::role_type() const {
  return role_type_;
}
inline void CSCrtRoleReq::set_role_type(::google::protobuf::uint32 value) {
  set_has_role_type();
  role_type_ = value;
}

// -------------------------------------------------------------------

// CSDelRoleReq

// -------------------------------------------------------------------

// CSCrtRoleRsp

// required uint64 tokenid = 1;
inline bool CSCrtRoleRsp::has_tokenid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSCrtRoleRsp::set_has_tokenid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSCrtRoleRsp::clear_has_tokenid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSCrtRoleRsp::clear_tokenid() {
  tokenid_ = GOOGLE_ULONGLONG(0);
  clear_has_tokenid();
}
inline ::google::protobuf::uint64 CSCrtRoleRsp::tokenid() const {
  return tokenid_;
}
inline void CSCrtRoleRsp::set_tokenid(::google::protobuf::uint64 value) {
  set_has_tokenid();
  tokenid_ = value;
}

// required uint32 mapid = 2;
inline bool CSCrtRoleRsp::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSCrtRoleRsp::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSCrtRoleRsp::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSCrtRoleRsp::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 CSCrtRoleRsp::mapid() const {
  return mapid_;
}
inline void CSCrtRoleRsp::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
}

// required uint32 xpos = 3;
inline bool CSCrtRoleRsp::has_xpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSCrtRoleRsp::set_has_xpos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSCrtRoleRsp::clear_has_xpos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSCrtRoleRsp::clear_xpos() {
  xpos_ = 0u;
  clear_has_xpos();
}
inline ::google::protobuf::uint32 CSCrtRoleRsp::xpos() const {
  return xpos_;
}
inline void CSCrtRoleRsp::set_xpos(::google::protobuf::uint32 value) {
  set_has_xpos();
  xpos_ = value;
}

// required uint32 ypos = 4;
inline bool CSCrtRoleRsp::has_ypos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSCrtRoleRsp::set_has_ypos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSCrtRoleRsp::clear_has_ypos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSCrtRoleRsp::clear_ypos() {
  ypos_ = 0u;
  clear_has_ypos();
}
inline ::google::protobuf::uint32 CSCrtRoleRsp::ypos() const {
  return ypos_;
}
inline void CSCrtRoleRsp::set_ypos(::google::protobuf::uint32 value) {
  set_has_ypos();
  ypos_ = value;
}

// required uint32 orient = 5;
inline bool CSCrtRoleRsp::has_orient() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSCrtRoleRsp::set_has_orient() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSCrtRoleRsp::clear_has_orient() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSCrtRoleRsp::clear_orient() {
  orient_ = 0u;
  clear_has_orient();
}
inline ::google::protobuf::uint32 CSCrtRoleRsp::orient() const {
  return orient_;
}
inline void CSCrtRoleRsp::set_orient(::google::protobuf::uint32 value) {
  set_has_orient();
  orient_ = value;
}

// -------------------------------------------------------------------

// CSQueryShardReq

// -------------------------------------------------------------------

// CSServerBase

// required string desc = 1;
inline bool CSServerBase::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSServerBase::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSServerBase::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSServerBase::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& CSServerBase::desc() const {
  return *desc_;
}
inline void CSServerBase::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void CSServerBase::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void CSServerBase::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSServerBase::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* CSServerBase::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSServerBase::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ip = 2;
inline bool CSServerBase::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSServerBase::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSServerBase::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSServerBase::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CSServerBase::ip() const {
  return *ip_;
}
inline void CSServerBase::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void CSServerBase::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void CSServerBase::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSServerBase::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* CSServerBase::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSServerBase::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 port = 3;
inline bool CSServerBase::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSServerBase::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSServerBase::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSServerBase::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CSServerBase::port() const {
  return port_;
}
inline void CSServerBase::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// required uint32 online = 4;
inline bool CSServerBase::has_online() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSServerBase::set_has_online() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSServerBase::clear_has_online() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSServerBase::clear_online() {
  online_ = 0u;
  clear_has_online();
}
inline ::google::protobuf::uint32 CSServerBase::online() const {
  return online_;
}
inline void CSServerBase::set_online(::google::protobuf::uint32 value) {
  set_has_online();
  online_ = value;
}

// required uint32 newsvr = 5;
inline bool CSServerBase::has_newsvr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSServerBase::set_has_newsvr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSServerBase::clear_has_newsvr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSServerBase::clear_newsvr() {
  newsvr_ = 0u;
  clear_has_newsvr();
}
inline ::google::protobuf::uint32 CSServerBase::newsvr() const {
  return newsvr_;
}
inline void CSServerBase::set_newsvr(::google::protobuf::uint32 value) {
  set_has_newsvr();
  newsvr_ = value;
}

// -------------------------------------------------------------------

// CSShardBase

// required uint32 id = 1;
inline bool CSShardBase::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSShardBase::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSShardBase::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSShardBase::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSShardBase::id() const {
  return id_;
}
inline void CSShardBase::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 os = 2;
inline bool CSShardBase::has_os() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSShardBase::set_has_os() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSShardBase::clear_has_os() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSShardBase::clear_os() {
  os_ = 0u;
  clear_has_os();
}
inline ::google::protobuf::uint32 CSShardBase::os() const {
  return os_;
}
inline void CSShardBase::set_os(::google::protobuf::uint32 value) {
  set_has_os();
  os_ = value;
}

// required uint32 provider = 3;
inline bool CSShardBase::has_provider() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSShardBase::set_has_provider() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSShardBase::clear_has_provider() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSShardBase::clear_provider() {
  provider_ = 0u;
  clear_has_provider();
}
inline ::google::protobuf::uint32 CSShardBase::provider() const {
  return provider_;
}
inline void CSShardBase::set_provider(::google::protobuf::uint32 value) {
  set_has_provider();
  provider_ = value;
}

// repeated .CSServerBase svrs = 4;
inline int CSShardBase::svrs_size() const {
  return svrs_.size();
}
inline void CSShardBase::clear_svrs() {
  svrs_.Clear();
}
inline const ::CSServerBase& CSShardBase::svrs(int index) const {
  return svrs_.Get(index);
}
inline ::CSServerBase* CSShardBase::mutable_svrs(int index) {
  return svrs_.Mutable(index);
}
inline ::CSServerBase* CSShardBase::add_svrs() {
  return svrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSServerBase >&
CSShardBase::svrs() const {
  return svrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSServerBase >*
CSShardBase::mutable_svrs() {
  return &svrs_;
}

// -------------------------------------------------------------------

// CSQueryShardRsp

// repeated .CSShardBase shards = 1;
inline int CSQueryShardRsp::shards_size() const {
  return shards_.size();
}
inline void CSQueryShardRsp::clear_shards() {
  shards_.Clear();
}
inline const ::CSShardBase& CSQueryShardRsp::shards(int index) const {
  return shards_.Get(index);
}
inline ::CSShardBase* CSQueryShardRsp::mutable_shards(int index) {
  return shards_.Mutable(index);
}
inline ::CSShardBase* CSQueryShardRsp::add_shards() {
  return shards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSShardBase >&
CSQueryShardRsp::shards() const {
  return shards_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSShardBase >*
CSQueryShardRsp::mutable_shards() {
  return &shards_;
}

// -------------------------------------------------------------------

// FlushOnline

// required uint32 online = 1;
inline bool FlushOnline::has_online() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlushOnline::set_has_online() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlushOnline::clear_has_online() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlushOnline::clear_online() {
  online_ = 0u;
  clear_has_online();
}
inline ::google::protobuf::uint32 FlushOnline::online() const {
  return online_;
}
inline void FlushOnline::set_online(::google::protobuf::uint32 value) {
  set_has_online();
  online_ = value;
}

// -------------------------------------------------------------------

// FlushServer

// required uint32 id = 1;
inline bool FlushServer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlushServer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlushServer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlushServer::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 FlushServer::id() const {
  return id_;
}
inline void FlushServer::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// repeated .CSServerBase svrs = 2;
inline int FlushServer::svrs_size() const {
  return svrs_.size();
}
inline void FlushServer::clear_svrs() {
  svrs_.Clear();
}
inline const ::CSServerBase& FlushServer::svrs(int index) const {
  return svrs_.Get(index);
}
inline ::CSServerBase* FlushServer::mutable_svrs(int index) {
  return svrs_.Mutable(index);
}
inline ::CSServerBase* FlushServer::add_svrs() {
  return svrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSServerBase >&
FlushServer::svrs() const {
  return svrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSServerBase >*
FlushServer::mutable_svrs() {
  return &svrs_;
}

// -------------------------------------------------------------------

// CSPingReq

// -------------------------------------------------------------------

// CSPingRsp

// required uint32 time = 1;
inline bool CSPingRsp::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPingRsp::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPingRsp::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPingRsp::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CSPingRsp::time() const {
  return time_;
}
inline void CSPingRsp::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required uint32 utime = 2;
inline bool CSPingRsp::has_utime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSPingRsp::set_has_utime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSPingRsp::clear_has_utime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSPingRsp::clear_utime() {
  utime_ = 0u;
  clear_has_utime();
}
inline ::google::protobuf::uint32 CSPingRsp::utime() const {
  return utime_;
}
inline void CSPingRsp::set_utime(::google::protobuf::uint32 value) {
  set_has_utime();
  utime_ = value;
}

// -------------------------------------------------------------------

// CSTaskAccept


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSMessageConst>() {
  return ::CSMessageConst_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_5fbasic_2eproto__INCLUDED
