// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_core.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs_core.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BasicUserBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BasicUserBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserSkillPart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserSkillPart_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserSkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserSkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BasicUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BasicUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSEnterMapReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSEnterMapReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSEnterMapRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSEnterMapRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSLeaveMapRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLeaveMapRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetMapUsersReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetMapUsersReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetMapUsersRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetMapUsersRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetUserSkillReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetUserSkillReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetUserSkillRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetUserSkillRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetUserInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetUserInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetUserInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetUserInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSAddUserSkillReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSAddUserSkillReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSAddUserSkillRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSAddUserSkillRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSUserSkillDiffReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSUserSkillDiffReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSUserSkillDiffRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSUserSkillDiffRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSWalkReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSWalkReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSWalkRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSWalkRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSItemAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSItemAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSEquipHole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSEquipHole_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentBase_Item_Attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentBase_Item_Attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpiritStoneBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpiritStoneBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManorBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManorBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSAllItemsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSAllItemsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSAllItemsRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSAllItemsRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSItemAddRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSItemAddRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSItemRemoveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSItemRemoveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSItemRemoveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSItemRemoveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSItemUseReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSItemUseReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSItemMoveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSItemMoveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSItemMoveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSItemMoveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSItemUpdateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSItemUpdateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSItemOrderReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSItemOrderReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSInstanceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSInstanceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSInstanceRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSInstanceRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSInstanceRsp_CSInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSInstanceRsp_CSInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSReward_RewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSReward_RewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSLevelUpRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLevelUpRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBasicUserBattleInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBasicUserBattleInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSearchSpiritStoneReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSearchSpiritStoneReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSearchSpiritStoneRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSearchSpiritStoneRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSpiritStoneMoveBagReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSpiritStoneMoveBagReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSpiritStoneMoveBagRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSpiritStoneMoveBagRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSpiritStoneLevelUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSpiritStoneLevelUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSpiritStoneLevelUpRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSpiritStoneLevelUpRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSpiritStoneToSPReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSpiritStoneToSPReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSpiritStoneToSPRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSpiritStoneToSPRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetExchangeSSInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetExchangeSSInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeSSInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeSSInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetExchangeSSInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetExchangeSSInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSAddManorReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSAddManorReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSAddManorRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSAddManorRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSWarmSportLvUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSWarmSportLvUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSWarmSportLvUpRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSWarmSportLvUpRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSManorOptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSManorOptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSManorOptRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSManorOptRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSetMonStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSetMonStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSetMonStatusRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSetMonStatusRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVPQueryRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVPQueryRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVPRoomBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVPRoomBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVPQueryRoomRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVPQueryRoomRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVPBaseInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVPBaseInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVPCreateRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVPCreateRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVPJoinRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVPJoinRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVPSeatBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVPSeatBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVPJoinRoomRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVPJoinRoomRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVPExitRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVPExitRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVPExitRoomRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVPExitRoomRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVPCloseRoomRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVPCloseRoomRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVPChangeSeatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVPChangeSeatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVPReadyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVPReadyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVPCancelReadyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVPCancelReadyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVPKickoffReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVPKickoffReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVPKickoffRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVPKickoffRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVPStartReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVPStartReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVPStartRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVPStartRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPPVEBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPPVEBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPPVEBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPPVEBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVEQueryRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVEQueryRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVERoomBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVERoomBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVEQueryRoomRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVEQueryRoomRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVEBaseInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVEBaseInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVECreateRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVECreateRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVEJoinRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVEJoinRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVEJoinRoomFailureRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVEJoinRoomFailureRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVESeatBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVESeatBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVEJoinRoomRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVEJoinRoomRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVEExitRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVEExitRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVEExitRoomRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVEExitRoomRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVECloseRoomRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVECloseRoomRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVEReadyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVEReadyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVECancelReadyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVECancelReadyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVEKickoffReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVEKickoffReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVEKickoffRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVEKickoffRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVEStartReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVEStartReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVEStartRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVEStartRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVAIReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVAIReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVAIInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVAIInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVAIInfoRsq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVAIInfoRsq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVAIInfoRsq_CSPVAIInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVAIInfoRsq_CSPVAIInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPVAIInfoRsq_CSPVAILog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPVAIInfoRsq_CSPVAILog_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetEquipLvUpCDReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetEquipLvUpCDReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetEquipLvUpCDRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetEquipLvUpCDRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSEquipInlayGemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSEquipInlayGemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSEquipInlayGemRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSEquipInlayGemRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSResetGemAttrReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSResetGemAttrReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSResetGemAttrRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSResetGemAttrRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSEquipmentStrengthReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSEquipmentStrengthReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSEquipmentStrengthRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSEquipmentStrengthRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSEquipmentComposeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSEquipmentComposeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSEquipmentComposeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSEquipmentComposeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSTaskInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSTaskInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSTaskInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSTaskInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSTaskDoStepReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSTaskDoStepReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSTaskDoStepRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSTaskDoStepRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSTaskLogReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSTaskLogReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSTaskLogRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSTaskLogRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSAttributesSetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSAttributesSetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSAttributesReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSAttributesReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSAttributesRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSAttributesRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSAttributesRsp_KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSAttributesRsp_KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOnceSetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOnceSetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOnceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOnceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOnceRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOnceRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOnceRsp_Once_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOnceRsp_Once_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSTrainInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSTrainInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSTrainInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSTrainInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSTrainReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSTrainReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSTrainRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSTrainRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSTrainDetermineReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSTrainDetermineReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSTrainDetermineRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSTrainDetermineRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSExploreReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSExploreReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSExploreRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSExploreRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSExploreDetermineReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSExploreDetermineReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSExploreDetermineRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSExploreDetermineRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSQueryDowerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSQueryDowerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSQueryDowerRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSQueryDowerRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSQueryDowerRsp_Dower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSQueryDowerRsp_Dower_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDowerInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDowerInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDowerInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDowerInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDowerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDowerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDowerRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDowerRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSExchangeParameterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSExchangeParameterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSExchangeParameterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSExchangeParameterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopItemInfo_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopItemInfo_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetShopItemsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetShopItemsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetShopItemsRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetShopItemsRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBuyShopItemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBuyShopItemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBuyShopItemRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBuyShopItemRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetUserItemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetUserItemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetUserItemRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetUserItemRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetUserAttributesReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetUserAttributesReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetUserAttributesRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetUserAttributesRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSNotifyMoneyConfInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSNotifyMoneyConfInfoRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PB_PLAYET_ATTR_T_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PB_ITEM_ATTR_T_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_5fcore_2eproto() {
  protobuf_AddDesc_cs_5fcore_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs_core.proto");
  GOOGLE_CHECK(file != NULL);
  BasicUserBattleInfo_descriptor_ = file->message_type(0);
  static const int BasicUserBattleInfo_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserBattleInfo, physical_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserBattleInfo, magic_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserBattleInfo, skill_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserBattleInfo, physical_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserBattleInfo, magic_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserBattleInfo, skill_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserBattleInfo, health_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserBattleInfo, accurate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserBattleInfo, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserBattleInfo, wreck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserBattleInfo, parry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserBattleInfo, critical_strike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserBattleInfo, tenacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserBattleInfo, slay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserBattleInfo, courage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserBattleInfo, charm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserBattleInfo, trick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserBattleInfo, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserBattleInfo, proficiency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserBattleInfo, current_hp_),
  };
  BasicUserBattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BasicUserBattleInfo_descriptor_,
      BasicUserBattleInfo::default_instance_,
      BasicUserBattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserBattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserBattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BasicUserBattleInfo));
  UserSkillPart_descriptor_ = file->message_type(1);
  static const int UserSkillPart_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillPart, part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillPart, exp_battle_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillPart, continue_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillPart, can_attack_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillPart, hurt_),
  };
  UserSkillPart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserSkillPart_descriptor_,
      UserSkillPart::default_instance_,
      UserSkillPart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillPart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillPart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserSkillPart));
  UserSkillInfo_descriptor_ = file->message_type(2);
  static const int UserSkillInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillInfo, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillInfo, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillInfo, exploit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillInfo, own_cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillInfo, share_cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillInfo, parts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillInfo, max_level_),
  };
  UserSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserSkillInfo_descriptor_,
      UserSkillInfo::default_instance_,
      UserSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserSkillInfo));
  BasicUserInfo_descriptor_ = file->message_type(3);
  static const int BasicUserInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserInfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserInfo, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserInfo, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserInfo, orient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserInfo, battle_side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserInfo, battle_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserInfo, next_lv_),
  };
  BasicUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BasicUserInfo_descriptor_,
      BasicUserInfo::default_instance_,
      BasicUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BasicUserInfo));
  CSEnterMapReq_descriptor_ = file->message_type(4);
  static const int CSEnterMapReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterMapReq, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterMapReq, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterMapReq, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterMapReq, orient_),
  };
  CSEnterMapReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSEnterMapReq_descriptor_,
      CSEnterMapReq::default_instance_,
      CSEnterMapReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterMapReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterMapReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSEnterMapReq));
  CSEnterMapRsp_descriptor_ = file->message_type(5);
  static const int CSEnterMapRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterMapRsp, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterMapRsp, userinfo_),
  };
  CSEnterMapRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSEnterMapRsp_descriptor_,
      CSEnterMapRsp::default_instance_,
      CSEnterMapRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterMapRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterMapRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSEnterMapRsp));
  CSLeaveMapRsp_descriptor_ = file->message_type(6);
  static const int CSLeaveMapRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLeaveMapRsp, uid_),
  };
  CSLeaveMapRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSLeaveMapRsp_descriptor_,
      CSLeaveMapRsp::default_instance_,
      CSLeaveMapRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLeaveMapRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLeaveMapRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSLeaveMapRsp));
  CSGetMapUsersReq_descriptor_ = file->message_type(7);
  static const int CSGetMapUsersReq_offsets_[1] = {
  };
  CSGetMapUsersReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetMapUsersReq_descriptor_,
      CSGetMapUsersReq::default_instance_,
      CSGetMapUsersReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetMapUsersReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetMapUsersReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetMapUsersReq));
  CSGetMapUsersRsp_descriptor_ = file->message_type(8);
  static const int CSGetMapUsersRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetMapUsersRsp, userinfo_),
  };
  CSGetMapUsersRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetMapUsersRsp_descriptor_,
      CSGetMapUsersRsp::default_instance_,
      CSGetMapUsersRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetMapUsersRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetMapUsersRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetMapUsersRsp));
  CSGetUserSkillReq_descriptor_ = file->message_type(9);
  static const int CSGetUserSkillReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserSkillReq, userid_),
  };
  CSGetUserSkillReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetUserSkillReq_descriptor_,
      CSGetUserSkillReq::default_instance_,
      CSGetUserSkillReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserSkillReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserSkillReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetUserSkillReq));
  CSGetUserSkillRsp_descriptor_ = file->message_type(10);
  static const int CSGetUserSkillRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserSkillRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserSkillRsp, userskills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserSkillRsp, ready_),
  };
  CSGetUserSkillRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetUserSkillRsp_descriptor_,
      CSGetUserSkillRsp::default_instance_,
      CSGetUserSkillRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserSkillRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserSkillRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetUserSkillRsp));
  CSGetUserInfoReq_descriptor_ = file->message_type(11);
  static const int CSGetUserInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserInfoReq, userid_),
  };
  CSGetUserInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetUserInfoReq_descriptor_,
      CSGetUserInfoReq::default_instance_,
      CSGetUserInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetUserInfoReq));
  CSGetUserInfoRsp_descriptor_ = file->message_type(12);
  static const int CSGetUserInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserInfoRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserInfoRsp, userinfo_),
  };
  CSGetUserInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetUserInfoRsp_descriptor_,
      CSGetUserInfoRsp::default_instance_,
      CSGetUserInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetUserInfoRsp));
  CSAddUserSkillReq_descriptor_ = file->message_type(13);
  static const int CSAddUserSkillReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAddUserSkillReq, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAddUserSkillReq, skill_level_),
  };
  CSAddUserSkillReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSAddUserSkillReq_descriptor_,
      CSAddUserSkillReq::default_instance_,
      CSAddUserSkillReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAddUserSkillReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAddUserSkillReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSAddUserSkillReq));
  CSAddUserSkillRsp_descriptor_ = file->message_type(14);
  static const int CSAddUserSkillRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAddUserSkillRsp, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAddUserSkillRsp, skill_level_),
  };
  CSAddUserSkillRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSAddUserSkillRsp_descriptor_,
      CSAddUserSkillRsp::default_instance_,
      CSAddUserSkillRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAddUserSkillRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAddUserSkillRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSAddUserSkillRsp));
  CSUserSkillDiffReq_descriptor_ = file->message_type(15);
  static const int CSUserSkillDiffReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSUserSkillDiffReq, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSUserSkillDiffReq, skill_level_),
  };
  CSUserSkillDiffReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSUserSkillDiffReq_descriptor_,
      CSUserSkillDiffReq::default_instance_,
      CSUserSkillDiffReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSUserSkillDiffReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSUserSkillDiffReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSUserSkillDiffReq));
  CSUserSkillDiffRsp_descriptor_ = file->message_type(16);
  static const int CSUserSkillDiffRsp_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSUserSkillDiffRsp, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSUserSkillDiffRsp, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSUserSkillDiffRsp, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSUserSkillDiffRsp, exploit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSUserSkillDiffRsp, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSUserSkillDiffRsp, battle_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSUserSkillDiffRsp, own_cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSUserSkillDiffRsp, share_cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSUserSkillDiffRsp, hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSUserSkillDiffRsp, continue_time_),
  };
  CSUserSkillDiffRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSUserSkillDiffRsp_descriptor_,
      CSUserSkillDiffRsp::default_instance_,
      CSUserSkillDiffRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSUserSkillDiffRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSUserSkillDiffRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSUserSkillDiffRsp));
  CSWalkReq_descriptor_ = file->message_type(17);
  static const int CSWalkReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWalkReq, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWalkReq, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWalkReq, animid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWalkReq, flip_),
  };
  CSWalkReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSWalkReq_descriptor_,
      CSWalkReq::default_instance_,
      CSWalkReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWalkReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWalkReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSWalkReq));
  CSWalkRsp_descriptor_ = file->message_type(18);
  static const int CSWalkRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWalkRsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWalkRsp, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWalkRsp, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWalkRsp, animid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWalkRsp, flip_),
  };
  CSWalkRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSWalkRsp_descriptor_,
      CSWalkRsp::default_instance_,
      CSWalkRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWalkRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWalkRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSWalkRsp));
  CSItemAttr_descriptor_ = file->message_type(19);
  static const int CSItemAttr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemAttr, attr_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemAttr, attr_basic_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemAttr, attr_intensify_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemAttr, attr_gem_value_),
  };
  CSItemAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSItemAttr_descriptor_,
      CSItemAttr::default_instance_,
      CSItemAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSItemAttr));
  CSEquipHole_descriptor_ = file->message_type(20);
  static const int CSEquipHole_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipHole, hole_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipHole, item_gem_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipHole, attr_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipHole, attr_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipHole, attr_min_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipHole, attr_max_v_),
  };
  CSEquipHole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSEquipHole_descriptor_,
      CSEquipHole::default_instance_,
      CSEquipHole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipHole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipHole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSEquipHole));
  EquipmentBase_descriptor_ = file->message_type(21);
  static const int EquipmentBase_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBase, cost_levelup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBase, incr_attr_next_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBase, equip_holes_),
  };
  EquipmentBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentBase_descriptor_,
      EquipmentBase::default_instance_,
      EquipmentBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentBase));
  EquipmentBase_Item_Attr_descriptor_ = EquipmentBase_descriptor_->nested_type(0);
  static const int EquipmentBase_Item_Attr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBase_Item_Attr, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBase_Item_Attr, value_),
  };
  EquipmentBase_Item_Attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentBase_Item_Attr_descriptor_,
      EquipmentBase_Item_Attr::default_instance_,
      EquipmentBase_Item_Attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBase_Item_Attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentBase_Item_Attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentBase_Item_Attr));
  SpiritStoneBase_descriptor_ = file->message_type(22);
  static const int SpiritStoneBase_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritStoneBase, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritStoneBase, convert_),
  };
  SpiritStoneBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpiritStoneBase_descriptor_,
      SpiritStoneBase::default_instance_,
      SpiritStoneBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritStoneBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritStoneBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpiritStoneBase));
  ManorBase_descriptor_ = file->message_type(23);
  static const int ManorBase_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManorBase, hunt_gain_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManorBase, pick_gain_exp_),
  };
  ManorBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManorBase_descriptor_,
      ManorBase::default_instance_,
      ManorBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManorBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManorBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManorBase));
  CSItemInfo_descriptor_ = file->message_type(24);
  static const int CSItemInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfo, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfo, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfo, item_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfo, item_attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfo, equip_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfo, ss_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfo, manor_info_),
  };
  CSItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSItemInfo_descriptor_,
      CSItemInfo::default_instance_,
      CSItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSItemInfo));
  CSAllItemsReq_descriptor_ = file->message_type(25);
  static const int CSAllItemsReq_offsets_[1] = {
  };
  CSAllItemsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSAllItemsReq_descriptor_,
      CSAllItemsReq::default_instance_,
      CSAllItemsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAllItemsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAllItemsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSAllItemsReq));
  CSAllItemsRsp_descriptor_ = file->message_type(26);
  static const int CSAllItemsRsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAllItemsRsp, def_bag_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAllItemsRsp, def_store_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAllItemsRsp, def_ss_bag_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAllItemsRsp, def_ss_store_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAllItemsRsp, def_equip_lvup_max_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAllItemsRsp, def_reset_gem_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAllItemsRsp, def_enter_manor_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAllItemsRsp, items_),
  };
  CSAllItemsRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSAllItemsRsp_descriptor_,
      CSAllItemsRsp::default_instance_,
      CSAllItemsRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAllItemsRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAllItemsRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSAllItemsRsp));
  CSItemAddRsp_descriptor_ = file->message_type(27);
  static const int CSItemAddRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemAddRsp, items_),
  };
  CSItemAddRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSItemAddRsp_descriptor_,
      CSItemAddRsp::default_instance_,
      CSItemAddRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemAddRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemAddRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSItemAddRsp));
  CSItemRemoveReq_descriptor_ = file->message_type(28);
  static const int CSItemRemoveReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemRemoveReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemRemoveReq, item_id_),
  };
  CSItemRemoveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSItemRemoveReq_descriptor_,
      CSItemRemoveReq::default_instance_,
      CSItemRemoveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemRemoveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemRemoveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSItemRemoveReq));
  CSItemRemoveRsp_descriptor_ = file->message_type(29);
  static const int CSItemRemoveRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemRemoveRsp, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemRemoveRsp, item_id_),
  };
  CSItemRemoveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSItemRemoveRsp_descriptor_,
      CSItemRemoveRsp::default_instance_,
      CSItemRemoveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemRemoveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemRemoveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSItemRemoveRsp));
  CSItemUseReq_descriptor_ = file->message_type(30);
  static const int CSItemUseReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemUseReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemUseReq, item_id_),
  };
  CSItemUseReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSItemUseReq_descriptor_,
      CSItemUseReq::default_instance_,
      CSItemUseReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemUseReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemUseReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSItemUseReq));
  CSItemMoveReq_descriptor_ = file->message_type(31);
  static const int CSItemMoveReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemMoveReq, pos_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemMoveReq, pos_to_),
  };
  CSItemMoveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSItemMoveReq_descriptor_,
      CSItemMoveReq::default_instance_,
      CSItemMoveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemMoveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemMoveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSItemMoveReq));
  CSItemMoveRsp_descriptor_ = file->message_type(32);
  static const int CSItemMoveRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemMoveRsp, pos_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemMoveRsp, pos_to_),
  };
  CSItemMoveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSItemMoveRsp_descriptor_,
      CSItemMoveRsp::default_instance_,
      CSItemMoveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemMoveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemMoveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSItemMoveRsp));
  CSItemUpdateRsp_descriptor_ = file->message_type(33);
  static const int CSItemUpdateRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemUpdateRsp, item_),
  };
  CSItemUpdateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSItemUpdateRsp_descriptor_,
      CSItemUpdateRsp::default_instance_,
      CSItemUpdateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemUpdateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemUpdateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSItemUpdateRsp));
  CSItemOrderReq_descriptor_ = file->message_type(34);
  static const int CSItemOrderReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemOrderReq, target_),
  };
  CSItemOrderReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSItemOrderReq_descriptor_,
      CSItemOrderReq::default_instance_,
      CSItemOrderReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemOrderReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSItemOrderReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSItemOrderReq));
  CSInstanceReq_descriptor_ = file->message_type(35);
  static const int CSInstanceReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSInstanceReq, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSInstanceReq, end_),
  };
  CSInstanceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSInstanceReq_descriptor_,
      CSInstanceReq::default_instance_,
      CSInstanceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSInstanceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSInstanceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSInstanceReq));
  CSInstanceRsp_descriptor_ = file->message_type(36);
  static const int CSInstanceRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSInstanceRsp, instances_),
  };
  CSInstanceRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSInstanceRsp_descriptor_,
      CSInstanceRsp::default_instance_,
      CSInstanceRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSInstanceRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSInstanceRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSInstanceRsp));
  CSInstanceRsp_CSInstance_descriptor_ = CSInstanceRsp_descriptor_->nested_type(0);
  static const int CSInstanceRsp_CSInstance_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSInstanceRsp_CSInstance, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSInstanceRsp_CSInstance, activate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSInstanceRsp_CSInstance, star_),
  };
  CSInstanceRsp_CSInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSInstanceRsp_CSInstance_descriptor_,
      CSInstanceRsp_CSInstance::default_instance_,
      CSInstanceRsp_CSInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSInstanceRsp_CSInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSInstanceRsp_CSInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSInstanceRsp_CSInstance));
  CSReward_descriptor_ = file->message_type(37);
  static const int CSReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReward, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReward, add_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReward, add_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReward, add_exploit_),
  };
  CSReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSReward_descriptor_,
      CSReward::default_instance_,
      CSReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSReward));
  CSReward_RewardInfo_descriptor_ = CSReward_descriptor_->nested_type(0);
  static const int CSReward_RewardInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReward_RewardInfo, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReward_RewardInfo, item_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReward_RewardInfo, item_num_),
  };
  CSReward_RewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSReward_RewardInfo_descriptor_,
      CSReward_RewardInfo::default_instance_,
      CSReward_RewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReward_RewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSReward_RewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSReward_RewardInfo));
  CSLevelUpRsp_descriptor_ = file->message_type(38);
  static const int CSLevelUpRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLevelUpRsp, level_),
  };
  CSLevelUpRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSLevelUpRsp_descriptor_,
      CSLevelUpRsp::default_instance_,
      CSLevelUpRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLevelUpRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLevelUpRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSLevelUpRsp));
  CSBasicUserBattleInfoRsp_descriptor_ = file->message_type(39);
  static const int CSBasicUserBattleInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBasicUserBattleInfoRsp, battle_info_),
  };
  CSBasicUserBattleInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBasicUserBattleInfoRsp_descriptor_,
      CSBasicUserBattleInfoRsp::default_instance_,
      CSBasicUserBattleInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBasicUserBattleInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBasicUserBattleInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBasicUserBattleInfoRsp));
  CSSearchSpiritStoneReq_descriptor_ = file->message_type(40);
  static const int CSSearchSpiritStoneReq_offsets_[1] = {
  };
  CSSearchSpiritStoneReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSearchSpiritStoneReq_descriptor_,
      CSSearchSpiritStoneReq::default_instance_,
      CSSearchSpiritStoneReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSearchSpiritStoneReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSearchSpiritStoneReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSearchSpiritStoneReq));
  CSSearchSpiritStoneRsp_descriptor_ = file->message_type(41);
  static const int CSSearchSpiritStoneRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSearchSpiritStoneRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSearchSpiritStoneRsp, cost_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSearchSpiritStoneRsp, mon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSearchSpiritStoneRsp, item_id_),
  };
  CSSearchSpiritStoneRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSearchSpiritStoneRsp_descriptor_,
      CSSearchSpiritStoneRsp::default_instance_,
      CSSearchSpiritStoneRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSearchSpiritStoneRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSearchSpiritStoneRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSearchSpiritStoneRsp));
  CSSpiritStoneMoveBagReq_descriptor_ = file->message_type(42);
  static const int CSSpiritStoneMoveBagReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSpiritStoneMoveBagReq, pos_),
  };
  CSSpiritStoneMoveBagReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSpiritStoneMoveBagReq_descriptor_,
      CSSpiritStoneMoveBagReq::default_instance_,
      CSSpiritStoneMoveBagReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSpiritStoneMoveBagReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSpiritStoneMoveBagReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSpiritStoneMoveBagReq));
  CSSpiritStoneMoveBagRsp_descriptor_ = file->message_type(43);
  static const int CSSpiritStoneMoveBagRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSpiritStoneMoveBagRsp, ret_),
  };
  CSSpiritStoneMoveBagRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSpiritStoneMoveBagRsp_descriptor_,
      CSSpiritStoneMoveBagRsp::default_instance_,
      CSSpiritStoneMoveBagRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSpiritStoneMoveBagRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSpiritStoneMoveBagRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSpiritStoneMoveBagRsp));
  CSSpiritStoneLevelUpReq_descriptor_ = file->message_type(44);
  static const int CSSpiritStoneLevelUpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSpiritStoneLevelUpReq, pos_),
  };
  CSSpiritStoneLevelUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSpiritStoneLevelUpReq_descriptor_,
      CSSpiritStoneLevelUpReq::default_instance_,
      CSSpiritStoneLevelUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSpiritStoneLevelUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSpiritStoneLevelUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSpiritStoneLevelUpReq));
  CSSpiritStoneLevelUpRsp_descriptor_ = file->message_type(45);
  static const int CSSpiritStoneLevelUpRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSpiritStoneLevelUpRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSpiritStoneLevelUpRsp, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSpiritStoneLevelUpRsp, cost_sp_),
  };
  CSSpiritStoneLevelUpRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSpiritStoneLevelUpRsp_descriptor_,
      CSSpiritStoneLevelUpRsp::default_instance_,
      CSSpiritStoneLevelUpRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSpiritStoneLevelUpRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSpiritStoneLevelUpRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSpiritStoneLevelUpRsp));
  CSSpiritStoneToSPReq_descriptor_ = file->message_type(46);
  static const int CSSpiritStoneToSPReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSpiritStoneToSPReq, pos_),
  };
  CSSpiritStoneToSPReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSpiritStoneToSPReq_descriptor_,
      CSSpiritStoneToSPReq::default_instance_,
      CSSpiritStoneToSPReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSpiritStoneToSPReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSpiritStoneToSPReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSpiritStoneToSPReq));
  CSSpiritStoneToSPRsp_descriptor_ = file->message_type(47);
  static const int CSSpiritStoneToSPRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSpiritStoneToSPRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSpiritStoneToSPRsp, sp_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSpiritStoneToSPRsp, sp_value_),
  };
  CSSpiritStoneToSPRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSpiritStoneToSPRsp_descriptor_,
      CSSpiritStoneToSPRsp::default_instance_,
      CSSpiritStoneToSPRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSpiritStoneToSPRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSpiritStoneToSPRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSpiritStoneToSPRsp));
  CSGetExchangeSSInfoReq_descriptor_ = file->message_type(48);
  static const int CSGetExchangeSSInfoReq_offsets_[1] = {
  };
  CSGetExchangeSSInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetExchangeSSInfoReq_descriptor_,
      CSGetExchangeSSInfoReq::default_instance_,
      CSGetExchangeSSInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetExchangeSSInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetExchangeSSInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetExchangeSSInfoReq));
  ExchangeSSInfo_descriptor_ = file->message_type(49);
  static const int ExchangeSSInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeSSInfo, ss_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeSSInfo, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeSSInfo, convert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeSSInfo, need_chip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeSSInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeSSInfo, value_),
  };
  ExchangeSSInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeSSInfo_descriptor_,
      ExchangeSSInfo::default_instance_,
      ExchangeSSInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeSSInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeSSInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeSSInfo));
  CSGetExchangeSSInfoRsp_descriptor_ = file->message_type(50);
  static const int CSGetExchangeSSInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetExchangeSSInfoRsp, ss_list_),
  };
  CSGetExchangeSSInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetExchangeSSInfoRsp_descriptor_,
      CSGetExchangeSSInfoRsp::default_instance_,
      CSGetExchangeSSInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetExchangeSSInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetExchangeSSInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetExchangeSSInfoRsp));
  CSAddManorReq_descriptor_ = file->message_type(51);
  static const int CSAddManorReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAddManorReq, manor_id_),
  };
  CSAddManorReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSAddManorReq_descriptor_,
      CSAddManorReq::default_instance_,
      CSAddManorReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAddManorReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAddManorReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSAddManorReq));
  CSAddManorRsp_descriptor_ = file->message_type(52);
  static const int CSAddManorRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAddManorRsp, pos_),
  };
  CSAddManorRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSAddManorRsp_descriptor_,
      CSAddManorRsp::default_instance_,
      CSAddManorRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAddManorRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAddManorRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSAddManorRsp));
  CSWarmSportLvUpReq_descriptor_ = file->message_type(53);
  static const int CSWarmSportLvUpReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWarmSportLvUpReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWarmSportLvUpReq, to_max_lv_),
  };
  CSWarmSportLvUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSWarmSportLvUpReq_descriptor_,
      CSWarmSportLvUpReq::default_instance_,
      CSWarmSportLvUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWarmSportLvUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWarmSportLvUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSWarmSportLvUpReq));
  CSWarmSportLvUpRsp_descriptor_ = file->message_type(54);
  static const int CSWarmSportLvUpRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWarmSportLvUpRsp, pos_),
  };
  CSWarmSportLvUpRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSWarmSportLvUpRsp_descriptor_,
      CSWarmSportLvUpRsp::default_instance_,
      CSWarmSportLvUpRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWarmSportLvUpRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWarmSportLvUpRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSWarmSportLvUpRsp));
  CSManorOptReq_descriptor_ = file->message_type(55);
  static const int CSManorOptReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSManorOptReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSManorOptReq, opt_),
  };
  CSManorOptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSManorOptReq_descriptor_,
      CSManorOptReq::default_instance_,
      CSManorOptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSManorOptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSManorOptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSManorOptReq));
  CSManorOptRsp_descriptor_ = file->message_type(56);
  static const int CSManorOptRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSManorOptRsp, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSManorOptRsp, opt_),
  };
  CSManorOptRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSManorOptRsp_descriptor_,
      CSManorOptRsp::default_instance_,
      CSManorOptRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSManorOptRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSManorOptRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSManorOptRsp));
  CSMonListReq_descriptor_ = file->message_type(57);
  static const int CSMonListReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonListReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonListReq, name_),
  };
  CSMonListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonListReq_descriptor_,
      CSMonListReq::default_instance_,
      CSMonListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonListReq));
  MonInfo_descriptor_ = file->message_type(58);
  static const int MonInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonInfo, mon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonInfo, mon_status_),
  };
  MonInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonInfo_descriptor_,
      MonInfo::default_instance_,
      MonInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonInfo));
  CSMonListRsp_descriptor_ = file->message_type(59);
  static const int CSMonListRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonListRsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonListRsp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonListRsp, mon_info_),
  };
  CSMonListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonListRsp_descriptor_,
      CSMonListRsp::default_instance_,
      CSMonListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonListRsp));
  CSSetMonStatusReq_descriptor_ = file->message_type(60);
  static const int CSSetMonStatusReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSetMonStatusReq, mon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSetMonStatusReq, mon_status_),
  };
  CSSetMonStatusReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSetMonStatusReq_descriptor_,
      CSSetMonStatusReq::default_instance_,
      CSSetMonStatusReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSetMonStatusReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSetMonStatusReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSetMonStatusReq));
  CSSetMonStatusRsp_descriptor_ = file->message_type(61);
  static const int CSSetMonStatusRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSetMonStatusRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSetMonStatusRsp, mon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSetMonStatusRsp, mon_status_),
  };
  CSSetMonStatusRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSetMonStatusRsp_descriptor_,
      CSSetMonStatusRsp::default_instance_,
      CSSetMonStatusRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSetMonStatusRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSetMonStatusRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSetMonStatusRsp));
  CSPVPQueryRoomReq_descriptor_ = file->message_type(62);
  static const int CSPVPQueryRoomReq_offsets_[1] = {
  };
  CSPVPQueryRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVPQueryRoomReq_descriptor_,
      CSPVPQueryRoomReq::default_instance_,
      CSPVPQueryRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPQueryRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPQueryRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVPQueryRoomReq));
  PVPRoomBase_descriptor_ = file->message_type(63);
  static const int PVPRoomBase_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomBase, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomBase, top_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomBase, current_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomBase, max_online_),
  };
  PVPRoomBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVPRoomBase_descriptor_,
      PVPRoomBase::default_instance_,
      PVPRoomBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVPRoomBase));
  CSPVPQueryRoomRsp_descriptor_ = file->message_type(64);
  static const int CSPVPQueryRoomRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPQueryRoomRsp, rooms_),
  };
  CSPVPQueryRoomRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVPQueryRoomRsp_descriptor_,
      CSPVPQueryRoomRsp::default_instance_,
      CSPVPQueryRoomRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPQueryRoomRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPQueryRoomRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVPQueryRoomRsp));
  CSPVPBaseInfoRsp_descriptor_ = file->message_type(65);
  static const int CSPVPBaseInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPBaseInfoRsp, winning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPBaseInfoRsp, remain_times_),
  };
  CSPVPBaseInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVPBaseInfoRsp_descriptor_,
      CSPVPBaseInfoRsp::default_instance_,
      CSPVPBaseInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPBaseInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPBaseInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVPBaseInfoRsp));
  CSPVPCreateRoomReq_descriptor_ = file->message_type(66);
  static const int CSPVPCreateRoomReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPCreateRoomReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPCreateRoomReq, top_level_),
  };
  CSPVPCreateRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVPCreateRoomReq_descriptor_,
      CSPVPCreateRoomReq::default_instance_,
      CSPVPCreateRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPCreateRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPCreateRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVPCreateRoomReq));
  CSPVPJoinRoomReq_descriptor_ = file->message_type(67);
  static const int CSPVPJoinRoomReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPJoinRoomReq, room_id_),
  };
  CSPVPJoinRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVPJoinRoomReq_descriptor_,
      CSPVPJoinRoomReq::default_instance_,
      CSPVPJoinRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPJoinRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPJoinRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVPJoinRoomReq));
  PVPSeatBase_descriptor_ = file->message_type(68);
  static const int PVPSeatBase_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSeatBase, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSeatBase, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSeatBase, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSeatBase, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSeatBase, ready_),
  };
  PVPSeatBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVPSeatBase_descriptor_,
      PVPSeatBase::default_instance_,
      PVPSeatBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSeatBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPSeatBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVPSeatBase));
  CSPVPJoinRoomRsp_descriptor_ = file->message_type(69);
  static const int CSPVPJoinRoomRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPJoinRoomRsp, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPJoinRoomRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPJoinRoomRsp, top_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPJoinRoomRsp, seats_),
  };
  CSPVPJoinRoomRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVPJoinRoomRsp_descriptor_,
      CSPVPJoinRoomRsp::default_instance_,
      CSPVPJoinRoomRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPJoinRoomRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPJoinRoomRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVPJoinRoomRsp));
  CSPVPExitRoomReq_descriptor_ = file->message_type(70);
  static const int CSPVPExitRoomReq_offsets_[1] = {
  };
  CSPVPExitRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVPExitRoomReq_descriptor_,
      CSPVPExitRoomReq::default_instance_,
      CSPVPExitRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPExitRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPExitRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVPExitRoomReq));
  CSPVPExitRoomRsp_descriptor_ = file->message_type(71);
  static const int CSPVPExitRoomRsp_offsets_[1] = {
  };
  CSPVPExitRoomRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVPExitRoomRsp_descriptor_,
      CSPVPExitRoomRsp::default_instance_,
      CSPVPExitRoomRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPExitRoomRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPExitRoomRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVPExitRoomRsp));
  CSPVPCloseRoomRsp_descriptor_ = file->message_type(72);
  static const int CSPVPCloseRoomRsp_offsets_[1] = {
  };
  CSPVPCloseRoomRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVPCloseRoomRsp_descriptor_,
      CSPVPCloseRoomRsp::default_instance_,
      CSPVPCloseRoomRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPCloseRoomRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPCloseRoomRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVPCloseRoomRsp));
  CSPVPChangeSeatReq_descriptor_ = file->message_type(73);
  static const int CSPVPChangeSeatReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPChangeSeatReq, seat_),
  };
  CSPVPChangeSeatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVPChangeSeatReq_descriptor_,
      CSPVPChangeSeatReq::default_instance_,
      CSPVPChangeSeatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPChangeSeatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPChangeSeatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVPChangeSeatReq));
  CSPVPReadyReq_descriptor_ = file->message_type(74);
  static const int CSPVPReadyReq_offsets_[1] = {
  };
  CSPVPReadyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVPReadyReq_descriptor_,
      CSPVPReadyReq::default_instance_,
      CSPVPReadyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPReadyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPReadyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVPReadyReq));
  CSPVPCancelReadyReq_descriptor_ = file->message_type(75);
  static const int CSPVPCancelReadyReq_offsets_[1] = {
  };
  CSPVPCancelReadyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVPCancelReadyReq_descriptor_,
      CSPVPCancelReadyReq::default_instance_,
      CSPVPCancelReadyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPCancelReadyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPCancelReadyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVPCancelReadyReq));
  CSPVPKickoffReq_descriptor_ = file->message_type(76);
  static const int CSPVPKickoffReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPKickoffReq, seat_),
  };
  CSPVPKickoffReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVPKickoffReq_descriptor_,
      CSPVPKickoffReq::default_instance_,
      CSPVPKickoffReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPKickoffReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPKickoffReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVPKickoffReq));
  CSPVPKickoffRsp_descriptor_ = file->message_type(77);
  static const int CSPVPKickoffRsp_offsets_[1] = {
  };
  CSPVPKickoffRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVPKickoffRsp_descriptor_,
      CSPVPKickoffRsp::default_instance_,
      CSPVPKickoffRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPKickoffRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPKickoffRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVPKickoffRsp));
  CSPVPStartReq_descriptor_ = file->message_type(78);
  static const int CSPVPStartReq_offsets_[1] = {
  };
  CSPVPStartReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVPStartReq_descriptor_,
      CSPVPStartReq::default_instance_,
      CSPVPStartReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPStartReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPStartReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVPStartReq));
  CSPVPStartRsp_descriptor_ = file->message_type(79);
  static const int CSPVPStartRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPStartRsp, mapid_),
  };
  CSPVPStartRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVPStartRsp_descriptor_,
      CSPVPStartRsp::default_instance_,
      CSPVPStartRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPStartRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVPStartRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVPStartRsp));
  CSPPVEBattleReq_descriptor_ = file->message_type(80);
  static const int CSPPVEBattleReq_offsets_[1] = {
  };
  CSPPVEBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPPVEBattleReq_descriptor_,
      CSPPVEBattleReq::default_instance_,
      CSPPVEBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPPVEBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPPVEBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPPVEBattleReq));
  CSPPVEBattleRsp_descriptor_ = file->message_type(81);
  static const int CSPPVEBattleRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPPVEBattleRsp, ids_),
  };
  CSPPVEBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPPVEBattleRsp_descriptor_,
      CSPPVEBattleRsp::default_instance_,
      CSPPVEBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPPVEBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPPVEBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPPVEBattleRsp));
  CSPVEQueryRoomReq_descriptor_ = file->message_type(82);
  static const int CSPVEQueryRoomReq_offsets_[1] = {
  };
  CSPVEQueryRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVEQueryRoomReq_descriptor_,
      CSPVEQueryRoomReq::default_instance_,
      CSPVEQueryRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEQueryRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEQueryRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVEQueryRoomReq));
  PVERoomBase_descriptor_ = file->message_type(83);
  static const int PVERoomBase_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVERoomBase, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVERoomBase, top_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVERoomBase, current_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVERoomBase, max_online_),
  };
  PVERoomBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVERoomBase_descriptor_,
      PVERoomBase::default_instance_,
      PVERoomBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVERoomBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVERoomBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVERoomBase));
  CSPVEQueryRoomRsp_descriptor_ = file->message_type(84);
  static const int CSPVEQueryRoomRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEQueryRoomRsp, rooms_),
  };
  CSPVEQueryRoomRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVEQueryRoomRsp_descriptor_,
      CSPVEQueryRoomRsp::default_instance_,
      CSPVEQueryRoomRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEQueryRoomRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEQueryRoomRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVEQueryRoomRsp));
  CSPVEBaseInfoRsp_descriptor_ = file->message_type(85);
  static const int CSPVEBaseInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEBaseInfoRsp, countdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEBaseInfoRsp, remain_times_),
  };
  CSPVEBaseInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVEBaseInfoRsp_descriptor_,
      CSPVEBaseInfoRsp::default_instance_,
      CSPVEBaseInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEBaseInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEBaseInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVEBaseInfoRsp));
  CSPVECreateRoomReq_descriptor_ = file->message_type(86);
  static const int CSPVECreateRoomReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVECreateRoomReq, top_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVECreateRoomReq, battle_id_),
  };
  CSPVECreateRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVECreateRoomReq_descriptor_,
      CSPVECreateRoomReq::default_instance_,
      CSPVECreateRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVECreateRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVECreateRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVECreateRoomReq));
  CSPVEJoinRoomReq_descriptor_ = file->message_type(87);
  static const int CSPVEJoinRoomReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEJoinRoomReq, room_id_),
  };
  CSPVEJoinRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVEJoinRoomReq_descriptor_,
      CSPVEJoinRoomReq::default_instance_,
      CSPVEJoinRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEJoinRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEJoinRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVEJoinRoomReq));
  CSPVEJoinRoomFailureRsp_descriptor_ = file->message_type(88);
  static const int CSPVEJoinRoomFailureRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEJoinRoomFailureRsp, errcode_),
  };
  CSPVEJoinRoomFailureRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVEJoinRoomFailureRsp_descriptor_,
      CSPVEJoinRoomFailureRsp::default_instance_,
      CSPVEJoinRoomFailureRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEJoinRoomFailureRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEJoinRoomFailureRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVEJoinRoomFailureRsp));
  PVESeatBase_descriptor_ = file->message_type(89);
  static const int PVESeatBase_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVESeatBase, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVESeatBase, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVESeatBase, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVESeatBase, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVESeatBase, ready_),
  };
  PVESeatBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVESeatBase_descriptor_,
      PVESeatBase::default_instance_,
      PVESeatBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVESeatBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVESeatBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVESeatBase));
  CSPVEJoinRoomRsp_descriptor_ = file->message_type(90);
  static const int CSPVEJoinRoomRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEJoinRoomRsp, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEJoinRoomRsp, top_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEJoinRoomRsp, seats_),
  };
  CSPVEJoinRoomRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVEJoinRoomRsp_descriptor_,
      CSPVEJoinRoomRsp::default_instance_,
      CSPVEJoinRoomRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEJoinRoomRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEJoinRoomRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVEJoinRoomRsp));
  CSPVEExitRoomReq_descriptor_ = file->message_type(91);
  static const int CSPVEExitRoomReq_offsets_[1] = {
  };
  CSPVEExitRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVEExitRoomReq_descriptor_,
      CSPVEExitRoomReq::default_instance_,
      CSPVEExitRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEExitRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEExitRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVEExitRoomReq));
  CSPVEExitRoomRsp_descriptor_ = file->message_type(92);
  static const int CSPVEExitRoomRsp_offsets_[1] = {
  };
  CSPVEExitRoomRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVEExitRoomRsp_descriptor_,
      CSPVEExitRoomRsp::default_instance_,
      CSPVEExitRoomRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEExitRoomRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEExitRoomRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVEExitRoomRsp));
  CSPVECloseRoomRsp_descriptor_ = file->message_type(93);
  static const int CSPVECloseRoomRsp_offsets_[1] = {
  };
  CSPVECloseRoomRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVECloseRoomRsp_descriptor_,
      CSPVECloseRoomRsp::default_instance_,
      CSPVECloseRoomRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVECloseRoomRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVECloseRoomRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVECloseRoomRsp));
  CSPVEReadyReq_descriptor_ = file->message_type(94);
  static const int CSPVEReadyReq_offsets_[1] = {
  };
  CSPVEReadyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVEReadyReq_descriptor_,
      CSPVEReadyReq::default_instance_,
      CSPVEReadyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEReadyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEReadyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVEReadyReq));
  CSPVECancelReadyReq_descriptor_ = file->message_type(95);
  static const int CSPVECancelReadyReq_offsets_[1] = {
  };
  CSPVECancelReadyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVECancelReadyReq_descriptor_,
      CSPVECancelReadyReq::default_instance_,
      CSPVECancelReadyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVECancelReadyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVECancelReadyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVECancelReadyReq));
  CSPVEKickoffReq_descriptor_ = file->message_type(96);
  static const int CSPVEKickoffReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEKickoffReq, seat_),
  };
  CSPVEKickoffReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVEKickoffReq_descriptor_,
      CSPVEKickoffReq::default_instance_,
      CSPVEKickoffReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEKickoffReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEKickoffReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVEKickoffReq));
  CSPVEKickoffRsp_descriptor_ = file->message_type(97);
  static const int CSPVEKickoffRsp_offsets_[1] = {
  };
  CSPVEKickoffRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVEKickoffRsp_descriptor_,
      CSPVEKickoffRsp::default_instance_,
      CSPVEKickoffRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEKickoffRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEKickoffRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVEKickoffRsp));
  CSPVEStartReq_descriptor_ = file->message_type(98);
  static const int CSPVEStartReq_offsets_[1] = {
  };
  CSPVEStartReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVEStartReq_descriptor_,
      CSPVEStartReq::default_instance_,
      CSPVEStartReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEStartReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEStartReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVEStartReq));
  CSPVEStartRsp_descriptor_ = file->message_type(99);
  static const int CSPVEStartRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEStartRsp, mapid_),
  };
  CSPVEStartRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVEStartRsp_descriptor_,
      CSPVEStartRsp::default_instance_,
      CSPVEStartRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEStartRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVEStartRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVEStartRsp));
  CSPVAIReq_descriptor_ = file->message_type(100);
  static const int CSPVAIReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIReq, userid_),
  };
  CSPVAIReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVAIReq_descriptor_,
      CSPVAIReq::default_instance_,
      CSPVAIReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVAIReq));
  CSPVAIInfoReq_descriptor_ = file->message_type(101);
  static const int CSPVAIInfoReq_offsets_[1] = {
  };
  CSPVAIInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVAIInfoReq_descriptor_,
      CSPVAIInfoReq::default_instance_,
      CSPVAIInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVAIInfoReq));
  CSPVAIInfoRsq_descriptor_ = file->message_type(102);
  static const int CSPVAIInfoRsq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIInfoRsq, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIInfoRsq, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIInfoRsq, logs_),
  };
  CSPVAIInfoRsq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVAIInfoRsq_descriptor_,
      CSPVAIInfoRsq::default_instance_,
      CSPVAIInfoRsq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIInfoRsq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIInfoRsq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVAIInfoRsq));
  CSPVAIInfoRsq_CSPVAIInfo_descriptor_ = CSPVAIInfoRsq_descriptor_->nested_type(0);
  static const int CSPVAIInfoRsq_CSPVAIInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIInfoRsq_CSPVAIInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIInfoRsq_CSPVAIInfo, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIInfoRsq_CSPVAIInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIInfoRsq_CSPVAIInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIInfoRsq_CSPVAIInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIInfoRsq_CSPVAIInfo, lv_),
  };
  CSPVAIInfoRsq_CSPVAIInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVAIInfoRsq_CSPVAIInfo_descriptor_,
      CSPVAIInfoRsq_CSPVAIInfo::default_instance_,
      CSPVAIInfoRsq_CSPVAIInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIInfoRsq_CSPVAIInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIInfoRsq_CSPVAIInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVAIInfoRsq_CSPVAIInfo));
  CSPVAIInfoRsq_CSPVAILog_descriptor_ = CSPVAIInfoRsq_descriptor_->nested_type(1);
  static const int CSPVAIInfoRsq_CSPVAILog_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIInfoRsq_CSPVAILog, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIInfoRsq_CSPVAILog, direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIInfoRsq_CSPVAILog, win_),
  };
  CSPVAIInfoRsq_CSPVAILog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPVAIInfoRsq_CSPVAILog_descriptor_,
      CSPVAIInfoRsq_CSPVAILog::default_instance_,
      CSPVAIInfoRsq_CSPVAILog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIInfoRsq_CSPVAILog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPVAIInfoRsq_CSPVAILog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPVAIInfoRsq_CSPVAILog));
  CSGetEquipLvUpCDReq_descriptor_ = file->message_type(103);
  static const int CSGetEquipLvUpCDReq_offsets_[1] = {
  };
  CSGetEquipLvUpCDReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetEquipLvUpCDReq_descriptor_,
      CSGetEquipLvUpCDReq::default_instance_,
      CSGetEquipLvUpCDReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetEquipLvUpCDReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetEquipLvUpCDReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetEquipLvUpCDReq));
  CSGetEquipLvUpCDRsp_descriptor_ = file->message_type(104);
  static const int CSGetEquipLvUpCDRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetEquipLvUpCDRsp, cold_time_),
  };
  CSGetEquipLvUpCDRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetEquipLvUpCDRsp_descriptor_,
      CSGetEquipLvUpCDRsp::default_instance_,
      CSGetEquipLvUpCDRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetEquipLvUpCDRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetEquipLvUpCDRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetEquipLvUpCDRsp));
  CSEquipInlayGemReq_descriptor_ = file->message_type(105);
  static const int CSEquipInlayGemReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipInlayGemReq, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipInlayGemReq, gem_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipInlayGemReq, hole_index_),
  };
  CSEquipInlayGemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSEquipInlayGemReq_descriptor_,
      CSEquipInlayGemReq::default_instance_,
      CSEquipInlayGemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipInlayGemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipInlayGemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSEquipInlayGemReq));
  CSEquipInlayGemRsp_descriptor_ = file->message_type(106);
  static const int CSEquipInlayGemRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipInlayGemRsp, ret_),
  };
  CSEquipInlayGemRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSEquipInlayGemRsp_descriptor_,
      CSEquipInlayGemRsp::default_instance_,
      CSEquipInlayGemRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipInlayGemRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipInlayGemRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSEquipInlayGemRsp));
  CSResetGemAttrReq_descriptor_ = file->message_type(107);
  static const int CSResetGemAttrReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSResetGemAttrReq, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSResetGemAttrReq, holes_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSResetGemAttrReq, cost_attr_key_),
  };
  CSResetGemAttrReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSResetGemAttrReq_descriptor_,
      CSResetGemAttrReq::default_instance_,
      CSResetGemAttrReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSResetGemAttrReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSResetGemAttrReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSResetGemAttrReq));
  CSResetGemAttrRsp_descriptor_ = file->message_type(108);
  static const int CSResetGemAttrRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSResetGemAttrRsp, ret_),
  };
  CSResetGemAttrRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSResetGemAttrRsp_descriptor_,
      CSResetGemAttrRsp::default_instance_,
      CSResetGemAttrRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSResetGemAttrRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSResetGemAttrRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSResetGemAttrRsp));
  CSEquipmentStrengthReq_descriptor_ = file->message_type(109);
  static const int CSEquipmentStrengthReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipmentStrengthReq, pos_),
  };
  CSEquipmentStrengthReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSEquipmentStrengthReq_descriptor_,
      CSEquipmentStrengthReq::default_instance_,
      CSEquipmentStrengthReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipmentStrengthReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipmentStrengthReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSEquipmentStrengthReq));
  CSEquipmentStrengthRsp_descriptor_ = file->message_type(110);
  static const int CSEquipmentStrengthRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipmentStrengthRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipmentStrengthRsp, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipmentStrengthRsp, cold_time_),
  };
  CSEquipmentStrengthRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSEquipmentStrengthRsp_descriptor_,
      CSEquipmentStrengthRsp::default_instance_,
      CSEquipmentStrengthRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipmentStrengthRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipmentStrengthRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSEquipmentStrengthRsp));
  CSEquipmentComposeReq_descriptor_ = file->message_type(111);
  static const int CSEquipmentComposeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipmentComposeReq, exchange_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipmentComposeReq, from_item_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipmentComposeReq, multi_),
  };
  CSEquipmentComposeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSEquipmentComposeReq_descriptor_,
      CSEquipmentComposeReq::default_instance_,
      CSEquipmentComposeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipmentComposeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipmentComposeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSEquipmentComposeReq));
  CSEquipmentComposeRsp_descriptor_ = file->message_type(112);
  static const int CSEquipmentComposeRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipmentComposeRsp, exchange_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipmentComposeRsp, result_),
  };
  CSEquipmentComposeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSEquipmentComposeRsp_descriptor_,
      CSEquipmentComposeRsp::default_instance_,
      CSEquipmentComposeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipmentComposeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEquipmentComposeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSEquipmentComposeRsp));
  CSTaskInfoReq_descriptor_ = file->message_type(113);
  static const int CSTaskInfoReq_offsets_[1] = {
  };
  CSTaskInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSTaskInfoReq_descriptor_,
      CSTaskInfoReq::default_instance_,
      CSTaskInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSTaskInfoReq));
  TaskInfo_descriptor_ = file->message_type(114);
  static const int TaskInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, step_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, step_value_),
  };
  TaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskInfo_descriptor_,
      TaskInfo::default_instance_,
      TaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskInfo));
  CSTaskInfoRsp_descriptor_ = file->message_type(115);
  static const int CSTaskInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskInfoRsp, acceptable_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskInfoRsp, accept_tasks_),
  };
  CSTaskInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSTaskInfoRsp_descriptor_,
      CSTaskInfoRsp::default_instance_,
      CSTaskInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSTaskInfoRsp));
  CSTaskDoStepReq_descriptor_ = file->message_type(116);
  static const int CSTaskDoStepReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskDoStepReq, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskDoStepReq, step_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskDoStepReq, step_value_),
  };
  CSTaskDoStepReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSTaskDoStepReq_descriptor_,
      CSTaskDoStepReq::default_instance_,
      CSTaskDoStepReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskDoStepReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskDoStepReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSTaskDoStepReq));
  CSTaskDoStepRsp_descriptor_ = file->message_type(117);
  static const int CSTaskDoStepRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskDoStepRsp, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskDoStepRsp, step_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskDoStepRsp, step_value_),
  };
  CSTaskDoStepRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSTaskDoStepRsp_descriptor_,
      CSTaskDoStepRsp::default_instance_,
      CSTaskDoStepRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskDoStepRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskDoStepRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSTaskDoStepRsp));
  CSTaskLogReq_descriptor_ = file->message_type(118);
  static const int CSTaskLogReq_offsets_[1] = {
  };
  CSTaskLogReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSTaskLogReq_descriptor_,
      CSTaskLogReq::default_instance_,
      CSTaskLogReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskLogReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskLogReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSTaskLogReq));
  CSTaskLogRsp_descriptor_ = file->message_type(119);
  static const int CSTaskLogRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskLogRsp, tasks_),
  };
  CSTaskLogRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSTaskLogRsp_descriptor_,
      CSTaskLogRsp::default_instance_,
      CSTaskLogRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskLogRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTaskLogRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSTaskLogRsp));
  CSAttributesSetReq_descriptor_ = file->message_type(120);
  static const int CSAttributesSetReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttributesSetReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttributesSetReq, value_),
  };
  CSAttributesSetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSAttributesSetReq_descriptor_,
      CSAttributesSetReq::default_instance_,
      CSAttributesSetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttributesSetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttributesSetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSAttributesSetReq));
  CSAttributesReq_descriptor_ = file->message_type(121);
  static const int CSAttributesReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttributesReq, keys_),
  };
  CSAttributesReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSAttributesReq_descriptor_,
      CSAttributesReq::default_instance_,
      CSAttributesReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttributesReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttributesReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSAttributesReq));
  CSAttributesRsp_descriptor_ = file->message_type(122);
  static const int CSAttributesRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttributesRsp, values_),
  };
  CSAttributesRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSAttributesRsp_descriptor_,
      CSAttributesRsp::default_instance_,
      CSAttributesRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttributesRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttributesRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSAttributesRsp));
  CSAttributesRsp_KeyValue_descriptor_ = CSAttributesRsp_descriptor_->nested_type(0);
  static const int CSAttributesRsp_KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttributesRsp_KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttributesRsp_KeyValue, value_),
  };
  CSAttributesRsp_KeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSAttributesRsp_KeyValue_descriptor_,
      CSAttributesRsp_KeyValue::default_instance_,
      CSAttributesRsp_KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttributesRsp_KeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttributesRsp_KeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSAttributesRsp_KeyValue));
  CSOnceSetReq_descriptor_ = file->message_type(123);
  static const int CSOnceSetReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOnceSetReq, index_),
  };
  CSOnceSetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOnceSetReq_descriptor_,
      CSOnceSetReq::default_instance_,
      CSOnceSetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOnceSetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOnceSetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOnceSetReq));
  CSOnceReq_descriptor_ = file->message_type(124);
  static const int CSOnceReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOnceReq, indexs_),
  };
  CSOnceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOnceReq_descriptor_,
      CSOnceReq::default_instance_,
      CSOnceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOnceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOnceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOnceReq));
  CSOnceRsp_descriptor_ = file->message_type(125);
  static const int CSOnceRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOnceRsp, values_),
  };
  CSOnceRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOnceRsp_descriptor_,
      CSOnceRsp::default_instance_,
      CSOnceRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOnceRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOnceRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOnceRsp));
  CSOnceRsp_Once_descriptor_ = CSOnceRsp_descriptor_->nested_type(0);
  static const int CSOnceRsp_Once_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOnceRsp_Once, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOnceRsp_Once, is_set_),
  };
  CSOnceRsp_Once_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOnceRsp_Once_descriptor_,
      CSOnceRsp_Once::default_instance_,
      CSOnceRsp_Once_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOnceRsp_Once, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOnceRsp_Once, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOnceRsp_Once));
  CSTrainInfoReq_descriptor_ = file->message_type(126);
  static const int CSTrainInfoReq_offsets_[1] = {
  };
  CSTrainInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSTrainInfoReq_descriptor_,
      CSTrainInfoReq::default_instance_,
      CSTrainInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTrainInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTrainInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSTrainInfoReq));
  CSTrainInfoRsp_descriptor_ = file->message_type(127);
  static const int CSTrainInfoRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTrainInfoRsp, potential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTrainInfoRsp, courage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTrainInfoRsp, charm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTrainInfoRsp, trick_),
  };
  CSTrainInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSTrainInfoRsp_descriptor_,
      CSTrainInfoRsp::default_instance_,
      CSTrainInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTrainInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTrainInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSTrainInfoRsp));
  CSTrainReq_descriptor_ = file->message_type(128);
  static const int CSTrainReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTrainReq, type_),
  };
  CSTrainReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSTrainReq_descriptor_,
      CSTrainReq::default_instance_,
      CSTrainReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTrainReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTrainReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSTrainReq));
  CSTrainRsp_descriptor_ = file->message_type(129);
  static const int CSTrainRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTrainRsp, courage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTrainRsp, charm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTrainRsp, trick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTrainRsp, succ_),
  };
  CSTrainRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSTrainRsp_descriptor_,
      CSTrainRsp::default_instance_,
      CSTrainRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTrainRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTrainRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSTrainRsp));
  CSTrainDetermineReq_descriptor_ = file->message_type(130);
  static const int CSTrainDetermineReq_offsets_[1] = {
  };
  CSTrainDetermineReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSTrainDetermineReq_descriptor_,
      CSTrainDetermineReq::default_instance_,
      CSTrainDetermineReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTrainDetermineReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTrainDetermineReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSTrainDetermineReq));
  CSTrainDetermineRsp_descriptor_ = file->message_type(131);
  static const int CSTrainDetermineRsp_offsets_[1] = {
  };
  CSTrainDetermineRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSTrainDetermineRsp_descriptor_,
      CSTrainDetermineRsp::default_instance_,
      CSTrainDetermineRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTrainDetermineRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTrainDetermineRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSTrainDetermineRsp));
  CSExploreReq_descriptor_ = file->message_type(132);
  static const int CSExploreReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExploreReq, option_),
  };
  CSExploreReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSExploreReq_descriptor_,
      CSExploreReq::default_instance_,
      CSExploreReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExploreReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExploreReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSExploreReq));
  CSExploreRsp_descriptor_ = file->message_type(133);
  static const int CSExploreRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExploreRsp, option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExploreRsp, map_id_),
  };
  CSExploreRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSExploreRsp_descriptor_,
      CSExploreRsp::default_instance_,
      CSExploreRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExploreRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExploreRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSExploreRsp));
  CSExploreDetermineReq_descriptor_ = file->message_type(134);
  static const int CSExploreDetermineReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExploreDetermineReq, option_),
  };
  CSExploreDetermineReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSExploreDetermineReq_descriptor_,
      CSExploreDetermineReq::default_instance_,
      CSExploreDetermineReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExploreDetermineReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExploreDetermineReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSExploreDetermineReq));
  CSExploreDetermineRsp_descriptor_ = file->message_type(135);
  static const int CSExploreDetermineRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExploreDetermineRsp, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExploreDetermineRsp, rewards_),
  };
  CSExploreDetermineRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSExploreDetermineRsp_descriptor_,
      CSExploreDetermineRsp::default_instance_,
      CSExploreDetermineRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExploreDetermineRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExploreDetermineRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSExploreDetermineRsp));
  CSQueryDowerReq_descriptor_ = file->message_type(136);
  static const int CSQueryDowerReq_offsets_[1] = {
  };
  CSQueryDowerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSQueryDowerReq_descriptor_,
      CSQueryDowerReq::default_instance_,
      CSQueryDowerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryDowerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryDowerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSQueryDowerReq));
  CSQueryDowerRsp_descriptor_ = file->message_type(137);
  static const int CSQueryDowerRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryDowerRsp, dower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryDowerRsp, timeout_),
  };
  CSQueryDowerRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSQueryDowerRsp_descriptor_,
      CSQueryDowerRsp::default_instance_,
      CSQueryDowerRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryDowerRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryDowerRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSQueryDowerRsp));
  CSQueryDowerRsp_Dower_descriptor_ = CSQueryDowerRsp_descriptor_->nested_type(0);
  static const int CSQueryDowerRsp_Dower_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryDowerRsp_Dower, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryDowerRsp_Dower, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryDowerRsp_Dower, max_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryDowerRsp_Dower, plus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryDowerRsp_Dower, each_plus_),
  };
  CSQueryDowerRsp_Dower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSQueryDowerRsp_Dower_descriptor_,
      CSQueryDowerRsp_Dower::default_instance_,
      CSQueryDowerRsp_Dower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryDowerRsp_Dower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryDowerRsp_Dower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSQueryDowerRsp_Dower));
  CSDowerInfoReq_descriptor_ = file->message_type(138);
  static const int CSDowerInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerInfoReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerInfoReq, level_),
  };
  CSDowerInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDowerInfoReq_descriptor_,
      CSDowerInfoReq::default_instance_,
      CSDowerInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDowerInfoReq));
  CSDowerInfoRsp_descriptor_ = file->message_type(139);
  static const int CSDowerInfoRsp_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerInfoRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerInfoRsp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerInfoRsp, next_exploit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerInfoRsp, next_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerInfoRsp, diff_physical_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerInfoRsp, diff_magic_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerInfoRsp, diff_skill_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerInfoRsp, diff_physical_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerInfoRsp, diff_magic_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerInfoRsp, diff_skill_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerInfoRsp, diff_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerInfoRsp, plus_),
  };
  CSDowerInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDowerInfoRsp_descriptor_,
      CSDowerInfoRsp::default_instance_,
      CSDowerInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDowerInfoRsp));
  CSDowerReq_descriptor_ = file->message_type(140);
  static const int CSDowerReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerReq, id_),
  };
  CSDowerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDowerReq_descriptor_,
      CSDowerReq::default_instance_,
      CSDowerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDowerReq));
  CSDowerRsp_descriptor_ = file->message_type(141);
  static const int CSDowerRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerRsp, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerRsp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerRsp, plus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerRsp, next_exploit_),
  };
  CSDowerRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDowerRsp_descriptor_,
      CSDowerRsp::default_instance_,
      CSDowerRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDowerRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDowerRsp));
  CSExchangeParameterReq_descriptor_ = file->message_type(142);
  static const int CSExchangeParameterReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExchangeParameterReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExchangeParameterReq, param_),
  };
  CSExchangeParameterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSExchangeParameterReq_descriptor_,
      CSExchangeParameterReq::default_instance_,
      CSExchangeParameterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExchangeParameterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExchangeParameterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSExchangeParameterReq));
  CSExchangeParameterRsp_descriptor_ = file->message_type(143);
  static const int CSExchangeParameterRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExchangeParameterRsp, succ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExchangeParameterRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExchangeParameterRsp, param_),
  };
  CSExchangeParameterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSExchangeParameterRsp_descriptor_,
      CSExchangeParameterRsp::default_instance_,
      CSExchangeParameterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExchangeParameterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSExchangeParameterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSExchangeParameterRsp));
  ShopItemInfo_descriptor_ = file->message_type(144);
  static const int ShopItemInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo, from_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo, to_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo, is_buy_),
  };
  ShopItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopItemInfo_descriptor_,
      ShopItemInfo::default_instance_,
      ShopItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopItemInfo));
  ShopItemInfo_Item_descriptor_ = ShopItemInfo_descriptor_->nested_type(0);
  static const int ShopItemInfo_Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo_Item, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo_Item, item_num_),
  };
  ShopItemInfo_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopItemInfo_Item_descriptor_,
      ShopItemInfo_Item::default_instance_,
      ShopItemInfo_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopItemInfo_Item));
  CSGetShopItemsReq_descriptor_ = file->message_type(145);
  static const int CSGetShopItemsReq_offsets_[1] = {
  };
  CSGetShopItemsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetShopItemsReq_descriptor_,
      CSGetShopItemsReq::default_instance_,
      CSGetShopItemsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetShopItemsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetShopItemsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetShopItemsReq));
  CSGetShopItemsRsp_descriptor_ = file->message_type(146);
  static const int CSGetShopItemsRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetShopItemsRsp, items_),
  };
  CSGetShopItemsRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetShopItemsRsp_descriptor_,
      CSGetShopItemsRsp::default_instance_,
      CSGetShopItemsRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetShopItemsRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetShopItemsRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetShopItemsRsp));
  CSBuyShopItemReq_descriptor_ = file->message_type(147);
  static const int CSBuyShopItemReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBuyShopItemReq, index_),
  };
  CSBuyShopItemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBuyShopItemReq_descriptor_,
      CSBuyShopItemReq::default_instance_,
      CSBuyShopItemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBuyShopItemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBuyShopItemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBuyShopItemReq));
  CSBuyShopItemRsp_descriptor_ = file->message_type(148);
  static const int CSBuyShopItemRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBuyShopItemRsp, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBuyShopItemRsp, succ_),
  };
  CSBuyShopItemRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBuyShopItemRsp_descriptor_,
      CSBuyShopItemRsp::default_instance_,
      CSBuyShopItemRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBuyShopItemRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBuyShopItemRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBuyShopItemRsp));
  CSGetUserItemReq_descriptor_ = file->message_type(149);
  static const int CSGetUserItemReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserItemReq, userid_),
  };
  CSGetUserItemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetUserItemReq_descriptor_,
      CSGetUserItemReq::default_instance_,
      CSGetUserItemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserItemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserItemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetUserItemReq));
  CSGetUserItemRsp_descriptor_ = file->message_type(150);
  static const int CSGetUserItemRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserItemRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserItemRsp, items_),
  };
  CSGetUserItemRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetUserItemRsp_descriptor_,
      CSGetUserItemRsp::default_instance_,
      CSGetUserItemRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserItemRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserItemRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetUserItemRsp));
  CSGetUserAttributesReq_descriptor_ = file->message_type(151);
  static const int CSGetUserAttributesReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserAttributesReq, userid_),
  };
  CSGetUserAttributesReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetUserAttributesReq_descriptor_,
      CSGetUserAttributesReq::default_instance_,
      CSGetUserAttributesReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserAttributesReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserAttributesReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetUserAttributesReq));
  CSGetUserAttributesRsp_descriptor_ = file->message_type(152);
  static const int CSGetUserAttributesRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserAttributesRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserAttributesRsp, attributes_),
  };
  CSGetUserAttributesRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetUserAttributesRsp_descriptor_,
      CSGetUserAttributesRsp::default_instance_,
      CSGetUserAttributesRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserAttributesRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetUserAttributesRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetUserAttributesRsp));
  CSNotifyMoneyConfInfoRsp_descriptor_ = file->message_type(153);
  static const int CSNotifyMoneyConfInfoRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNotifyMoneyConfInfoRsp, pay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNotifyMoneyConfInfoRsp, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNotifyMoneyConfInfoRsp, explore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNotifyMoneyConfInfoRsp, train_),
  };
  CSNotifyMoneyConfInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSNotifyMoneyConfInfoRsp_descriptor_,
      CSNotifyMoneyConfInfoRsp::default_instance_,
      CSNotifyMoneyConfInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNotifyMoneyConfInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNotifyMoneyConfInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSNotifyMoneyConfInfoRsp));
  PB_PLAYET_ATTR_T_descriptor_ = file->enum_type(0);
  PB_ITEM_ATTR_T_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_5fcore_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BasicUserBattleInfo_descriptor_, &BasicUserBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserSkillPart_descriptor_, &UserSkillPart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserSkillInfo_descriptor_, &UserSkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BasicUserInfo_descriptor_, &BasicUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSEnterMapReq_descriptor_, &CSEnterMapReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSEnterMapRsp_descriptor_, &CSEnterMapRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSLeaveMapRsp_descriptor_, &CSLeaveMapRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetMapUsersReq_descriptor_, &CSGetMapUsersReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetMapUsersRsp_descriptor_, &CSGetMapUsersRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetUserSkillReq_descriptor_, &CSGetUserSkillReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetUserSkillRsp_descriptor_, &CSGetUserSkillRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetUserInfoReq_descriptor_, &CSGetUserInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetUserInfoRsp_descriptor_, &CSGetUserInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSAddUserSkillReq_descriptor_, &CSAddUserSkillReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSAddUserSkillRsp_descriptor_, &CSAddUserSkillRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSUserSkillDiffReq_descriptor_, &CSUserSkillDiffReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSUserSkillDiffRsp_descriptor_, &CSUserSkillDiffRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSWalkReq_descriptor_, &CSWalkReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSWalkRsp_descriptor_, &CSWalkRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSItemAttr_descriptor_, &CSItemAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSEquipHole_descriptor_, &CSEquipHole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentBase_descriptor_, &EquipmentBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentBase_Item_Attr_descriptor_, &EquipmentBase_Item_Attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpiritStoneBase_descriptor_, &SpiritStoneBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManorBase_descriptor_, &ManorBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSItemInfo_descriptor_, &CSItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSAllItemsReq_descriptor_, &CSAllItemsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSAllItemsRsp_descriptor_, &CSAllItemsRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSItemAddRsp_descriptor_, &CSItemAddRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSItemRemoveReq_descriptor_, &CSItemRemoveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSItemRemoveRsp_descriptor_, &CSItemRemoveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSItemUseReq_descriptor_, &CSItemUseReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSItemMoveReq_descriptor_, &CSItemMoveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSItemMoveRsp_descriptor_, &CSItemMoveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSItemUpdateRsp_descriptor_, &CSItemUpdateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSItemOrderReq_descriptor_, &CSItemOrderReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSInstanceReq_descriptor_, &CSInstanceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSInstanceRsp_descriptor_, &CSInstanceRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSInstanceRsp_CSInstance_descriptor_, &CSInstanceRsp_CSInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSReward_descriptor_, &CSReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSReward_RewardInfo_descriptor_, &CSReward_RewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSLevelUpRsp_descriptor_, &CSLevelUpRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBasicUserBattleInfoRsp_descriptor_, &CSBasicUserBattleInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSearchSpiritStoneReq_descriptor_, &CSSearchSpiritStoneReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSearchSpiritStoneRsp_descriptor_, &CSSearchSpiritStoneRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSpiritStoneMoveBagReq_descriptor_, &CSSpiritStoneMoveBagReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSpiritStoneMoveBagRsp_descriptor_, &CSSpiritStoneMoveBagRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSpiritStoneLevelUpReq_descriptor_, &CSSpiritStoneLevelUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSpiritStoneLevelUpRsp_descriptor_, &CSSpiritStoneLevelUpRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSpiritStoneToSPReq_descriptor_, &CSSpiritStoneToSPReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSpiritStoneToSPRsp_descriptor_, &CSSpiritStoneToSPRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetExchangeSSInfoReq_descriptor_, &CSGetExchangeSSInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeSSInfo_descriptor_, &ExchangeSSInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetExchangeSSInfoRsp_descriptor_, &CSGetExchangeSSInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSAddManorReq_descriptor_, &CSAddManorReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSAddManorRsp_descriptor_, &CSAddManorRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSWarmSportLvUpReq_descriptor_, &CSWarmSportLvUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSWarmSportLvUpRsp_descriptor_, &CSWarmSportLvUpRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSManorOptReq_descriptor_, &CSManorOptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSManorOptRsp_descriptor_, &CSManorOptRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonListReq_descriptor_, &CSMonListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonInfo_descriptor_, &MonInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonListRsp_descriptor_, &CSMonListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSetMonStatusReq_descriptor_, &CSSetMonStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSetMonStatusRsp_descriptor_, &CSSetMonStatusRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVPQueryRoomReq_descriptor_, &CSPVPQueryRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVPRoomBase_descriptor_, &PVPRoomBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVPQueryRoomRsp_descriptor_, &CSPVPQueryRoomRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVPBaseInfoRsp_descriptor_, &CSPVPBaseInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVPCreateRoomReq_descriptor_, &CSPVPCreateRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVPJoinRoomReq_descriptor_, &CSPVPJoinRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVPSeatBase_descriptor_, &PVPSeatBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVPJoinRoomRsp_descriptor_, &CSPVPJoinRoomRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVPExitRoomReq_descriptor_, &CSPVPExitRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVPExitRoomRsp_descriptor_, &CSPVPExitRoomRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVPCloseRoomRsp_descriptor_, &CSPVPCloseRoomRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVPChangeSeatReq_descriptor_, &CSPVPChangeSeatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVPReadyReq_descriptor_, &CSPVPReadyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVPCancelReadyReq_descriptor_, &CSPVPCancelReadyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVPKickoffReq_descriptor_, &CSPVPKickoffReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVPKickoffRsp_descriptor_, &CSPVPKickoffRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVPStartReq_descriptor_, &CSPVPStartReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVPStartRsp_descriptor_, &CSPVPStartRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPPVEBattleReq_descriptor_, &CSPPVEBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPPVEBattleRsp_descriptor_, &CSPPVEBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVEQueryRoomReq_descriptor_, &CSPVEQueryRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVERoomBase_descriptor_, &PVERoomBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVEQueryRoomRsp_descriptor_, &CSPVEQueryRoomRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVEBaseInfoRsp_descriptor_, &CSPVEBaseInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVECreateRoomReq_descriptor_, &CSPVECreateRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVEJoinRoomReq_descriptor_, &CSPVEJoinRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVEJoinRoomFailureRsp_descriptor_, &CSPVEJoinRoomFailureRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVESeatBase_descriptor_, &PVESeatBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVEJoinRoomRsp_descriptor_, &CSPVEJoinRoomRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVEExitRoomReq_descriptor_, &CSPVEExitRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVEExitRoomRsp_descriptor_, &CSPVEExitRoomRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVECloseRoomRsp_descriptor_, &CSPVECloseRoomRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVEReadyReq_descriptor_, &CSPVEReadyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVECancelReadyReq_descriptor_, &CSPVECancelReadyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVEKickoffReq_descriptor_, &CSPVEKickoffReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVEKickoffRsp_descriptor_, &CSPVEKickoffRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVEStartReq_descriptor_, &CSPVEStartReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVEStartRsp_descriptor_, &CSPVEStartRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVAIReq_descriptor_, &CSPVAIReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVAIInfoReq_descriptor_, &CSPVAIInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVAIInfoRsq_descriptor_, &CSPVAIInfoRsq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVAIInfoRsq_CSPVAIInfo_descriptor_, &CSPVAIInfoRsq_CSPVAIInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPVAIInfoRsq_CSPVAILog_descriptor_, &CSPVAIInfoRsq_CSPVAILog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetEquipLvUpCDReq_descriptor_, &CSGetEquipLvUpCDReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetEquipLvUpCDRsp_descriptor_, &CSGetEquipLvUpCDRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSEquipInlayGemReq_descriptor_, &CSEquipInlayGemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSEquipInlayGemRsp_descriptor_, &CSEquipInlayGemRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSResetGemAttrReq_descriptor_, &CSResetGemAttrReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSResetGemAttrRsp_descriptor_, &CSResetGemAttrRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSEquipmentStrengthReq_descriptor_, &CSEquipmentStrengthReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSEquipmentStrengthRsp_descriptor_, &CSEquipmentStrengthRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSEquipmentComposeReq_descriptor_, &CSEquipmentComposeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSEquipmentComposeRsp_descriptor_, &CSEquipmentComposeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSTaskInfoReq_descriptor_, &CSTaskInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskInfo_descriptor_, &TaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSTaskInfoRsp_descriptor_, &CSTaskInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSTaskDoStepReq_descriptor_, &CSTaskDoStepReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSTaskDoStepRsp_descriptor_, &CSTaskDoStepRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSTaskLogReq_descriptor_, &CSTaskLogReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSTaskLogRsp_descriptor_, &CSTaskLogRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSAttributesSetReq_descriptor_, &CSAttributesSetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSAttributesReq_descriptor_, &CSAttributesReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSAttributesRsp_descriptor_, &CSAttributesRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSAttributesRsp_KeyValue_descriptor_, &CSAttributesRsp_KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOnceSetReq_descriptor_, &CSOnceSetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOnceReq_descriptor_, &CSOnceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOnceRsp_descriptor_, &CSOnceRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOnceRsp_Once_descriptor_, &CSOnceRsp_Once::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSTrainInfoReq_descriptor_, &CSTrainInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSTrainInfoRsp_descriptor_, &CSTrainInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSTrainReq_descriptor_, &CSTrainReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSTrainRsp_descriptor_, &CSTrainRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSTrainDetermineReq_descriptor_, &CSTrainDetermineReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSTrainDetermineRsp_descriptor_, &CSTrainDetermineRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSExploreReq_descriptor_, &CSExploreReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSExploreRsp_descriptor_, &CSExploreRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSExploreDetermineReq_descriptor_, &CSExploreDetermineReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSExploreDetermineRsp_descriptor_, &CSExploreDetermineRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSQueryDowerReq_descriptor_, &CSQueryDowerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSQueryDowerRsp_descriptor_, &CSQueryDowerRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSQueryDowerRsp_Dower_descriptor_, &CSQueryDowerRsp_Dower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDowerInfoReq_descriptor_, &CSDowerInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDowerInfoRsp_descriptor_, &CSDowerInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDowerReq_descriptor_, &CSDowerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDowerRsp_descriptor_, &CSDowerRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSExchangeParameterReq_descriptor_, &CSExchangeParameterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSExchangeParameterRsp_descriptor_, &CSExchangeParameterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopItemInfo_descriptor_, &ShopItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopItemInfo_Item_descriptor_, &ShopItemInfo_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetShopItemsReq_descriptor_, &CSGetShopItemsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetShopItemsRsp_descriptor_, &CSGetShopItemsRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBuyShopItemReq_descriptor_, &CSBuyShopItemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBuyShopItemRsp_descriptor_, &CSBuyShopItemRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetUserItemReq_descriptor_, &CSGetUserItemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetUserItemRsp_descriptor_, &CSGetUserItemRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetUserAttributesReq_descriptor_, &CSGetUserAttributesReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetUserAttributesRsp_descriptor_, &CSGetUserAttributesRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSNotifyMoneyConfInfoRsp_descriptor_, &CSNotifyMoneyConfInfoRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_5fcore_2eproto() {
  delete BasicUserBattleInfo::default_instance_;
  delete BasicUserBattleInfo_reflection_;
  delete UserSkillPart::default_instance_;
  delete UserSkillPart_reflection_;
  delete UserSkillInfo::default_instance_;
  delete UserSkillInfo_reflection_;
  delete BasicUserInfo::default_instance_;
  delete BasicUserInfo_reflection_;
  delete CSEnterMapReq::default_instance_;
  delete CSEnterMapReq_reflection_;
  delete CSEnterMapRsp::default_instance_;
  delete CSEnterMapRsp_reflection_;
  delete CSLeaveMapRsp::default_instance_;
  delete CSLeaveMapRsp_reflection_;
  delete CSGetMapUsersReq::default_instance_;
  delete CSGetMapUsersReq_reflection_;
  delete CSGetMapUsersRsp::default_instance_;
  delete CSGetMapUsersRsp_reflection_;
  delete CSGetUserSkillReq::default_instance_;
  delete CSGetUserSkillReq_reflection_;
  delete CSGetUserSkillRsp::default_instance_;
  delete CSGetUserSkillRsp_reflection_;
  delete CSGetUserInfoReq::default_instance_;
  delete CSGetUserInfoReq_reflection_;
  delete CSGetUserInfoRsp::default_instance_;
  delete CSGetUserInfoRsp_reflection_;
  delete CSAddUserSkillReq::default_instance_;
  delete CSAddUserSkillReq_reflection_;
  delete CSAddUserSkillRsp::default_instance_;
  delete CSAddUserSkillRsp_reflection_;
  delete CSUserSkillDiffReq::default_instance_;
  delete CSUserSkillDiffReq_reflection_;
  delete CSUserSkillDiffRsp::default_instance_;
  delete CSUserSkillDiffRsp_reflection_;
  delete CSWalkReq::default_instance_;
  delete CSWalkReq_reflection_;
  delete CSWalkRsp::default_instance_;
  delete CSWalkRsp_reflection_;
  delete CSItemAttr::default_instance_;
  delete CSItemAttr_reflection_;
  delete CSEquipHole::default_instance_;
  delete CSEquipHole_reflection_;
  delete EquipmentBase::default_instance_;
  delete EquipmentBase_reflection_;
  delete EquipmentBase_Item_Attr::default_instance_;
  delete EquipmentBase_Item_Attr_reflection_;
  delete SpiritStoneBase::default_instance_;
  delete SpiritStoneBase_reflection_;
  delete ManorBase::default_instance_;
  delete ManorBase_reflection_;
  delete CSItemInfo::default_instance_;
  delete CSItemInfo_reflection_;
  delete CSAllItemsReq::default_instance_;
  delete CSAllItemsReq_reflection_;
  delete CSAllItemsRsp::default_instance_;
  delete CSAllItemsRsp_reflection_;
  delete CSItemAddRsp::default_instance_;
  delete CSItemAddRsp_reflection_;
  delete CSItemRemoveReq::default_instance_;
  delete CSItemRemoveReq_reflection_;
  delete CSItemRemoveRsp::default_instance_;
  delete CSItemRemoveRsp_reflection_;
  delete CSItemUseReq::default_instance_;
  delete CSItemUseReq_reflection_;
  delete CSItemMoveReq::default_instance_;
  delete CSItemMoveReq_reflection_;
  delete CSItemMoveRsp::default_instance_;
  delete CSItemMoveRsp_reflection_;
  delete CSItemUpdateRsp::default_instance_;
  delete CSItemUpdateRsp_reflection_;
  delete CSItemOrderReq::default_instance_;
  delete CSItemOrderReq_reflection_;
  delete CSInstanceReq::default_instance_;
  delete CSInstanceReq_reflection_;
  delete CSInstanceRsp::default_instance_;
  delete CSInstanceRsp_reflection_;
  delete CSInstanceRsp_CSInstance::default_instance_;
  delete CSInstanceRsp_CSInstance_reflection_;
  delete CSReward::default_instance_;
  delete CSReward_reflection_;
  delete CSReward_RewardInfo::default_instance_;
  delete CSReward_RewardInfo_reflection_;
  delete CSLevelUpRsp::default_instance_;
  delete CSLevelUpRsp_reflection_;
  delete CSBasicUserBattleInfoRsp::default_instance_;
  delete CSBasicUserBattleInfoRsp_reflection_;
  delete CSSearchSpiritStoneReq::default_instance_;
  delete CSSearchSpiritStoneReq_reflection_;
  delete CSSearchSpiritStoneRsp::default_instance_;
  delete CSSearchSpiritStoneRsp_reflection_;
  delete CSSpiritStoneMoveBagReq::default_instance_;
  delete CSSpiritStoneMoveBagReq_reflection_;
  delete CSSpiritStoneMoveBagRsp::default_instance_;
  delete CSSpiritStoneMoveBagRsp_reflection_;
  delete CSSpiritStoneLevelUpReq::default_instance_;
  delete CSSpiritStoneLevelUpReq_reflection_;
  delete CSSpiritStoneLevelUpRsp::default_instance_;
  delete CSSpiritStoneLevelUpRsp_reflection_;
  delete CSSpiritStoneToSPReq::default_instance_;
  delete CSSpiritStoneToSPReq_reflection_;
  delete CSSpiritStoneToSPRsp::default_instance_;
  delete CSSpiritStoneToSPRsp_reflection_;
  delete CSGetExchangeSSInfoReq::default_instance_;
  delete CSGetExchangeSSInfoReq_reflection_;
  delete ExchangeSSInfo::default_instance_;
  delete ExchangeSSInfo_reflection_;
  delete CSGetExchangeSSInfoRsp::default_instance_;
  delete CSGetExchangeSSInfoRsp_reflection_;
  delete CSAddManorReq::default_instance_;
  delete CSAddManorReq_reflection_;
  delete CSAddManorRsp::default_instance_;
  delete CSAddManorRsp_reflection_;
  delete CSWarmSportLvUpReq::default_instance_;
  delete CSWarmSportLvUpReq_reflection_;
  delete CSWarmSportLvUpRsp::default_instance_;
  delete CSWarmSportLvUpRsp_reflection_;
  delete CSManorOptReq::default_instance_;
  delete CSManorOptReq_reflection_;
  delete CSManorOptRsp::default_instance_;
  delete CSManorOptRsp_reflection_;
  delete CSMonListReq::default_instance_;
  delete CSMonListReq_reflection_;
  delete MonInfo::default_instance_;
  delete MonInfo_reflection_;
  delete CSMonListRsp::default_instance_;
  delete CSMonListRsp_reflection_;
  delete CSSetMonStatusReq::default_instance_;
  delete CSSetMonStatusReq_reflection_;
  delete CSSetMonStatusRsp::default_instance_;
  delete CSSetMonStatusRsp_reflection_;
  delete CSPVPQueryRoomReq::default_instance_;
  delete CSPVPQueryRoomReq_reflection_;
  delete PVPRoomBase::default_instance_;
  delete PVPRoomBase_reflection_;
  delete CSPVPQueryRoomRsp::default_instance_;
  delete CSPVPQueryRoomRsp_reflection_;
  delete CSPVPBaseInfoRsp::default_instance_;
  delete CSPVPBaseInfoRsp_reflection_;
  delete CSPVPCreateRoomReq::default_instance_;
  delete CSPVPCreateRoomReq_reflection_;
  delete CSPVPJoinRoomReq::default_instance_;
  delete CSPVPJoinRoomReq_reflection_;
  delete PVPSeatBase::default_instance_;
  delete PVPSeatBase_reflection_;
  delete CSPVPJoinRoomRsp::default_instance_;
  delete CSPVPJoinRoomRsp_reflection_;
  delete CSPVPExitRoomReq::default_instance_;
  delete CSPVPExitRoomReq_reflection_;
  delete CSPVPExitRoomRsp::default_instance_;
  delete CSPVPExitRoomRsp_reflection_;
  delete CSPVPCloseRoomRsp::default_instance_;
  delete CSPVPCloseRoomRsp_reflection_;
  delete CSPVPChangeSeatReq::default_instance_;
  delete CSPVPChangeSeatReq_reflection_;
  delete CSPVPReadyReq::default_instance_;
  delete CSPVPReadyReq_reflection_;
  delete CSPVPCancelReadyReq::default_instance_;
  delete CSPVPCancelReadyReq_reflection_;
  delete CSPVPKickoffReq::default_instance_;
  delete CSPVPKickoffReq_reflection_;
  delete CSPVPKickoffRsp::default_instance_;
  delete CSPVPKickoffRsp_reflection_;
  delete CSPVPStartReq::default_instance_;
  delete CSPVPStartReq_reflection_;
  delete CSPVPStartRsp::default_instance_;
  delete CSPVPStartRsp_reflection_;
  delete CSPPVEBattleReq::default_instance_;
  delete CSPPVEBattleReq_reflection_;
  delete CSPPVEBattleRsp::default_instance_;
  delete CSPPVEBattleRsp_reflection_;
  delete CSPVEQueryRoomReq::default_instance_;
  delete CSPVEQueryRoomReq_reflection_;
  delete PVERoomBase::default_instance_;
  delete PVERoomBase_reflection_;
  delete CSPVEQueryRoomRsp::default_instance_;
  delete CSPVEQueryRoomRsp_reflection_;
  delete CSPVEBaseInfoRsp::default_instance_;
  delete CSPVEBaseInfoRsp_reflection_;
  delete CSPVECreateRoomReq::default_instance_;
  delete CSPVECreateRoomReq_reflection_;
  delete CSPVEJoinRoomReq::default_instance_;
  delete CSPVEJoinRoomReq_reflection_;
  delete CSPVEJoinRoomFailureRsp::default_instance_;
  delete CSPVEJoinRoomFailureRsp_reflection_;
  delete PVESeatBase::default_instance_;
  delete PVESeatBase_reflection_;
  delete CSPVEJoinRoomRsp::default_instance_;
  delete CSPVEJoinRoomRsp_reflection_;
  delete CSPVEExitRoomReq::default_instance_;
  delete CSPVEExitRoomReq_reflection_;
  delete CSPVEExitRoomRsp::default_instance_;
  delete CSPVEExitRoomRsp_reflection_;
  delete CSPVECloseRoomRsp::default_instance_;
  delete CSPVECloseRoomRsp_reflection_;
  delete CSPVEReadyReq::default_instance_;
  delete CSPVEReadyReq_reflection_;
  delete CSPVECancelReadyReq::default_instance_;
  delete CSPVECancelReadyReq_reflection_;
  delete CSPVEKickoffReq::default_instance_;
  delete CSPVEKickoffReq_reflection_;
  delete CSPVEKickoffRsp::default_instance_;
  delete CSPVEKickoffRsp_reflection_;
  delete CSPVEStartReq::default_instance_;
  delete CSPVEStartReq_reflection_;
  delete CSPVEStartRsp::default_instance_;
  delete CSPVEStartRsp_reflection_;
  delete CSPVAIReq::default_instance_;
  delete CSPVAIReq_reflection_;
  delete CSPVAIInfoReq::default_instance_;
  delete CSPVAIInfoReq_reflection_;
  delete CSPVAIInfoRsq::default_instance_;
  delete CSPVAIInfoRsq_reflection_;
  delete CSPVAIInfoRsq_CSPVAIInfo::default_instance_;
  delete CSPVAIInfoRsq_CSPVAIInfo_reflection_;
  delete CSPVAIInfoRsq_CSPVAILog::default_instance_;
  delete CSPVAIInfoRsq_CSPVAILog_reflection_;
  delete CSGetEquipLvUpCDReq::default_instance_;
  delete CSGetEquipLvUpCDReq_reflection_;
  delete CSGetEquipLvUpCDRsp::default_instance_;
  delete CSGetEquipLvUpCDRsp_reflection_;
  delete CSEquipInlayGemReq::default_instance_;
  delete CSEquipInlayGemReq_reflection_;
  delete CSEquipInlayGemRsp::default_instance_;
  delete CSEquipInlayGemRsp_reflection_;
  delete CSResetGemAttrReq::default_instance_;
  delete CSResetGemAttrReq_reflection_;
  delete CSResetGemAttrRsp::default_instance_;
  delete CSResetGemAttrRsp_reflection_;
  delete CSEquipmentStrengthReq::default_instance_;
  delete CSEquipmentStrengthReq_reflection_;
  delete CSEquipmentStrengthRsp::default_instance_;
  delete CSEquipmentStrengthRsp_reflection_;
  delete CSEquipmentComposeReq::default_instance_;
  delete CSEquipmentComposeReq_reflection_;
  delete CSEquipmentComposeRsp::default_instance_;
  delete CSEquipmentComposeRsp_reflection_;
  delete CSTaskInfoReq::default_instance_;
  delete CSTaskInfoReq_reflection_;
  delete TaskInfo::default_instance_;
  delete TaskInfo_reflection_;
  delete CSTaskInfoRsp::default_instance_;
  delete CSTaskInfoRsp_reflection_;
  delete CSTaskDoStepReq::default_instance_;
  delete CSTaskDoStepReq_reflection_;
  delete CSTaskDoStepRsp::default_instance_;
  delete CSTaskDoStepRsp_reflection_;
  delete CSTaskLogReq::default_instance_;
  delete CSTaskLogReq_reflection_;
  delete CSTaskLogRsp::default_instance_;
  delete CSTaskLogRsp_reflection_;
  delete CSAttributesSetReq::default_instance_;
  delete CSAttributesSetReq_reflection_;
  delete CSAttributesReq::default_instance_;
  delete CSAttributesReq_reflection_;
  delete CSAttributesRsp::default_instance_;
  delete CSAttributesRsp_reflection_;
  delete CSAttributesRsp_KeyValue::default_instance_;
  delete CSAttributesRsp_KeyValue_reflection_;
  delete CSOnceSetReq::default_instance_;
  delete CSOnceSetReq_reflection_;
  delete CSOnceReq::default_instance_;
  delete CSOnceReq_reflection_;
  delete CSOnceRsp::default_instance_;
  delete CSOnceRsp_reflection_;
  delete CSOnceRsp_Once::default_instance_;
  delete CSOnceRsp_Once_reflection_;
  delete CSTrainInfoReq::default_instance_;
  delete CSTrainInfoReq_reflection_;
  delete CSTrainInfoRsp::default_instance_;
  delete CSTrainInfoRsp_reflection_;
  delete CSTrainReq::default_instance_;
  delete CSTrainReq_reflection_;
  delete CSTrainRsp::default_instance_;
  delete CSTrainRsp_reflection_;
  delete CSTrainDetermineReq::default_instance_;
  delete CSTrainDetermineReq_reflection_;
  delete CSTrainDetermineRsp::default_instance_;
  delete CSTrainDetermineRsp_reflection_;
  delete CSExploreReq::default_instance_;
  delete CSExploreReq_reflection_;
  delete CSExploreRsp::default_instance_;
  delete CSExploreRsp_reflection_;
  delete CSExploreDetermineReq::default_instance_;
  delete CSExploreDetermineReq_reflection_;
  delete CSExploreDetermineRsp::default_instance_;
  delete CSExploreDetermineRsp_reflection_;
  delete CSQueryDowerReq::default_instance_;
  delete CSQueryDowerReq_reflection_;
  delete CSQueryDowerRsp::default_instance_;
  delete CSQueryDowerRsp_reflection_;
  delete CSQueryDowerRsp_Dower::default_instance_;
  delete CSQueryDowerRsp_Dower_reflection_;
  delete CSDowerInfoReq::default_instance_;
  delete CSDowerInfoReq_reflection_;
  delete CSDowerInfoRsp::default_instance_;
  delete CSDowerInfoRsp_reflection_;
  delete CSDowerReq::default_instance_;
  delete CSDowerReq_reflection_;
  delete CSDowerRsp::default_instance_;
  delete CSDowerRsp_reflection_;
  delete CSExchangeParameterReq::default_instance_;
  delete CSExchangeParameterReq_reflection_;
  delete CSExchangeParameterRsp::default_instance_;
  delete CSExchangeParameterRsp_reflection_;
  delete ShopItemInfo::default_instance_;
  delete ShopItemInfo_reflection_;
  delete ShopItemInfo_Item::default_instance_;
  delete ShopItemInfo_Item_reflection_;
  delete CSGetShopItemsReq::default_instance_;
  delete CSGetShopItemsReq_reflection_;
  delete CSGetShopItemsRsp::default_instance_;
  delete CSGetShopItemsRsp_reflection_;
  delete CSBuyShopItemReq::default_instance_;
  delete CSBuyShopItemReq_reflection_;
  delete CSBuyShopItemRsp::default_instance_;
  delete CSBuyShopItemRsp_reflection_;
  delete CSGetUserItemReq::default_instance_;
  delete CSGetUserItemReq_reflection_;
  delete CSGetUserItemRsp::default_instance_;
  delete CSGetUserItemRsp_reflection_;
  delete CSGetUserAttributesReq::default_instance_;
  delete CSGetUserAttributesReq_reflection_;
  delete CSGetUserAttributesRsp::default_instance_;
  delete CSGetUserAttributesRsp_reflection_;
  delete CSNotifyMoneyConfInfoRsp::default_instance_;
  delete CSNotifyMoneyConfInfoRsp_reflection_;
}

void protobuf_AddDesc_cs_5fcore_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rcs_core.proto\"\227\003\n\023BasicUserBattleInfo\022"
    "\027\n\017physical_attack\030\001 \002(\r\022\024\n\014magic_attack"
    "\030\002 \002(\r\022\024\n\014skill_attack\030\003 \002(\r\022\030\n\020physical"
    "_defence\030\004 \002(\r\022\025\n\rmagic_defence\030\005 \002(\r\022\025\n"
    "\rskill_defence\030\006 \002(\r\022\024\n\014health_point\030\007 \002"
    "(\r\022\020\n\010accurate\030\010 \002(\r\022\r\n\005dodge\030\t \002(\r\022\r\n\005w"
    "reck\030\n \002(\r\022\r\n\005parry\030\013 \002(\r\022\027\n\017critical_st"
    "rike\030\014 \002(\r\022\020\n\010tenacity\030\r \002(\r\022\014\n\004slay\030\016 \002"
    "(\r\022\017\n\007courage\030\017 \002(\r\022\r\n\005charm\030\020 \002(\r\022\r\n\005tr"
    "ick\030\021 \002(\r\022\r\n\005speed\030\022 \002(\r\022\023\n\013proficiency\030"
    "\023 \002(\r\022\022\n\ncurrent_hp\030\024 \001(\r\"\214\001\n\rUserSkillP"
    "art\022\014\n\004part\030\001 \002(\r\022-\n\017exp_battle_info\030\002 \002"
    "(\0132\024.BasicUserBattleInfo\022\025\n\rcontinue_tim"
    "e\030\005 \002(\002\022\031\n\021can_attack_number\030\006 \002(\r\022\014\n\004hu"
    "rt\030\007 \002(\r\"\252\001\n\rUserSkillInfo\022\020\n\010skill_id\030\001"
    " \002(\r\022\023\n\013skill_level\030\002 \002(\r\022\r\n\005money\030\003 \002(\r"
    "\022\017\n\007exploit\030\004 \002(\r\022\016\n\006own_cd\030\005 \002(\002\022\020\n\010sha"
    "re_cd\030\006 \002(\002\022\035\n\005parts\030\007 \003(\0132\016.UserSkillPa"
    "rt\022\021\n\tmax_level\030\010 \002(\r\"\321\001\n\rBasicUserInfo\022"
    "\013\n\003uid\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\014\n\004type\030\003 \002(\r"
    "\022\016\n\006gender\030\004 \002(\r\022\n\n\002lv\030\005 \002(\r\022\014\n\004xpos\030\006 \002"
    "(\r\022\014\n\004ypos\030\007 \002(\r\022\016\n\006orient\030\010 \002(\r\022\023\n\013batt"
    "le_side\030\t \001(\r\022)\n\013battle_info\030\n \001(\0132\024.Bas"
    "icUserBattleInfo\022\017\n\007next_lv\030\013 \002(\r\"J\n\rCSE"
    "nterMapReq\022\r\n\005mapid\030\001 \002(\r\022\014\n\004xpos\030\002 \002(\r\022"
    "\014\n\004ypos\030\003 \002(\r\022\016\n\006orient\030\004 \002(\r\"@\n\rCSEnter"
    "MapRsp\022\r\n\005mapid\030\001 \002(\r\022 \n\010userinfo\030\002 \002(\0132"
    "\016.BasicUserInfo\"\034\n\rCSLeaveMapRsp\022\013\n\003uid\030"
    "\001 \002(\r\"\022\n\020CSGetMapUsersReq\"4\n\020CSGetMapUse"
    "rsRsp\022 \n\010userinfo\030\001 \003(\0132\016.BasicUserInfo\""
    "#\n\021CSGetUserSkillReq\022\016\n\006userid\030\001 \002(\r\"V\n\021"
    "CSGetUserSkillRsp\022\016\n\006userid\030\001 \002(\r\022\"\n\nuse"
    "rskills\030\002 \003(\0132\016.UserSkillInfo\022\r\n\005ready\030\003"
    " \003(\r\"\"\n\020CSGetUserInfoReq\022\016\n\006userid\030\001 \002(\r"
    "\"D\n\020CSGetUserInfoRsp\022\016\n\006userid\030\001 \002(\r\022 \n\010"
    "userinfo\030\002 \002(\0132\016.BasicUserInfo\":\n\021CSAddU"
    "serSkillReq\022\020\n\010skill_id\030\001 \002(\r\022\023\n\013skill_l"
    "evel\030\002 \002(\r\":\n\021CSAddUserSkillRsp\022\020\n\010skill"
    "_id\030\001 \002(\r\022\023\n\013skill_level\030\002 \002(\r\";\n\022CSUser"
    "SkillDiffReq\022\020\n\010skill_id\030\001 \002(\r\022\023\n\013skill_"
    "level\030\002 \002(\r\"\331\001\n\022CSUserSkillDiffRsp\022\020\n\010sk"
    "ill_id\030\001 \002(\r\022\023\n\013skill_level\030\002 \002(\r\022\r\n\005mon"
    "ey\030\003 \001(\r\022\017\n\007exploit\030\004 \001(\r\022\n\n\002lv\030\005 \001(\r\022)\n"
    "\013battle_info\030\006 \001(\0132\024.BasicUserBattleInfo"
    "\022\016\n\006own_cd\030\007 \001(\005\022\020\n\010share_cd\030\010 \001(\005\022\014\n\004hu"
    "rt\030\t \001(\005\022\025\n\rcontinue_time\030\n \001(\r\"E\n\tCSWal"
    "kReq\022\014\n\004xpos\030\001 \002(\r\022\014\n\004ypos\030\002 \002(\r\022\016\n\006anim"
    "id\030\003 \002(\r\022\014\n\004flip\030\004 \002(\010\"R\n\tCSWalkRsp\022\013\n\003u"
    "id\030\001 \002(\r\022\014\n\004xpos\030\002 \002(\r\022\014\n\004ypos\030\003 \002(\r\022\016\n\006"
    "animid\030\004 \002(\r\022\014\n\004flip\030\005 \002(\010\"n\n\nCSItemAttr"
    "\022\020\n\010attr_key\030\001 \002(\r\022\030\n\020attr_basic_value\030\002"
    " \002(\r\022\034\n\024attr_intensify_value\030\003 \001(\r\022\026\n\016at"
    "tr_gem_value\030\004 \001(\r\"\204\001\n\013CSEquipHole\022\022\n\nho"
    "le_index\030\001 \002(\r\022\023\n\013item_gem_id\030\002 \002(\r\022\020\n\010a"
    "ttr_key\030\003 \002(\r\022\022\n\nattr_value\030\004 \002(\r\022\022\n\natt"
    "r_min_v\030\005 \001(\r\022\022\n\nattr_max_v\030\006 \001(\r\"\246\001\n\rEq"
    "uipmentBase\022\024\n\014cost_levelup\030\001 \002(\r\0223\n\021inc"
    "r_attr_next_lv\030\002 \003(\0132\030.EquipmentBase.Ite"
    "m_Attr\022!\n\013equip_holes\030\003 \003(\0132\014.CSEquipHol"
    "e\032\'\n\tItem_Attr\022\013\n\003key\030\001 \002(\r\022\r\n\005value\030\002 \002"
    "(\r\"3\n\017SpiritStoneBase\022\017\n\007consume\030\001 \002(\r\022\017"
    "\n\007convert\030\002 \002(\r\":\n\tManorBase\022\026\n\016hunt_gai"
    "n_coin\030\001 \002(\r\022\025\n\rpick_gain_exp\030\002 \002(\r\"\330\001\n\n"
    "CSItemInfo\022\013\n\003pos\030\001 \002(\r\022\017\n\007item_id\030\002 \002(\r"
    "\022\020\n\010item_num\030\003 \002(\r\022\022\n\nitem_level\030\004 \001(\r\022\037"
    "\n\nitem_attrs\030\005 \003(\0132\013.CSItemAttr\022\"\n\nequip"
    "_info\030\006 \001(\0132\016.EquipmentBase\022!\n\007ss_info\030\007"
    " \001(\0132\020.SpiritStoneBase\022\036\n\nmanor_info\030\010 \001"
    "(\0132\n.ManorBase\"\017\n\rCSAllItemsReq\"\353\001\n\rCSAl"
    "lItemsRsp\022\024\n\014def_bag_size\030\001 \002(\r\022\026\n\016def_s"
    "tore_size\030\002 \002(\r\022\027\n\017def_ss_bag_size\030\003 \002(\r"
    "\022\031\n\021def_ss_store_size\030\004 \002(\r\022 \n\030def_equip"
    "_lvup_max_times\030\005 \002(\r\022\033\n\023def_reset_gem_t"
    "imes\030\006 \002(\r\022\035\n\025def_enter_manor_times\030\007 \002("
    "\r\022\032\n\005items\030\017 \003(\0132\013.CSItemInfo\"*\n\014CSItemA"
    "ddRsp\022\032\n\005items\030\001 \003(\0132\013.CSItemInfo\"/\n\017CSI"
    "temRemoveReq\022\013\n\003pos\030\001 \002(\r\022\017\n\007item_id\030\002 \002"
    "(\r\"/\n\017CSItemRemoveRsp\022\013\n\003pos\030\001 \002(\r\022\017\n\007it"
    "em_id\030\002 \002(\r\",\n\014CSItemUseReq\022\013\n\003pos\030\001 \002(\r"
    "\022\017\n\007item_id\030\002 \002(\r\"1\n\rCSItemMoveReq\022\020\n\010po"
    "s_from\030\001 \002(\r\022\016\n\006pos_to\030\002 \002(\r\"1\n\rCSItemMo"
    "veRsp\022\020\n\010pos_from\030\001 \002(\r\022\016\n\006pos_to\030\002 \002(\r\""
    ",\n\017CSItemUpdateRsp\022\031\n\004item\030\001 \003(\0132\013.CSIte"
    "mInfo\" \n\016CSItemOrderReq\022\016\n\006target\030\001 \002(\r\""
    "+\n\rCSInstanceReq\022\r\n\005start\030\001 \002(\r\022\013\n\003end\030\002"
    " \002(\r\"\200\001\n\rCSInstanceRsp\022,\n\tinstances\030\001 \003("
    "\0132\031.CSInstanceRsp.CSInstance\032A\n\nCSInstan"
    "ce\022\023\n\013instance_id\030\001 \002(\r\022\020\n\010activate\030\002 \002("
    "\010\022\014\n\004star\030\003 \002(\r\"\256\001\n\010CSReward\022%\n\007rewards\030"
    "\001 \003(\0132\024.CSReward.RewardInfo\022\020\n\010add_coin\030"
    "\002 \001(\r\022\017\n\007add_exp\030\003 \001(\r\022\023\n\013add_exploit\030\004 "
    "\001(\r\032C\n\nRewardInfo\022\017\n\007item_id\030\001 \002(\r\022\022\n\nit"
    "em_level\030\002 \002(\r\022\020\n\010item_num\030\003 \002(\r\"\035\n\014CSLe"
    "velUpRsp\022\r\n\005level\030\001 \002(\r\"E\n\030CSBasicUserBa"
    "ttleInfoRsp\022)\n\013battle_info\030\001 \002(\0132\024.Basic"
    "UserBattleInfo\"\030\n\026CSSearchSpiritStoneReq"
    "\"Y\n\026CSSearchSpiritStoneRsp\022\013\n\003ret\030\001 \002(\r\022"
    "\021\n\tcost_coin\030\002 \001(\r\022\016\n\006mon_id\030\003 \001(\r\022\017\n\007it"
    "em_id\030\004 \001(\r\"&\n\027CSSpiritStoneMoveBagReq\022\013"
    "\n\003pos\030\001 \002(\r\"&\n\027CSSpiritStoneMoveBagRsp\022\013"
    "\n\003ret\030\001 \002(\r\"&\n\027CSSpiritStoneLevelUpReq\022\013"
    "\n\003pos\030\001 \002(\r\"D\n\027CSSpiritStoneLevelUpRsp\022\013"
    "\n\003ret\030\001 \002(\r\022\013\n\003pos\030\002 \002(\r\022\017\n\007cost_sp\030\003 \002("
    "\r\"#\n\024CSSpiritStoneToSPReq\022\013\n\003pos\030\001 \002(\r\"E"
    "\n\024CSSpiritStoneToSPRsp\022\013\n\003ret\030\001 \002(\r\022\016\n\006s"
    "p_key\030\002 \001(\r\022\020\n\010sp_value\030\003 \001(\r\"\030\n\026CSGetEx"
    "changeSSInfoReq\"p\n\016ExchangeSSInfo\022\r\n\005ss_"
    "id\030\001 \002(\r\022\017\n\007consume\030\002 \002(\r\022\017\n\007convert\030\003 \002"
    "(\r\022\021\n\tneed_chip\030\004 \002(\r\022\013\n\003key\030\005 \002(\r\022\r\n\005va"
    "lue\030\006 \002(\r\":\n\026CSGetExchangeSSInfoRsp\022 \n\007s"
    "s_list\030\001 \003(\0132\017.ExchangeSSInfo\"!\n\rCSAddMa"
    "norReq\022\020\n\010manor_id\030\001 \002(\r\"\034\n\rCSAddManorRs"
    "p\022\013\n\003pos\030\001 \002(\r\";\n\022CSWarmSportLvUpReq\022\013\n\003"
    "pos\030\001 \002(\r\022\030\n\tto_max_lv\030\002 \001(\010:\005false\"!\n\022C"
    "SWarmSportLvUpRsp\022\013\n\003pos\030\001 \002(\r\")\n\rCSMano"
    "rOptReq\022\013\n\003pos\030\001 \002(\r\022\013\n\003opt\030\002 \002(\r\")\n\rCSM"
    "anorOptRsp\022\013\n\003pos\030\001 \002(\r\022\013\n\003opt\030\002 \002(\r\")\n\014"
    "CSMonListReq\022\013\n\003uid\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\""
    "-\n\007MonInfo\022\016\n\006mon_id\030\001 \002(\r\022\022\n\nmon_status"
    "\030\002 \002(\r\"E\n\014CSMonListRsp\022\013\n\003uid\030\001 \002(\r\022\014\n\004n"
    "ame\030\002 \002(\t\022\032\n\010mon_info\030\003 \003(\0132\010.MonInfo\"7\n"
    "\021CSSetMonStatusReq\022\016\n\006mon_id\030\001 \002(\r\022\022\n\nmo"
    "n_status\030\002 \002(\r\"D\n\021CSSetMonStatusRsp\022\013\n\003r"
    "et\030\001 \002(\r\022\016\n\006mon_id\030\002 \001(\r\022\022\n\nmon_status\030\003"
    " \001(\r\"\023\n\021CSPVPQueryRoomReq\"]\n\013PVPRoomBase"
    "\022\017\n\007room_id\030\001 \002(\r\022\021\n\ttop_level\030\002 \002(\r\022\026\n\016"
    "current_online\030\003 \002(\r\022\022\n\nmax_online\030\004 \002(\r"
    "\"0\n\021CSPVPQueryRoomRsp\022\033\n\005rooms\030\001 \003(\0132\014.P"
    "VPRoomBase\"9\n\020CSPVPBaseInfoRsp\022\017\n\007winnin"
    "g\030\001 \002(\r\022\024\n\014remain_times\030\002 \002(\r\"5\n\022CSPVPCr"
    "eateRoomReq\022\014\n\004type\030\001 \002(\r\022\021\n\ttop_level\030\002"
    " \002(\r\"#\n\020CSPVPJoinRoomReq\022\017\n\007room_id\030\001 \002("
    "\r\"U\n\013PVPSeatBase\022\n\n\002id\030\001 \002(\r\022\016\n\006avatar\030\002"
    " \002(\r\022\014\n\004name\030\003 \002(\t\022\r\n\005level\030\004 \002(\r\022\r\n\005rea"
    "dy\030\005 \002(\010\"a\n\020CSPVPJoinRoomRsp\022\017\n\007room_id\030"
    "\001 \002(\r\022\014\n\004type\030\002 \002(\r\022\021\n\ttop_level\030\003 \002(\r\022\033"
    "\n\005seats\030\004 \003(\0132\014.PVPSeatBase\"\022\n\020CSPVPExit"
    "RoomReq\"\022\n\020CSPVPExitRoomRsp\"\023\n\021CSPVPClos"
    "eRoomRsp\"\"\n\022CSPVPChangeSeatReq\022\014\n\004seat\030\001"
    " \002(\r\"\017\n\rCSPVPReadyReq\"\025\n\023CSPVPCancelRead"
    "yReq\"\037\n\017CSPVPKickoffReq\022\014\n\004seat\030\001 \002(\r\"\021\n"
    "\017CSPVPKickoffRsp\"\017\n\rCSPVPStartReq\"\036\n\rCSP"
    "VPStartRsp\022\r\n\005mapid\030\001 \002(\r\"\021\n\017CSPPVEBattl"
    "eReq\"\036\n\017CSPPVEBattleRsp\022\013\n\003ids\030\001 \003(\r\"\023\n\021"
    "CSPVEQueryRoomReq\"]\n\013PVERoomBase\022\017\n\007room"
    "_id\030\001 \002(\r\022\021\n\ttop_level\030\002 \002(\r\022\026\n\016current_"
    "online\030\003 \002(\r\022\022\n\nmax_online\030\004 \002(\r\"0\n\021CSPV"
    "EQueryRoomRsp\022\033\n\005rooms\030\001 \003(\0132\014.PVERoomBa"
    "se\";\n\020CSPVEBaseInfoRsp\022\021\n\tcountdown\030\001 \002("
    "\r\022\024\n\014remain_times\030\002 \002(\r\":\n\022CSPVECreateRo"
    "omReq\022\021\n\ttop_level\030\001 \002(\r\022\021\n\tbattle_id\030\002 "
    "\002(\r\"#\n\020CSPVEJoinRoomReq\022\017\n\007room_id\030\001 \002(\r"
    "\"*\n\027CSPVEJoinRoomFailureRsp\022\017\n\007errcode\030\001"
    " \002(\r\"U\n\013PVESeatBase\022\n\n\002id\030\001 \002(\r\022\016\n\006avata"
    "r\030\002 \002(\r\022\014\n\004name\030\003 \002(\t\022\r\n\005level\030\004 \002(\r\022\r\n\005"
    "ready\030\005 \002(\010\"S\n\020CSPVEJoinRoomRsp\022\017\n\007room_"
    "id\030\001 \002(\r\022\021\n\ttop_level\030\002 \002(\r\022\033\n\005seats\030\003 \003"
    "(\0132\014.PVESeatBase\"\022\n\020CSPVEExitRoomReq\"\022\n\020"
    "CSPVEExitRoomRsp\"\023\n\021CSPVECloseRoomRsp\"\017\n"
    "\rCSPVEReadyReq\"\025\n\023CSPVECancelReadyReq\"\037\n"
    "\017CSPVEKickoffReq\022\014\n\004seat\030\001 \002(\r\"\021\n\017CSPVEK"
    "ickoffRsp\"\017\n\rCSPVEStartReq\"\036\n\rCSPVEStart"
    "Rsp\022\r\n\005mapid\030\001 \002(\r\"\033\n\tCSPVAIReq\022\016\n\006useri"
    "d\030\001 \002(\r\"\017\n\rCSPVAIInfoReq\"\215\002\n\rCSPVAIInfoR"
    "sq\022\014\n\004rank\030\001 \002(\r\022(\n\005infos\030\002 \003(\0132\031.CSPVAI"
    "InfoRsq.CSPVAIInfo\022&\n\004logs\030\003 \003(\0132\030.CSPVA"
    "IInfoRsq.CSPVAILog\032d\n\nCSPVAIInfo\022\016\n\006user"
    "id\030\001 \002(\r\022\020\n\010reg_time\030\002 \002(\r\022\014\n\004rank\030\003 \002(\r"
    "\022\014\n\004name\030\004 \002(\t\022\014\n\004type\030\005 \002(\r\022\n\n\002lv\030\006 \002(\r"
    "\0326\n\tCSPVAILog\022\014\n\004name\030\001 \002(\t\022\016\n\006direct\030\002 "
    "\002(\010\022\013\n\003win\030\003 \002(\010\"\025\n\023CSGetEquipLvUpCDReq\""
    "(\n\023CSGetEquipLvUpCDRsp\022\021\n\tcold_time\030\001 \002("
    "\r\"K\n\022CSEquipInlayGemReq\022\021\n\tequip_pos\030\001 \002"
    "(\r\022\016\n\006gem_id\030\002 \002(\r\022\022\n\nhole_index\030\003 \002(\r\"!"
    "\n\022CSEquipInlayGemRsp\022\013\n\003ret\030\001 \002(\r\"R\n\021CSR"
    "esetGemAttrReq\022\021\n\tequip_pos\030\001 \002(\r\022\023\n\013hol"
    "es_index\030\002 \003(\r\022\025\n\rcost_attr_key\030\003 \001(\r\" \n"
    "\021CSResetGemAttrRsp\022\013\n\003ret\030\001 \002(\r\"%\n\026CSEqu"
    "ipmentStrengthReq\022\013\n\003pos\030\001 \002(\r\"H\n\026CSEqui"
    "pmentStrengthRsp\022\016\n\006result\030\001 \002(\r\022\013\n\003pos\030"
    "\002 \002(\r\022\021\n\tcold_time\030\003 \002(\r\"Z\n\025CSEquipmentC"
    "omposeReq\022\030\n\020exchange_item_id\030\001 \002(\r\022\025\n\rf"
    "rom_item_pos\030\002 \003(\r\022\020\n\005multi\030\003 \001(\r:\0011\"A\n\025"
    "CSEquipmentComposeRsp\022\030\n\020exchange_item_i"
    "d\030\001 \002(\r\022\016\n\006result\030\002 \002(\r\"\017\n\rCSTaskInfoReq"
    "\"@\n\010TaskInfo\022\017\n\007task_id\030\001 \002(\r\022\017\n\007step_id"
    "\030\002 \002(\r\022\022\n\nstep_value\030\003 \002(\r\"J\n\rCSTaskInfo"
    "Rsp\022\030\n\020acceptable_tasks\030\001 \003(\r\022\037\n\014accept_"
    "tasks\030\002 \003(\0132\t.TaskInfo\"G\n\017CSTaskDoStepRe"
    "q\022\017\n\007task_id\030\001 \002(\r\022\017\n\007step_id\030\002 \002(\r\022\022\n\ns"
    "tep_value\030\003 \002(\r\"G\n\017CSTaskDoStepRsp\022\017\n\007ta"
    "sk_id\030\001 \002(\r\022\017\n\007step_id\030\002 \002(\r\022\022\n\nstep_val"
    "ue\030\003 \002(\r\"\016\n\014CSTaskLogReq\"(\n\014CSTaskLogRsp"
    "\022\030\n\005tasks\030\001 \003(\0132\t.TaskInfo\"0\n\022CSAttribut"
    "esSetReq\022\013\n\003key\030\001 \002(\r\022\r\n\005value\030\002 \002(\r\"\037\n\017"
    "CSAttributesReq\022\014\n\004keys\030\001 \003(\r\"d\n\017CSAttri"
    "butesRsp\022)\n\006values\030\001 \003(\0132\031.CSAttributesR"
    "sp.KeyValue\032&\n\010KeyValue\022\013\n\003key\030\001 \002(\r\022\r\n\005"
    "value\030\002 \002(\r\"\035\n\014CSOnceSetReq\022\r\n\005index\030\001 \002"
    "(\r\"\033\n\tCSOnceReq\022\016\n\006indexs\030\001 \003(\r\"S\n\tCSOnc"
    "eRsp\022\037\n\006values\030\001 \003(\0132\017.CSOnceRsp.Once\032%\n"
    "\004Once\022\r\n\005index\030\001 \002(\r\022\016\n\006is_set\030\002 \002(\010\"\020\n\016"
    "CSTrainInfoReq\"R\n\016CSTrainInfoRsp\022\021\n\tpote"
    "ntial\030\001 \002(\r\022\017\n\007courage\030\002 \002(\r\022\r\n\005charm\030\003 "
    "\002(\r\022\r\n\005trick\030\004 \002(\r\"\032\n\nCSTrainReq\022\014\n\004type"
    "\030\001 \002(\r\"I\n\nCSTrainRsp\022\017\n\007courage\030\001 \002(\005\022\r\n"
    "\005charm\030\002 \002(\005\022\r\n\005trick\030\003 \002(\005\022\014\n\004succ\030\004 \002("
    "\010\"\025\n\023CSTrainDetermineReq\"\025\n\023CSTrainDeter"
    "mineRsp\"\036\n\014CSExploreReq\022\016\n\006option\030\001 \002(\r\""
    ".\n\014CSExploreRsp\022\016\n\006option\030\001 \002(\r\022\016\n\006map_i"
    "d\030\002 \002(\r\"\'\n\025CSExploreDetermineReq\022\016\n\006opti"
    "on\030\001 \002(\r\"C\n\025CSExploreDetermineRsp\022\016\n\006map"
    "_id\030\001 \002(\r\022\032\n\007rewards\030\002 \001(\0132\t.CSReward\"\021\n"
    "\017CSQueryDowerReq\"\241\001\n\017CSQueryDowerRsp\022%\n\005"
    "dower\030\001 \003(\0132\026.CSQueryDowerRsp.Dower\022\017\n\007t"
    "imeout\030\002 \001(\r\032V\n\005Dower\022\n\n\002id\030\001 \002(\r\022\r\n\005lev"
    "el\030\002 \002(\r\022\021\n\tmax_level\030\003 \002(\r\022\014\n\004plus\030\004 \002("
    "\r\022\021\n\teach_plus\030\005 \002(\r\"+\n\016CSDowerInfoReq\022\n"
    "\n\002id\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\"\236\002\n\016CSDowerInf"
    "oRsp\022\n\n\002id\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\022\024\n\014next_"
    "exploit\030\003 \002(\r\022\021\n\tnext_time\030\004 \002(\r\022\034\n\024diff"
    "_physical_attack\030\005 \002(\r\022\031\n\021diff_magic_att"
    "ack\030\006 \002(\r\022\031\n\021diff_skill_attack\030\007 \002(\r\022\035\n\025"
    "diff_physical_defence\030\010 \002(\r\022\032\n\022diff_magi"
    "c_defence\030\t \002(\r\022\032\n\022diff_skill_defence\030\n "
    "\002(\r\022\017\n\007diff_hp\030\013 \002(\r\022\014\n\004plus\030\014 \002(\r\"\030\n\nCS"
    "DowerReq\022\n\n\002id\030\001 \002(\r\"P\n\nCSDowerRsp\022\017\n\007ti"
    "meout\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\022\014\n\004plus\030\003 \002(\r"
    "\022\024\n\014next_exploit\030\004 \002(\r\"6\n\026CSExchangePara"
    "meterReq\022\n\n\002id\030\001 \002(\r\022\020\n\005param\030\002 \001(\r:\0010\"A"
    "\n\026CSExchangeParameterRsp\022\014\n\004succ\030\001 \002(\010\022\n"
    "\n\002id\030\002 \002(\r\022\r\n\005param\030\003 \001(\r\"\244\001\n\014ShopItemIn"
    "fo\022\r\n\005index\030\001 \002(\r\022%\n\tfrom_item\030\002 \002(\0132\022.S"
    "hopItemInfo.Item\022#\n\007to_item\030\003 \002(\0132\022.Shop"
    "ItemInfo.Item\022\016\n\006is_buy\030\004 \002(\010\032)\n\004Item\022\017\n"
    "\007item_id\030\001 \002(\r\022\020\n\010item_num\030\002 \002(\r\"\023\n\021CSGe"
    "tShopItemsReq\"1\n\021CSGetShopItemsRsp\022\034\n\005it"
    "ems\030\001 \003(\0132\r.ShopItemInfo\"!\n\020CSBuyShopIte"
    "mReq\022\r\n\005index\030\001 \002(\r\"/\n\020CSBuyShopItemRsp\022"
    "\r\n\005index\030\001 \002(\r\022\014\n\004succ\030\002 \002(\010\"\"\n\020CSGetUse"
    "rItemReq\022\016\n\006userid\030\001 \002(\r\">\n\020CSGetUserIte"
    "mRsp\022\016\n\006userid\030\001 \002(\r\022\032\n\005items\030\002 \003(\0132\013.CS"
    "ItemInfo\"(\n\026CSGetUserAttributesReq\022\016\n\006us"
    "erid\030\001 \002(\r\"N\n\026CSGetUserAttributesRsp\022\016\n\006"
    "userid\030\001 \002(\r\022$\n\nattributes\030\002 \002(\0132\020.CSAtt"
    "ributesRsp\"X\n\030CSNotifyMoneyConfInfoRsp\022\013"
    "\n\003pay\030\001 \002(\r\022\017\n\007diamond\030\002 \002(\r\022\017\n\007explore\030"
    "\003 \002(\r\022\r\n\005train\030\004 \002(\r*\301\023\n\020PB_PLAYET_ATTR_"
    "T\022\025\n\021PB_ATTR_PLAYER_SP\020\001\022\034\n\030PB_ATTR_PLAY"
    "ER_SS_MOD_ID\020\002\022(\n$PB_ATTR_PLAYER_GEM_BAC"
    "KPACK_CAPACITY\020\006\022\"\n\036PB_ATTR_PLAYER_RESET"
    "_GEM_TIMES\020\013\022!\n\035PB_ATTR_EQUIP_LVUP_USED_"
    "TIMES\020\014\022\031\n\025PB_ATTR_EFFECTIVENESS\020\r\022$\n PB"
    "_ATTR_PLAYER_ENTER_MANOR_TIMES\020\020\022 \n\034PB_A"
    "TTR_PLAYER_EXPLORE_TIMES\020\025\022\033\n\027PB_ATTR_CO"
    "NSTEL_MIN_DEF\020d\022\035\n\031PB_ATTR_CONSTEL_1_CAP"
    "ACIT\020e\022\035\n\031PB_ATTR_CONSTEL_2_CAPACIT\020f\022\035\n"
    "\031PB_ATTR_CONSTEL_3_CAPACIT\020g\022\035\n\031PB_ATTR_"
    "CONSTEL_4_CAPACIT\020h\022\035\n\031PB_ATTR_CONSTEL_5"
    "_CAPACIT\020i\022\035\n\031PB_ATTR_CONSTEL_6_CAPACIT\020"
    "j\022\035\n\031PB_ATTR_CONSTEL_7_CAPACIT\020k\022\035\n\031PB_A"
    "TTR_CONSTEL_8_CAPACIT\020l\022\035\n\031PB_ATTR_CONST"
    "EL_9_CAPACIT\020m\022\036\n\032PB_ATTR_CONSTEL_10_CAP"
    "ACIT\020n\022\036\n\032PB_ATTR_CONSTEL_11_CAPACIT\020o\022\036"
    "\n\032PB_ATTR_CONSTEL_12_CAPACIT\020p\022\030\n\022PB_ATT"
    "R_DEF_MIN_CD\020\340\247\022\022\033\n\025PB_ATTR_EQUIP_LVUP_C"
    "D\020\304\250\022\022\033\n\025PB_ATTR_DOWER_LVUP_CD\020\250\251\022\022\033\n\025PB"
    "_ATTR_SKILL_LVUP_CD\020\214\252\022\022\025\n\017PB_ATTR_PVAI_"
    "CD\020\360\252\022\022\036\n\030PB_ATTR_AB_NORMAL_MAP_CD\020\324\253\022\022\037"
    "\n\031PB_ATTR_AB_SPECIAL_MAP_CD\020\325\253\022\022\033\n\025PB_AT"
    "TR_WOELD_BOSS_CD\020\270\254\022\022\026\n\020PB_ATTR_MANOR_CD"
    "\020\234\255\022\022\025\n\017PB_ATTR_SHOP_CD\020\200\256\022\022\030\n\022PB_ATTR_D"
    "EF_MAX_CD\020\357\365\022\022\033\n\025PB_ATTR_DEF_MIN_OTHER\020\360"
    "\365\022\022\033\n\025PB_ATTR_DEF_MAX_OTHER\020\367\234\023\022!\n\033PB_AT"
    "TR_RESET_GEM_BUY_TIMES\020\370\234\023\022\035\n\027PB_ATTR_MA"
    "NOR_BUY_TIMES\020\334\235\023\022\037\n\031PB_ATTR_DEF_MAX_BUY"
    "_TIMES\020\377\303\023\022\036\n\030PB_ATTR_DEF_MIN_CAPACITY\020\200"
    "\304\023\022 \n\032PB_ATTR_BUY_MANOR_CAPACITY\020\200\304\023\022 \n\032"
    "PB_ATTR_BUY_SKILL_CAPACITY\020\344\304\023\022\"\n\034PB_ATT"
    "R_BUY_CONSTEL_CAPACITY\020\226\305\023\022%\n\037PB_ATTR_BU"
    "Y_EQUIP_HOLE_CAPACITY\020\252\305\023\022!\n\033PB_ATTR_BUY"
    "_SS_BAG_CAPACITY\020\310\305\023\022\036\n\030PB_ATTR_BUY_BAG_"
    "CAPACITY\020\254\306\023\022 \n\032PB_ATTR_BUY_STORE_CAPACI"
    "TY\020\220\307\023\022\036\n\030PB_ATTR_DEF_MAX_CAPACITY\020\217\222\024\022\034"
    "\n\026PB_ATTR_PLAYER_STAMINA\020\200\262\031\022\031\n\023PB_ATTR_"
    "PLAYER_COIN\020\201\262\031\022\034\n\026PB_ATTR_PLAYER_DIAMON"
    "D\020\202\262\031\022\021\n\013PB_ATTR_EXP\020\203\262\031\022\035\n\027PB_ATTR_PLAY"
    "ER_PRESTIGE\020\204\262\031\022\036\n\030PB_ATTR_PLAYER_GEM_AN"
    "IMA\020\205\262\031\022\034\n\026PB_ATTR_PLAYER_SS_CHIP\020\206\262\031\022\034\n"
    "\026PB_ATTR_PLAYER_EXPLOIT\020\207\262\031\022 \n\032PB_ATTR_P"
    "LAYER_EXPLORE_EXP\020\210\262\031\022\031\n\023PB_ATTR_SEGMENT"
    "_DEF\020\277\204=\022\025\n\017PB_ATTR_EXPLOIT\020\207\262\031\022#\n\035PB_AT"
    "TR_PLAYER_LAST_LOGIN_MAP\020\301\204=\022\035\n\027PB_ATTR_"
    "LAST_EXPLORE_ID\020\302\204=\022\034\n\026PB_ATTR_SET_ONCE_"
    "BEGIN\020\340\221C\022\032\n\024PB_ATTR_SET_ONCE_END\020\200\237I\022\027\n"
    "\021PB_ATTR_SET_BEGIN\020\201\237I\022\025\n\017PB_ATTR_SET_EN"
    "D\020\344\237I\022\031\n\023PB_ATTR_DOWER_START\020\220\355I\022\027\n\021PB_A"
    "TTR_DOWER_END\020\240\273J\022\035\n\027PB_ATTR_SHOP_ITEM_S"
    "TART\020\260\211K\022\033\n\025PB_ATTR_SHOP_ITEM_END\020\224\212K\022!\n"
    "\033PB_ATTR_SHOP_ITEM_BUY_START\020\370\212K\022\037\n\031PB_A"
    "TTR_SHOP_ITEM_BUY_END\020\334\213K\022!\n\033PB_ATTR_PHY"
    "SICAL_ATTACK_ADD\020\220\327z\022\036\n\030PB_ATTR_MAGIC_AT"
    "TACK_ADD\020\240\245{\022\036\n\030PB_ATTR_SKILL_ATTACK_ADD"
    "\020\260\363{\022\"\n\034PB_ATTR_PHYSICAL_DEFENCE_ADD\020\300\301|"
    "\022\037\n\031PB_ATTR_MAGIC_DEFENCE_ADD\020\320\217}\022\037\n\031PB_"
    "ATTR_SKILL_DEFENCE_ADD\020\340\335}\022\024\n\016PB_ATTR_HP"
    "_ADD\020\360\253~\022\031\n\023PB_ATTR_COURAGE_ADD\020\200\372~\022\027\n\021P"
    "B_ATTR_CHARM_ADD\020\220\310\177\022\030\n\021PB_ATTR_TRICK_AD"
    "D\020\240\226\200\001\022#\n\034PB_ATTR_AUTO_BTL_INSTANCE_ID\020\301"
    "\215\267\001\022#\n\034PB_ATTR_AUTO_BTL_REMAIN_TURN\020\302\215\267\001"
    "*\363\002\n\016PB_ITEM_ATTR_T\022\027\n\023PB_ITEM_ATTR_PHYA"
    "TK\020\001\022\027\n\023PB_ITEM_ATTR_MAGATK\020\002\022\027\n\023PB_ITEM"
    "_ATTR_SKIATK\020\003\022\027\n\023PB_ITEM_ATTR_PHYDEF\020\004\022"
    "\027\n\023PB_ITEM_ATTR_MAGDEF\020\005\022\027\n\023PB_ITEM_ATTR"
    "_SKIDEF\020\006\022\023\n\017PB_ITEM_ATTR_HP\020\007\022\025\n\021PB_ITE"
    "M_ATTR_ACCU\020\010\022\025\n\021PB_ITEM_ATTR_DODG\020\t\022\024\n\020"
    "PB_ITEM_ATTR_WRK\020\n\022\026\n\022PB_ITEM_ATTR_PARRY"
    "\020\013\022\025\n\021PB_ITEM_ATTR_CRIT\020\014\022\025\n\021PB_ITEM_ATT"
    "R_TENA\020\r\022\024\n\020PB_ITEM_ATTR_SLY\020\016\022\026\n\022PB_ITE"
    "M_ATTR_SPEED\020\017", 12774);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs_core.proto", &protobuf_RegisterTypes);
  BasicUserBattleInfo::default_instance_ = new BasicUserBattleInfo();
  UserSkillPart::default_instance_ = new UserSkillPart();
  UserSkillInfo::default_instance_ = new UserSkillInfo();
  BasicUserInfo::default_instance_ = new BasicUserInfo();
  CSEnterMapReq::default_instance_ = new CSEnterMapReq();
  CSEnterMapRsp::default_instance_ = new CSEnterMapRsp();
  CSLeaveMapRsp::default_instance_ = new CSLeaveMapRsp();
  CSGetMapUsersReq::default_instance_ = new CSGetMapUsersReq();
  CSGetMapUsersRsp::default_instance_ = new CSGetMapUsersRsp();
  CSGetUserSkillReq::default_instance_ = new CSGetUserSkillReq();
  CSGetUserSkillRsp::default_instance_ = new CSGetUserSkillRsp();
  CSGetUserInfoReq::default_instance_ = new CSGetUserInfoReq();
  CSGetUserInfoRsp::default_instance_ = new CSGetUserInfoRsp();
  CSAddUserSkillReq::default_instance_ = new CSAddUserSkillReq();
  CSAddUserSkillRsp::default_instance_ = new CSAddUserSkillRsp();
  CSUserSkillDiffReq::default_instance_ = new CSUserSkillDiffReq();
  CSUserSkillDiffRsp::default_instance_ = new CSUserSkillDiffRsp();
  CSWalkReq::default_instance_ = new CSWalkReq();
  CSWalkRsp::default_instance_ = new CSWalkRsp();
  CSItemAttr::default_instance_ = new CSItemAttr();
  CSEquipHole::default_instance_ = new CSEquipHole();
  EquipmentBase::default_instance_ = new EquipmentBase();
  EquipmentBase_Item_Attr::default_instance_ = new EquipmentBase_Item_Attr();
  SpiritStoneBase::default_instance_ = new SpiritStoneBase();
  ManorBase::default_instance_ = new ManorBase();
  CSItemInfo::default_instance_ = new CSItemInfo();
  CSAllItemsReq::default_instance_ = new CSAllItemsReq();
  CSAllItemsRsp::default_instance_ = new CSAllItemsRsp();
  CSItemAddRsp::default_instance_ = new CSItemAddRsp();
  CSItemRemoveReq::default_instance_ = new CSItemRemoveReq();
  CSItemRemoveRsp::default_instance_ = new CSItemRemoveRsp();
  CSItemUseReq::default_instance_ = new CSItemUseReq();
  CSItemMoveReq::default_instance_ = new CSItemMoveReq();
  CSItemMoveRsp::default_instance_ = new CSItemMoveRsp();
  CSItemUpdateRsp::default_instance_ = new CSItemUpdateRsp();
  CSItemOrderReq::default_instance_ = new CSItemOrderReq();
  CSInstanceReq::default_instance_ = new CSInstanceReq();
  CSInstanceRsp::default_instance_ = new CSInstanceRsp();
  CSInstanceRsp_CSInstance::default_instance_ = new CSInstanceRsp_CSInstance();
  CSReward::default_instance_ = new CSReward();
  CSReward_RewardInfo::default_instance_ = new CSReward_RewardInfo();
  CSLevelUpRsp::default_instance_ = new CSLevelUpRsp();
  CSBasicUserBattleInfoRsp::default_instance_ = new CSBasicUserBattleInfoRsp();
  CSSearchSpiritStoneReq::default_instance_ = new CSSearchSpiritStoneReq();
  CSSearchSpiritStoneRsp::default_instance_ = new CSSearchSpiritStoneRsp();
  CSSpiritStoneMoveBagReq::default_instance_ = new CSSpiritStoneMoveBagReq();
  CSSpiritStoneMoveBagRsp::default_instance_ = new CSSpiritStoneMoveBagRsp();
  CSSpiritStoneLevelUpReq::default_instance_ = new CSSpiritStoneLevelUpReq();
  CSSpiritStoneLevelUpRsp::default_instance_ = new CSSpiritStoneLevelUpRsp();
  CSSpiritStoneToSPReq::default_instance_ = new CSSpiritStoneToSPReq();
  CSSpiritStoneToSPRsp::default_instance_ = new CSSpiritStoneToSPRsp();
  CSGetExchangeSSInfoReq::default_instance_ = new CSGetExchangeSSInfoReq();
  ExchangeSSInfo::default_instance_ = new ExchangeSSInfo();
  CSGetExchangeSSInfoRsp::default_instance_ = new CSGetExchangeSSInfoRsp();
  CSAddManorReq::default_instance_ = new CSAddManorReq();
  CSAddManorRsp::default_instance_ = new CSAddManorRsp();
  CSWarmSportLvUpReq::default_instance_ = new CSWarmSportLvUpReq();
  CSWarmSportLvUpRsp::default_instance_ = new CSWarmSportLvUpRsp();
  CSManorOptReq::default_instance_ = new CSManorOptReq();
  CSManorOptRsp::default_instance_ = new CSManorOptRsp();
  CSMonListReq::default_instance_ = new CSMonListReq();
  MonInfo::default_instance_ = new MonInfo();
  CSMonListRsp::default_instance_ = new CSMonListRsp();
  CSSetMonStatusReq::default_instance_ = new CSSetMonStatusReq();
  CSSetMonStatusRsp::default_instance_ = new CSSetMonStatusRsp();
  CSPVPQueryRoomReq::default_instance_ = new CSPVPQueryRoomReq();
  PVPRoomBase::default_instance_ = new PVPRoomBase();
  CSPVPQueryRoomRsp::default_instance_ = new CSPVPQueryRoomRsp();
  CSPVPBaseInfoRsp::default_instance_ = new CSPVPBaseInfoRsp();
  CSPVPCreateRoomReq::default_instance_ = new CSPVPCreateRoomReq();
  CSPVPJoinRoomReq::default_instance_ = new CSPVPJoinRoomReq();
  PVPSeatBase::default_instance_ = new PVPSeatBase();
  CSPVPJoinRoomRsp::default_instance_ = new CSPVPJoinRoomRsp();
  CSPVPExitRoomReq::default_instance_ = new CSPVPExitRoomReq();
  CSPVPExitRoomRsp::default_instance_ = new CSPVPExitRoomRsp();
  CSPVPCloseRoomRsp::default_instance_ = new CSPVPCloseRoomRsp();
  CSPVPChangeSeatReq::default_instance_ = new CSPVPChangeSeatReq();
  CSPVPReadyReq::default_instance_ = new CSPVPReadyReq();
  CSPVPCancelReadyReq::default_instance_ = new CSPVPCancelReadyReq();
  CSPVPKickoffReq::default_instance_ = new CSPVPKickoffReq();
  CSPVPKickoffRsp::default_instance_ = new CSPVPKickoffRsp();
  CSPVPStartReq::default_instance_ = new CSPVPStartReq();
  CSPVPStartRsp::default_instance_ = new CSPVPStartRsp();
  CSPPVEBattleReq::default_instance_ = new CSPPVEBattleReq();
  CSPPVEBattleRsp::default_instance_ = new CSPPVEBattleRsp();
  CSPVEQueryRoomReq::default_instance_ = new CSPVEQueryRoomReq();
  PVERoomBase::default_instance_ = new PVERoomBase();
  CSPVEQueryRoomRsp::default_instance_ = new CSPVEQueryRoomRsp();
  CSPVEBaseInfoRsp::default_instance_ = new CSPVEBaseInfoRsp();
  CSPVECreateRoomReq::default_instance_ = new CSPVECreateRoomReq();
  CSPVEJoinRoomReq::default_instance_ = new CSPVEJoinRoomReq();
  CSPVEJoinRoomFailureRsp::default_instance_ = new CSPVEJoinRoomFailureRsp();
  PVESeatBase::default_instance_ = new PVESeatBase();
  CSPVEJoinRoomRsp::default_instance_ = new CSPVEJoinRoomRsp();
  CSPVEExitRoomReq::default_instance_ = new CSPVEExitRoomReq();
  CSPVEExitRoomRsp::default_instance_ = new CSPVEExitRoomRsp();
  CSPVECloseRoomRsp::default_instance_ = new CSPVECloseRoomRsp();
  CSPVEReadyReq::default_instance_ = new CSPVEReadyReq();
  CSPVECancelReadyReq::default_instance_ = new CSPVECancelReadyReq();
  CSPVEKickoffReq::default_instance_ = new CSPVEKickoffReq();
  CSPVEKickoffRsp::default_instance_ = new CSPVEKickoffRsp();
  CSPVEStartReq::default_instance_ = new CSPVEStartReq();
  CSPVEStartRsp::default_instance_ = new CSPVEStartRsp();
  CSPVAIReq::default_instance_ = new CSPVAIReq();
  CSPVAIInfoReq::default_instance_ = new CSPVAIInfoReq();
  CSPVAIInfoRsq::default_instance_ = new CSPVAIInfoRsq();
  CSPVAIInfoRsq_CSPVAIInfo::default_instance_ = new CSPVAIInfoRsq_CSPVAIInfo();
  CSPVAIInfoRsq_CSPVAILog::default_instance_ = new CSPVAIInfoRsq_CSPVAILog();
  CSGetEquipLvUpCDReq::default_instance_ = new CSGetEquipLvUpCDReq();
  CSGetEquipLvUpCDRsp::default_instance_ = new CSGetEquipLvUpCDRsp();
  CSEquipInlayGemReq::default_instance_ = new CSEquipInlayGemReq();
  CSEquipInlayGemRsp::default_instance_ = new CSEquipInlayGemRsp();
  CSResetGemAttrReq::default_instance_ = new CSResetGemAttrReq();
  CSResetGemAttrRsp::default_instance_ = new CSResetGemAttrRsp();
  CSEquipmentStrengthReq::default_instance_ = new CSEquipmentStrengthReq();
  CSEquipmentStrengthRsp::default_instance_ = new CSEquipmentStrengthRsp();
  CSEquipmentComposeReq::default_instance_ = new CSEquipmentComposeReq();
  CSEquipmentComposeRsp::default_instance_ = new CSEquipmentComposeRsp();
  CSTaskInfoReq::default_instance_ = new CSTaskInfoReq();
  TaskInfo::default_instance_ = new TaskInfo();
  CSTaskInfoRsp::default_instance_ = new CSTaskInfoRsp();
  CSTaskDoStepReq::default_instance_ = new CSTaskDoStepReq();
  CSTaskDoStepRsp::default_instance_ = new CSTaskDoStepRsp();
  CSTaskLogReq::default_instance_ = new CSTaskLogReq();
  CSTaskLogRsp::default_instance_ = new CSTaskLogRsp();
  CSAttributesSetReq::default_instance_ = new CSAttributesSetReq();
  CSAttributesReq::default_instance_ = new CSAttributesReq();
  CSAttributesRsp::default_instance_ = new CSAttributesRsp();
  CSAttributesRsp_KeyValue::default_instance_ = new CSAttributesRsp_KeyValue();
  CSOnceSetReq::default_instance_ = new CSOnceSetReq();
  CSOnceReq::default_instance_ = new CSOnceReq();
  CSOnceRsp::default_instance_ = new CSOnceRsp();
  CSOnceRsp_Once::default_instance_ = new CSOnceRsp_Once();
  CSTrainInfoReq::default_instance_ = new CSTrainInfoReq();
  CSTrainInfoRsp::default_instance_ = new CSTrainInfoRsp();
  CSTrainReq::default_instance_ = new CSTrainReq();
  CSTrainRsp::default_instance_ = new CSTrainRsp();
  CSTrainDetermineReq::default_instance_ = new CSTrainDetermineReq();
  CSTrainDetermineRsp::default_instance_ = new CSTrainDetermineRsp();
  CSExploreReq::default_instance_ = new CSExploreReq();
  CSExploreRsp::default_instance_ = new CSExploreRsp();
  CSExploreDetermineReq::default_instance_ = new CSExploreDetermineReq();
  CSExploreDetermineRsp::default_instance_ = new CSExploreDetermineRsp();
  CSQueryDowerReq::default_instance_ = new CSQueryDowerReq();
  CSQueryDowerRsp::default_instance_ = new CSQueryDowerRsp();
  CSQueryDowerRsp_Dower::default_instance_ = new CSQueryDowerRsp_Dower();
  CSDowerInfoReq::default_instance_ = new CSDowerInfoReq();
  CSDowerInfoRsp::default_instance_ = new CSDowerInfoRsp();
  CSDowerReq::default_instance_ = new CSDowerReq();
  CSDowerRsp::default_instance_ = new CSDowerRsp();
  CSExchangeParameterReq::default_instance_ = new CSExchangeParameterReq();
  CSExchangeParameterRsp::default_instance_ = new CSExchangeParameterRsp();
  ShopItemInfo::default_instance_ = new ShopItemInfo();
  ShopItemInfo_Item::default_instance_ = new ShopItemInfo_Item();
  CSGetShopItemsReq::default_instance_ = new CSGetShopItemsReq();
  CSGetShopItemsRsp::default_instance_ = new CSGetShopItemsRsp();
  CSBuyShopItemReq::default_instance_ = new CSBuyShopItemReq();
  CSBuyShopItemRsp::default_instance_ = new CSBuyShopItemRsp();
  CSGetUserItemReq::default_instance_ = new CSGetUserItemReq();
  CSGetUserItemRsp::default_instance_ = new CSGetUserItemRsp();
  CSGetUserAttributesReq::default_instance_ = new CSGetUserAttributesReq();
  CSGetUserAttributesRsp::default_instance_ = new CSGetUserAttributesRsp();
  CSNotifyMoneyConfInfoRsp::default_instance_ = new CSNotifyMoneyConfInfoRsp();
  BasicUserBattleInfo::default_instance_->InitAsDefaultInstance();
  UserSkillPart::default_instance_->InitAsDefaultInstance();
  UserSkillInfo::default_instance_->InitAsDefaultInstance();
  BasicUserInfo::default_instance_->InitAsDefaultInstance();
  CSEnterMapReq::default_instance_->InitAsDefaultInstance();
  CSEnterMapRsp::default_instance_->InitAsDefaultInstance();
  CSLeaveMapRsp::default_instance_->InitAsDefaultInstance();
  CSGetMapUsersReq::default_instance_->InitAsDefaultInstance();
  CSGetMapUsersRsp::default_instance_->InitAsDefaultInstance();
  CSGetUserSkillReq::default_instance_->InitAsDefaultInstance();
  CSGetUserSkillRsp::default_instance_->InitAsDefaultInstance();
  CSGetUserInfoReq::default_instance_->InitAsDefaultInstance();
  CSGetUserInfoRsp::default_instance_->InitAsDefaultInstance();
  CSAddUserSkillReq::default_instance_->InitAsDefaultInstance();
  CSAddUserSkillRsp::default_instance_->InitAsDefaultInstance();
  CSUserSkillDiffReq::default_instance_->InitAsDefaultInstance();
  CSUserSkillDiffRsp::default_instance_->InitAsDefaultInstance();
  CSWalkReq::default_instance_->InitAsDefaultInstance();
  CSWalkRsp::default_instance_->InitAsDefaultInstance();
  CSItemAttr::default_instance_->InitAsDefaultInstance();
  CSEquipHole::default_instance_->InitAsDefaultInstance();
  EquipmentBase::default_instance_->InitAsDefaultInstance();
  EquipmentBase_Item_Attr::default_instance_->InitAsDefaultInstance();
  SpiritStoneBase::default_instance_->InitAsDefaultInstance();
  ManorBase::default_instance_->InitAsDefaultInstance();
  CSItemInfo::default_instance_->InitAsDefaultInstance();
  CSAllItemsReq::default_instance_->InitAsDefaultInstance();
  CSAllItemsRsp::default_instance_->InitAsDefaultInstance();
  CSItemAddRsp::default_instance_->InitAsDefaultInstance();
  CSItemRemoveReq::default_instance_->InitAsDefaultInstance();
  CSItemRemoveRsp::default_instance_->InitAsDefaultInstance();
  CSItemUseReq::default_instance_->InitAsDefaultInstance();
  CSItemMoveReq::default_instance_->InitAsDefaultInstance();
  CSItemMoveRsp::default_instance_->InitAsDefaultInstance();
  CSItemUpdateRsp::default_instance_->InitAsDefaultInstance();
  CSItemOrderReq::default_instance_->InitAsDefaultInstance();
  CSInstanceReq::default_instance_->InitAsDefaultInstance();
  CSInstanceRsp::default_instance_->InitAsDefaultInstance();
  CSInstanceRsp_CSInstance::default_instance_->InitAsDefaultInstance();
  CSReward::default_instance_->InitAsDefaultInstance();
  CSReward_RewardInfo::default_instance_->InitAsDefaultInstance();
  CSLevelUpRsp::default_instance_->InitAsDefaultInstance();
  CSBasicUserBattleInfoRsp::default_instance_->InitAsDefaultInstance();
  CSSearchSpiritStoneReq::default_instance_->InitAsDefaultInstance();
  CSSearchSpiritStoneRsp::default_instance_->InitAsDefaultInstance();
  CSSpiritStoneMoveBagReq::default_instance_->InitAsDefaultInstance();
  CSSpiritStoneMoveBagRsp::default_instance_->InitAsDefaultInstance();
  CSSpiritStoneLevelUpReq::default_instance_->InitAsDefaultInstance();
  CSSpiritStoneLevelUpRsp::default_instance_->InitAsDefaultInstance();
  CSSpiritStoneToSPReq::default_instance_->InitAsDefaultInstance();
  CSSpiritStoneToSPRsp::default_instance_->InitAsDefaultInstance();
  CSGetExchangeSSInfoReq::default_instance_->InitAsDefaultInstance();
  ExchangeSSInfo::default_instance_->InitAsDefaultInstance();
  CSGetExchangeSSInfoRsp::default_instance_->InitAsDefaultInstance();
  CSAddManorReq::default_instance_->InitAsDefaultInstance();
  CSAddManorRsp::default_instance_->InitAsDefaultInstance();
  CSWarmSportLvUpReq::default_instance_->InitAsDefaultInstance();
  CSWarmSportLvUpRsp::default_instance_->InitAsDefaultInstance();
  CSManorOptReq::default_instance_->InitAsDefaultInstance();
  CSManorOptRsp::default_instance_->InitAsDefaultInstance();
  CSMonListReq::default_instance_->InitAsDefaultInstance();
  MonInfo::default_instance_->InitAsDefaultInstance();
  CSMonListRsp::default_instance_->InitAsDefaultInstance();
  CSSetMonStatusReq::default_instance_->InitAsDefaultInstance();
  CSSetMonStatusRsp::default_instance_->InitAsDefaultInstance();
  CSPVPQueryRoomReq::default_instance_->InitAsDefaultInstance();
  PVPRoomBase::default_instance_->InitAsDefaultInstance();
  CSPVPQueryRoomRsp::default_instance_->InitAsDefaultInstance();
  CSPVPBaseInfoRsp::default_instance_->InitAsDefaultInstance();
  CSPVPCreateRoomReq::default_instance_->InitAsDefaultInstance();
  CSPVPJoinRoomReq::default_instance_->InitAsDefaultInstance();
  PVPSeatBase::default_instance_->InitAsDefaultInstance();
  CSPVPJoinRoomRsp::default_instance_->InitAsDefaultInstance();
  CSPVPExitRoomReq::default_instance_->InitAsDefaultInstance();
  CSPVPExitRoomRsp::default_instance_->InitAsDefaultInstance();
  CSPVPCloseRoomRsp::default_instance_->InitAsDefaultInstance();
  CSPVPChangeSeatReq::default_instance_->InitAsDefaultInstance();
  CSPVPReadyReq::default_instance_->InitAsDefaultInstance();
  CSPVPCancelReadyReq::default_instance_->InitAsDefaultInstance();
  CSPVPKickoffReq::default_instance_->InitAsDefaultInstance();
  CSPVPKickoffRsp::default_instance_->InitAsDefaultInstance();
  CSPVPStartReq::default_instance_->InitAsDefaultInstance();
  CSPVPStartRsp::default_instance_->InitAsDefaultInstance();
  CSPPVEBattleReq::default_instance_->InitAsDefaultInstance();
  CSPPVEBattleRsp::default_instance_->InitAsDefaultInstance();
  CSPVEQueryRoomReq::default_instance_->InitAsDefaultInstance();
  PVERoomBase::default_instance_->InitAsDefaultInstance();
  CSPVEQueryRoomRsp::default_instance_->InitAsDefaultInstance();
  CSPVEBaseInfoRsp::default_instance_->InitAsDefaultInstance();
  CSPVECreateRoomReq::default_instance_->InitAsDefaultInstance();
  CSPVEJoinRoomReq::default_instance_->InitAsDefaultInstance();
  CSPVEJoinRoomFailureRsp::default_instance_->InitAsDefaultInstance();
  PVESeatBase::default_instance_->InitAsDefaultInstance();
  CSPVEJoinRoomRsp::default_instance_->InitAsDefaultInstance();
  CSPVEExitRoomReq::default_instance_->InitAsDefaultInstance();
  CSPVEExitRoomRsp::default_instance_->InitAsDefaultInstance();
  CSPVECloseRoomRsp::default_instance_->InitAsDefaultInstance();
  CSPVEReadyReq::default_instance_->InitAsDefaultInstance();
  CSPVECancelReadyReq::default_instance_->InitAsDefaultInstance();
  CSPVEKickoffReq::default_instance_->InitAsDefaultInstance();
  CSPVEKickoffRsp::default_instance_->InitAsDefaultInstance();
  CSPVEStartReq::default_instance_->InitAsDefaultInstance();
  CSPVEStartRsp::default_instance_->InitAsDefaultInstance();
  CSPVAIReq::default_instance_->InitAsDefaultInstance();
  CSPVAIInfoReq::default_instance_->InitAsDefaultInstance();
  CSPVAIInfoRsq::default_instance_->InitAsDefaultInstance();
  CSPVAIInfoRsq_CSPVAIInfo::default_instance_->InitAsDefaultInstance();
  CSPVAIInfoRsq_CSPVAILog::default_instance_->InitAsDefaultInstance();
  CSGetEquipLvUpCDReq::default_instance_->InitAsDefaultInstance();
  CSGetEquipLvUpCDRsp::default_instance_->InitAsDefaultInstance();
  CSEquipInlayGemReq::default_instance_->InitAsDefaultInstance();
  CSEquipInlayGemRsp::default_instance_->InitAsDefaultInstance();
  CSResetGemAttrReq::default_instance_->InitAsDefaultInstance();
  CSResetGemAttrRsp::default_instance_->InitAsDefaultInstance();
  CSEquipmentStrengthReq::default_instance_->InitAsDefaultInstance();
  CSEquipmentStrengthRsp::default_instance_->InitAsDefaultInstance();
  CSEquipmentComposeReq::default_instance_->InitAsDefaultInstance();
  CSEquipmentComposeRsp::default_instance_->InitAsDefaultInstance();
  CSTaskInfoReq::default_instance_->InitAsDefaultInstance();
  TaskInfo::default_instance_->InitAsDefaultInstance();
  CSTaskInfoRsp::default_instance_->InitAsDefaultInstance();
  CSTaskDoStepReq::default_instance_->InitAsDefaultInstance();
  CSTaskDoStepRsp::default_instance_->InitAsDefaultInstance();
  CSTaskLogReq::default_instance_->InitAsDefaultInstance();
  CSTaskLogRsp::default_instance_->InitAsDefaultInstance();
  CSAttributesSetReq::default_instance_->InitAsDefaultInstance();
  CSAttributesReq::default_instance_->InitAsDefaultInstance();
  CSAttributesRsp::default_instance_->InitAsDefaultInstance();
  CSAttributesRsp_KeyValue::default_instance_->InitAsDefaultInstance();
  CSOnceSetReq::default_instance_->InitAsDefaultInstance();
  CSOnceReq::default_instance_->InitAsDefaultInstance();
  CSOnceRsp::default_instance_->InitAsDefaultInstance();
  CSOnceRsp_Once::default_instance_->InitAsDefaultInstance();
  CSTrainInfoReq::default_instance_->InitAsDefaultInstance();
  CSTrainInfoRsp::default_instance_->InitAsDefaultInstance();
  CSTrainReq::default_instance_->InitAsDefaultInstance();
  CSTrainRsp::default_instance_->InitAsDefaultInstance();
  CSTrainDetermineReq::default_instance_->InitAsDefaultInstance();
  CSTrainDetermineRsp::default_instance_->InitAsDefaultInstance();
  CSExploreReq::default_instance_->InitAsDefaultInstance();
  CSExploreRsp::default_instance_->InitAsDefaultInstance();
  CSExploreDetermineReq::default_instance_->InitAsDefaultInstance();
  CSExploreDetermineRsp::default_instance_->InitAsDefaultInstance();
  CSQueryDowerReq::default_instance_->InitAsDefaultInstance();
  CSQueryDowerRsp::default_instance_->InitAsDefaultInstance();
  CSQueryDowerRsp_Dower::default_instance_->InitAsDefaultInstance();
  CSDowerInfoReq::default_instance_->InitAsDefaultInstance();
  CSDowerInfoRsp::default_instance_->InitAsDefaultInstance();
  CSDowerReq::default_instance_->InitAsDefaultInstance();
  CSDowerRsp::default_instance_->InitAsDefaultInstance();
  CSExchangeParameterReq::default_instance_->InitAsDefaultInstance();
  CSExchangeParameterRsp::default_instance_->InitAsDefaultInstance();
  ShopItemInfo::default_instance_->InitAsDefaultInstance();
  ShopItemInfo_Item::default_instance_->InitAsDefaultInstance();
  CSGetShopItemsReq::default_instance_->InitAsDefaultInstance();
  CSGetShopItemsRsp::default_instance_->InitAsDefaultInstance();
  CSBuyShopItemReq::default_instance_->InitAsDefaultInstance();
  CSBuyShopItemRsp::default_instance_->InitAsDefaultInstance();
  CSGetUserItemReq::default_instance_->InitAsDefaultInstance();
  CSGetUserItemRsp::default_instance_->InitAsDefaultInstance();
  CSGetUserAttributesReq::default_instance_->InitAsDefaultInstance();
  CSGetUserAttributesRsp::default_instance_->InitAsDefaultInstance();
  CSNotifyMoneyConfInfoRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_5fcore_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_5fcore_2eproto {
  StaticDescriptorInitializer_cs_5fcore_2eproto() {
    protobuf_AddDesc_cs_5fcore_2eproto();
  }
} static_descriptor_initializer_cs_5fcore_2eproto_;
const ::google::protobuf::EnumDescriptor* PB_PLAYET_ATTR_T_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_PLAYET_ATTR_T_descriptor_;
}
bool PB_PLAYET_ATTR_T_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 6:
    case 11:
    case 12:
    case 13:
    case 16:
    case 21:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 300000:
    case 300100:
    case 300200:
    case 300300:
    case 300400:
    case 300500:
    case 300501:
    case 300600:
    case 300700:
    case 300800:
    case 309999:
    case 310000:
    case 314999:
    case 315000:
    case 315100:
    case 319999:
    case 320000:
    case 320100:
    case 320150:
    case 320170:
    case 320200:
    case 320300:
    case 320400:
    case 329999:
    case 416000:
    case 416001:
    case 416002:
    case 416003:
    case 416004:
    case 416005:
    case 416006:
    case 416007:
    case 416008:
    case 999999:
    case 1000001:
    case 1000002:
    case 1100000:
    case 1200000:
    case 1200001:
    case 1200100:
    case 1210000:
    case 1220000:
    case 1230000:
    case 1230100:
    case 1230200:
    case 1230300:
    case 2010000:
    case 2020000:
    case 2030000:
    case 2040000:
    case 2050000:
    case 2060000:
    case 2070000:
    case 2080000:
    case 2090000:
    case 2100000:
    case 3000001:
    case 3000002:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PB_ITEM_ATTR_T_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_ITEM_ATTR_T_descriptor_;
}
bool PB_ITEM_ATTR_T_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int BasicUserBattleInfo::kPhysicalAttackFieldNumber;
const int BasicUserBattleInfo::kMagicAttackFieldNumber;
const int BasicUserBattleInfo::kSkillAttackFieldNumber;
const int BasicUserBattleInfo::kPhysicalDefenceFieldNumber;
const int BasicUserBattleInfo::kMagicDefenceFieldNumber;
const int BasicUserBattleInfo::kSkillDefenceFieldNumber;
const int BasicUserBattleInfo::kHealthPointFieldNumber;
const int BasicUserBattleInfo::kAccurateFieldNumber;
const int BasicUserBattleInfo::kDodgeFieldNumber;
const int BasicUserBattleInfo::kWreckFieldNumber;
const int BasicUserBattleInfo::kParryFieldNumber;
const int BasicUserBattleInfo::kCriticalStrikeFieldNumber;
const int BasicUserBattleInfo::kTenacityFieldNumber;
const int BasicUserBattleInfo::kSlayFieldNumber;
const int BasicUserBattleInfo::kCourageFieldNumber;
const int BasicUserBattleInfo::kCharmFieldNumber;
const int BasicUserBattleInfo::kTrickFieldNumber;
const int BasicUserBattleInfo::kSpeedFieldNumber;
const int BasicUserBattleInfo::kProficiencyFieldNumber;
const int BasicUserBattleInfo::kCurrentHpFieldNumber;
#endif  // !_MSC_VER

BasicUserBattleInfo::BasicUserBattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BasicUserBattleInfo::InitAsDefaultInstance() {
}

BasicUserBattleInfo::BasicUserBattleInfo(const BasicUserBattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BasicUserBattleInfo::SharedCtor() {
  _cached_size_ = 0;
  physical_attack_ = 0u;
  magic_attack_ = 0u;
  skill_attack_ = 0u;
  physical_defence_ = 0u;
  magic_defence_ = 0u;
  skill_defence_ = 0u;
  health_point_ = 0u;
  accurate_ = 0u;
  dodge_ = 0u;
  wreck_ = 0u;
  parry_ = 0u;
  critical_strike_ = 0u;
  tenacity_ = 0u;
  slay_ = 0u;
  courage_ = 0u;
  charm_ = 0u;
  trick_ = 0u;
  speed_ = 0u;
  proficiency_ = 0u;
  current_hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BasicUserBattleInfo::~BasicUserBattleInfo() {
  SharedDtor();
}

void BasicUserBattleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BasicUserBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasicUserBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasicUserBattleInfo_descriptor_;
}

const BasicUserBattleInfo& BasicUserBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

BasicUserBattleInfo* BasicUserBattleInfo::default_instance_ = NULL;

BasicUserBattleInfo* BasicUserBattleInfo::New() const {
  return new BasicUserBattleInfo;
}

void BasicUserBattleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    physical_attack_ = 0u;
    magic_attack_ = 0u;
    skill_attack_ = 0u;
    physical_defence_ = 0u;
    magic_defence_ = 0u;
    skill_defence_ = 0u;
    health_point_ = 0u;
    accurate_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dodge_ = 0u;
    wreck_ = 0u;
    parry_ = 0u;
    critical_strike_ = 0u;
    tenacity_ = 0u;
    slay_ = 0u;
    courage_ = 0u;
    charm_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    trick_ = 0u;
    speed_ = 0u;
    proficiency_ = 0u;
    current_hp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BasicUserBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 physical_attack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physical_attack_)));
          set_has_physical_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_magic_attack;
        break;
      }

      // required uint32 magic_attack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_attack_)));
          set_has_magic_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_attack;
        break;
      }

      // required uint32 skill_attack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_attack_)));
          set_has_skill_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_physical_defence;
        break;
      }

      // required uint32 physical_defence = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physical_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physical_defence_)));
          set_has_physical_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_magic_defence;
        break;
      }

      // required uint32 magic_defence = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_defence_)));
          set_has_magic_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_skill_defence;
        break;
      }

      // required uint32 skill_defence = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_defence_)));
          set_has_skill_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_health_point;
        break;
      }

      // required uint32 health_point = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_point_)));
          set_has_health_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_accurate;
        break;
      }

      // required uint32 accurate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accurate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accurate_)));
          set_has_accurate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dodge;
        break;
      }

      // required uint32 dodge = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_wreck;
        break;
      }

      // required uint32 wreck = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wreck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wreck_)));
          set_has_wreck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_parry;
        break;
      }

      // required uint32 parry = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parry_)));
          set_has_parry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_critical_strike;
        break;
      }

      // required uint32 critical_strike = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critical_strike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critical_strike_)));
          set_has_critical_strike();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tenacity;
        break;
      }

      // required uint32 tenacity = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tenacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tenacity_)));
          set_has_tenacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_slay;
        break;
      }

      // required uint32 slay = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slay_)));
          set_has_slay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_courage;
        break;
      }

      // required uint32 courage = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_courage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &courage_)));
          set_has_courage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_charm;
        break;
      }

      // required uint32 charm = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charm_)));
          set_has_charm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_trick;
        break;
      }

      // required uint32 trick = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trick_)));
          set_has_trick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_speed;
        break;
      }

      // required uint32 speed = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_proficiency;
        break;
      }

      // required uint32 proficiency = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proficiency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proficiency_)));
          set_has_proficiency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_current_hp;
        break;
      }

      // optional uint32 current_hp = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_hp_)));
          set_has_current_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BasicUserBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 physical_attack = 1;
  if (has_physical_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->physical_attack(), output);
  }

  // required uint32 magic_attack = 2;
  if (has_magic_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->magic_attack(), output);
  }

  // required uint32 skill_attack = 3;
  if (has_skill_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_attack(), output);
  }

  // required uint32 physical_defence = 4;
  if (has_physical_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->physical_defence(), output);
  }

  // required uint32 magic_defence = 5;
  if (has_magic_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->magic_defence(), output);
  }

  // required uint32 skill_defence = 6;
  if (has_skill_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->skill_defence(), output);
  }

  // required uint32 health_point = 7;
  if (has_health_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->health_point(), output);
  }

  // required uint32 accurate = 8;
  if (has_accurate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->accurate(), output);
  }

  // required uint32 dodge = 9;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->dodge(), output);
  }

  // required uint32 wreck = 10;
  if (has_wreck()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->wreck(), output);
  }

  // required uint32 parry = 11;
  if (has_parry()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->parry(), output);
  }

  // required uint32 critical_strike = 12;
  if (has_critical_strike()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->critical_strike(), output);
  }

  // required uint32 tenacity = 13;
  if (has_tenacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->tenacity(), output);
  }

  // required uint32 slay = 14;
  if (has_slay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->slay(), output);
  }

  // required uint32 courage = 15;
  if (has_courage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->courage(), output);
  }

  // required uint32 charm = 16;
  if (has_charm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->charm(), output);
  }

  // required uint32 trick = 17;
  if (has_trick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->trick(), output);
  }

  // required uint32 speed = 18;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->speed(), output);
  }

  // required uint32 proficiency = 19;
  if (has_proficiency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->proficiency(), output);
  }

  // optional uint32 current_hp = 20;
  if (has_current_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->current_hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BasicUserBattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 physical_attack = 1;
  if (has_physical_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->physical_attack(), target);
  }

  // required uint32 magic_attack = 2;
  if (has_magic_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->magic_attack(), target);
  }

  // required uint32 skill_attack = 3;
  if (has_skill_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_attack(), target);
  }

  // required uint32 physical_defence = 4;
  if (has_physical_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->physical_defence(), target);
  }

  // required uint32 magic_defence = 5;
  if (has_magic_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->magic_defence(), target);
  }

  // required uint32 skill_defence = 6;
  if (has_skill_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->skill_defence(), target);
  }

  // required uint32 health_point = 7;
  if (has_health_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->health_point(), target);
  }

  // required uint32 accurate = 8;
  if (has_accurate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->accurate(), target);
  }

  // required uint32 dodge = 9;
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->dodge(), target);
  }

  // required uint32 wreck = 10;
  if (has_wreck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->wreck(), target);
  }

  // required uint32 parry = 11;
  if (has_parry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->parry(), target);
  }

  // required uint32 critical_strike = 12;
  if (has_critical_strike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->critical_strike(), target);
  }

  // required uint32 tenacity = 13;
  if (has_tenacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->tenacity(), target);
  }

  // required uint32 slay = 14;
  if (has_slay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->slay(), target);
  }

  // required uint32 courage = 15;
  if (has_courage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->courage(), target);
  }

  // required uint32 charm = 16;
  if (has_charm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->charm(), target);
  }

  // required uint32 trick = 17;
  if (has_trick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->trick(), target);
  }

  // required uint32 speed = 18;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->speed(), target);
  }

  // required uint32 proficiency = 19;
  if (has_proficiency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->proficiency(), target);
  }

  // optional uint32 current_hp = 20;
  if (has_current_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->current_hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BasicUserBattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 physical_attack = 1;
    if (has_physical_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physical_attack());
    }

    // required uint32 magic_attack = 2;
    if (has_magic_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic_attack());
    }

    // required uint32 skill_attack = 3;
    if (has_skill_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_attack());
    }

    // required uint32 physical_defence = 4;
    if (has_physical_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physical_defence());
    }

    // required uint32 magic_defence = 5;
    if (has_magic_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic_defence());
    }

    // required uint32 skill_defence = 6;
    if (has_skill_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_defence());
    }

    // required uint32 health_point = 7;
    if (has_health_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health_point());
    }

    // required uint32 accurate = 8;
    if (has_accurate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accurate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 dodge = 9;
    if (has_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge());
    }

    // required uint32 wreck = 10;
    if (has_wreck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wreck());
    }

    // required uint32 parry = 11;
    if (has_parry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parry());
    }

    // required uint32 critical_strike = 12;
    if (has_critical_strike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critical_strike());
    }

    // required uint32 tenacity = 13;
    if (has_tenacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tenacity());
    }

    // required uint32 slay = 14;
    if (has_slay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slay());
    }

    // required uint32 courage = 15;
    if (has_courage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->courage());
    }

    // required uint32 charm = 16;
    if (has_charm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charm());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 trick = 17;
    if (has_trick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trick());
    }

    // required uint32 speed = 18;
    if (has_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

    // required uint32 proficiency = 19;
    if (has_proficiency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proficiency());
    }

    // optional uint32 current_hp = 20;
    if (has_current_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicUserBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BasicUserBattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BasicUserBattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BasicUserBattleInfo::MergeFrom(const BasicUserBattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_physical_attack()) {
      set_physical_attack(from.physical_attack());
    }
    if (from.has_magic_attack()) {
      set_magic_attack(from.magic_attack());
    }
    if (from.has_skill_attack()) {
      set_skill_attack(from.skill_attack());
    }
    if (from.has_physical_defence()) {
      set_physical_defence(from.physical_defence());
    }
    if (from.has_magic_defence()) {
      set_magic_defence(from.magic_defence());
    }
    if (from.has_skill_defence()) {
      set_skill_defence(from.skill_defence());
    }
    if (from.has_health_point()) {
      set_health_point(from.health_point());
    }
    if (from.has_accurate()) {
      set_accurate(from.accurate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
    if (from.has_wreck()) {
      set_wreck(from.wreck());
    }
    if (from.has_parry()) {
      set_parry(from.parry());
    }
    if (from.has_critical_strike()) {
      set_critical_strike(from.critical_strike());
    }
    if (from.has_tenacity()) {
      set_tenacity(from.tenacity());
    }
    if (from.has_slay()) {
      set_slay(from.slay());
    }
    if (from.has_courage()) {
      set_courage(from.courage());
    }
    if (from.has_charm()) {
      set_charm(from.charm());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_trick()) {
      set_trick(from.trick());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_proficiency()) {
      set_proficiency(from.proficiency());
    }
    if (from.has_current_hp()) {
      set_current_hp(from.current_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BasicUserBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicUserBattleInfo::CopyFrom(const BasicUserBattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicUserBattleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0007ffff) != 0x0007ffff) return false;

  return true;
}

void BasicUserBattleInfo::Swap(BasicUserBattleInfo* other) {
  if (other != this) {
    std::swap(physical_attack_, other->physical_attack_);
    std::swap(magic_attack_, other->magic_attack_);
    std::swap(skill_attack_, other->skill_attack_);
    std::swap(physical_defence_, other->physical_defence_);
    std::swap(magic_defence_, other->magic_defence_);
    std::swap(skill_defence_, other->skill_defence_);
    std::swap(health_point_, other->health_point_);
    std::swap(accurate_, other->accurate_);
    std::swap(dodge_, other->dodge_);
    std::swap(wreck_, other->wreck_);
    std::swap(parry_, other->parry_);
    std::swap(critical_strike_, other->critical_strike_);
    std::swap(tenacity_, other->tenacity_);
    std::swap(slay_, other->slay_);
    std::swap(courage_, other->courage_);
    std::swap(charm_, other->charm_);
    std::swap(trick_, other->trick_);
    std::swap(speed_, other->speed_);
    std::swap(proficiency_, other->proficiency_);
    std::swap(current_hp_, other->current_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BasicUserBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BasicUserBattleInfo_descriptor_;
  metadata.reflection = BasicUserBattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserSkillPart::kPartFieldNumber;
const int UserSkillPart::kExpBattleInfoFieldNumber;
const int UserSkillPart::kContinueTimeFieldNumber;
const int UserSkillPart::kCanAttackNumberFieldNumber;
const int UserSkillPart::kHurtFieldNumber;
#endif  // !_MSC_VER

UserSkillPart::UserSkillPart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserSkillPart::InitAsDefaultInstance() {
  exp_battle_info_ = const_cast< ::BasicUserBattleInfo*>(&::BasicUserBattleInfo::default_instance());
}

UserSkillPart::UserSkillPart(const UserSkillPart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserSkillPart::SharedCtor() {
  _cached_size_ = 0;
  part_ = 0u;
  exp_battle_info_ = NULL;
  continue_time_ = 0;
  can_attack_number_ = 0u;
  hurt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSkillPart::~UserSkillPart() {
  SharedDtor();
}

void UserSkillPart::SharedDtor() {
  if (this != default_instance_) {
    delete exp_battle_info_;
  }
}

void UserSkillPart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSkillPart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSkillPart_descriptor_;
}

const UserSkillPart& UserSkillPart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

UserSkillPart* UserSkillPart::default_instance_ = NULL;

UserSkillPart* UserSkillPart::New() const {
  return new UserSkillPart;
}

void UserSkillPart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    part_ = 0u;
    if (has_exp_battle_info()) {
      if (exp_battle_info_ != NULL) exp_battle_info_->::BasicUserBattleInfo::Clear();
    }
    continue_time_ = 0;
    can_attack_number_ = 0u;
    hurt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserSkillPart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 part = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &part_)));
          set_has_part();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_exp_battle_info;
        break;
      }

      // required .BasicUserBattleInfo exp_battle_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exp_battle_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exp_battle_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_continue_time;
        break;
      }

      // required float continue_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_continue_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &continue_time_)));
          set_has_continue_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_can_attack_number;
        break;
      }

      // required uint32 can_attack_number = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_attack_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_attack_number_)));
          set_has_can_attack_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hurt;
        break;
      }

      // required uint32 hurt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurt_)));
          set_has_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserSkillPart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 part = 1;
  if (has_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->part(), output);
  }

  // required .BasicUserBattleInfo exp_battle_info = 2;
  if (has_exp_battle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->exp_battle_info(), output);
  }

  // required float continue_time = 5;
  if (has_continue_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->continue_time(), output);
  }

  // required uint32 can_attack_number = 6;
  if (has_can_attack_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->can_attack_number(), output);
  }

  // required uint32 hurt = 7;
  if (has_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hurt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserSkillPart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 part = 1;
  if (has_part()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->part(), target);
  }

  // required .BasicUserBattleInfo exp_battle_info = 2;
  if (has_exp_battle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->exp_battle_info(), target);
  }

  // required float continue_time = 5;
  if (has_continue_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->continue_time(), target);
  }

  // required uint32 can_attack_number = 6;
  if (has_can_attack_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->can_attack_number(), target);
  }

  // required uint32 hurt = 7;
  if (has_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->hurt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserSkillPart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 part = 1;
    if (has_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->part());
    }

    // required .BasicUserBattleInfo exp_battle_info = 2;
    if (has_exp_battle_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exp_battle_info());
    }

    // required float continue_time = 5;
    if (has_continue_time()) {
      total_size += 1 + 4;
    }

    // required uint32 can_attack_number = 6;
    if (has_can_attack_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_attack_number());
    }

    // required uint32 hurt = 7;
    if (has_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSkillPart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserSkillPart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserSkillPart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserSkillPart::MergeFrom(const UserSkillPart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_part()) {
      set_part(from.part());
    }
    if (from.has_exp_battle_info()) {
      mutable_exp_battle_info()->::BasicUserBattleInfo::MergeFrom(from.exp_battle_info());
    }
    if (from.has_continue_time()) {
      set_continue_time(from.continue_time());
    }
    if (from.has_can_attack_number()) {
      set_can_attack_number(from.can_attack_number());
    }
    if (from.has_hurt()) {
      set_hurt(from.hurt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserSkillPart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSkillPart::CopyFrom(const UserSkillPart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSkillPart::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_exp_battle_info()) {
    if (!this->exp_battle_info().IsInitialized()) return false;
  }
  return true;
}

void UserSkillPart::Swap(UserSkillPart* other) {
  if (other != this) {
    std::swap(part_, other->part_);
    std::swap(exp_battle_info_, other->exp_battle_info_);
    std::swap(continue_time_, other->continue_time_);
    std::swap(can_attack_number_, other->can_attack_number_);
    std::swap(hurt_, other->hurt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserSkillPart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserSkillPart_descriptor_;
  metadata.reflection = UserSkillPart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserSkillInfo::kSkillIdFieldNumber;
const int UserSkillInfo::kSkillLevelFieldNumber;
const int UserSkillInfo::kMoneyFieldNumber;
const int UserSkillInfo::kExploitFieldNumber;
const int UserSkillInfo::kOwnCdFieldNumber;
const int UserSkillInfo::kShareCdFieldNumber;
const int UserSkillInfo::kPartsFieldNumber;
const int UserSkillInfo::kMaxLevelFieldNumber;
#endif  // !_MSC_VER

UserSkillInfo::UserSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserSkillInfo::InitAsDefaultInstance() {
}

UserSkillInfo::UserSkillInfo(const UserSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0u;
  skill_level_ = 0u;
  money_ = 0u;
  exploit_ = 0u;
  own_cd_ = 0;
  share_cd_ = 0;
  max_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSkillInfo::~UserSkillInfo() {
  SharedDtor();
}

void UserSkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSkillInfo_descriptor_;
}

const UserSkillInfo& UserSkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

UserSkillInfo* UserSkillInfo::default_instance_ = NULL;

UserSkillInfo* UserSkillInfo::New() const {
  return new UserSkillInfo;
}

void UserSkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0u;
    skill_level_ = 0u;
    money_ = 0u;
    exploit_ = 0u;
    own_cd_ = 0;
    share_cd_ = 0;
    max_level_ = 0u;
  }
  parts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }

      // required uint32 skill_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // required uint32 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exploit;
        break;
      }

      // required uint32 exploit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exploit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exploit_)));
          set_has_exploit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_own_cd;
        break;
      }

      // required float own_cd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_own_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &own_cd_)));
          set_has_own_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_share_cd;
        break;
      }

      // required float share_cd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_share_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &share_cd_)));
          set_has_share_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_parts;
        break;
      }

      // repeated .UserSkillPart parts = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_parts;
        if (input->ExpectTag(64)) goto parse_max_level;
        break;
      }

      // required uint32 max_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_level_)));
          set_has_max_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }

  // required uint32 skill_level = 2;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_level(), output);
  }

  // required uint32 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->money(), output);
  }

  // required uint32 exploit = 4;
  if (has_exploit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exploit(), output);
  }

  // required float own_cd = 5;
  if (has_own_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->own_cd(), output);
  }

  // required float share_cd = 6;
  if (has_share_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->share_cd(), output);
  }

  // repeated .UserSkillPart parts = 7;
  for (int i = 0; i < this->parts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->parts(i), output);
  }

  // required uint32 max_level = 8;
  if (has_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->max_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_id(), target);
  }

  // required uint32 skill_level = 2;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_level(), target);
  }

  // required uint32 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->money(), target);
  }

  // required uint32 exploit = 4;
  if (has_exploit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exploit(), target);
  }

  // required float own_cd = 5;
  if (has_own_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->own_cd(), target);
  }

  // required float share_cd = 6;
  if (has_share_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->share_cd(), target);
  }

  // repeated .UserSkillPart parts = 7;
  for (int i = 0; i < this->parts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->parts(i), target);
  }

  // required uint32 max_level = 8;
  if (has_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->max_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserSkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // required uint32 skill_level = 2;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

    // required uint32 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // required uint32 exploit = 4;
    if (has_exploit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exploit());
    }

    // required float own_cd = 5;
    if (has_own_cd()) {
      total_size += 1 + 4;
    }

    // required float share_cd = 6;
    if (has_share_cd()) {
      total_size += 1 + 4;
    }

    // required uint32 max_level = 8;
    if (has_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_level());
    }

  }
  // repeated .UserSkillPart parts = 7;
  total_size += 1 * this->parts_size();
  for (int i = 0; i < this->parts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserSkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserSkillInfo::MergeFrom(const UserSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  parts_.MergeFrom(from.parts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_exploit()) {
      set_exploit(from.exploit());
    }
    if (from.has_own_cd()) {
      set_own_cd(from.own_cd());
    }
    if (from.has_share_cd()) {
      set_share_cd(from.share_cd());
    }
    if (from.has_max_level()) {
      set_max_level(from.max_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSkillInfo::CopyFrom(const UserSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSkillInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000bf) != 0x000000bf) return false;

  for (int i = 0; i < parts_size(); i++) {
    if (!this->parts(i).IsInitialized()) return false;
  }
  return true;
}

void UserSkillInfo::Swap(UserSkillInfo* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(money_, other->money_);
    std::swap(exploit_, other->exploit_);
    std::swap(own_cd_, other->own_cd_);
    std::swap(share_cd_, other->share_cd_);
    parts_.Swap(&other->parts_);
    std::swap(max_level_, other->max_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserSkillInfo_descriptor_;
  metadata.reflection = UserSkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BasicUserInfo::kUidFieldNumber;
const int BasicUserInfo::kNameFieldNumber;
const int BasicUserInfo::kTypeFieldNumber;
const int BasicUserInfo::kGenderFieldNumber;
const int BasicUserInfo::kLvFieldNumber;
const int BasicUserInfo::kXposFieldNumber;
const int BasicUserInfo::kYposFieldNumber;
const int BasicUserInfo::kOrientFieldNumber;
const int BasicUserInfo::kBattleSideFieldNumber;
const int BasicUserInfo::kBattleInfoFieldNumber;
const int BasicUserInfo::kNextLvFieldNumber;
#endif  // !_MSC_VER

BasicUserInfo::BasicUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BasicUserInfo::InitAsDefaultInstance() {
  battle_info_ = const_cast< ::BasicUserBattleInfo*>(&::BasicUserBattleInfo::default_instance());
}

BasicUserInfo::BasicUserInfo(const BasicUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BasicUserInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  gender_ = 0u;
  lv_ = 0u;
  xpos_ = 0u;
  ypos_ = 0u;
  orient_ = 0u;
  battle_side_ = 0u;
  battle_info_ = NULL;
  next_lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BasicUserInfo::~BasicUserInfo() {
  SharedDtor();
}

void BasicUserInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete battle_info_;
  }
}

void BasicUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasicUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasicUserInfo_descriptor_;
}

const BasicUserInfo& BasicUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

BasicUserInfo* BasicUserInfo::default_instance_ = NULL;

BasicUserInfo* BasicUserInfo::New() const {
  return new BasicUserInfo;
}

void BasicUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0u;
    gender_ = 0u;
    lv_ = 0u;
    xpos_ = 0u;
    ypos_ = 0u;
    orient_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    battle_side_ = 0u;
    if (has_battle_info()) {
      if (battle_info_ != NULL) battle_info_->::BasicUserBattleInfo::Clear();
    }
    next_lv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BasicUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }

      // required uint32 gender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lv;
        break;
      }

      // required uint32 lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_xpos;
        break;
      }

      // required uint32 xpos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ypos;
        break;
      }

      // required uint32 ypos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_orient;
        break;
      }

      // required uint32 orient = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orient_)));
          set_has_orient();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_battle_side;
        break;
      }

      // optional uint32 battle_side = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_side:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_side_)));
          set_has_battle_side();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_battle_info;
        break;
      }

      // optional .BasicUserBattleInfo battle_info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_next_lv;
        break;
      }

      // required uint32 next_lv = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_lv_)));
          set_has_next_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BasicUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required uint32 gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gender(), output);
  }

  // required uint32 lv = 5;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lv(), output);
  }

  // required uint32 xpos = 6;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->xpos(), output);
  }

  // required uint32 ypos = 7;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ypos(), output);
  }

  // required uint32 orient = 8;
  if (has_orient()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->orient(), output);
  }

  // optional uint32 battle_side = 9;
  if (has_battle_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->battle_side(), output);
  }

  // optional .BasicUserBattleInfo battle_info = 10;
  if (has_battle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->battle_info(), output);
  }

  // required uint32 next_lv = 11;
  if (has_next_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->next_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BasicUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required uint32 gender = 4;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gender(), target);
  }

  // required uint32 lv = 5;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lv(), target);
  }

  // required uint32 xpos = 6;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->xpos(), target);
  }

  // required uint32 ypos = 7;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ypos(), target);
  }

  // required uint32 orient = 8;
  if (has_orient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->orient(), target);
  }

  // optional uint32 battle_side = 9;
  if (has_battle_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->battle_side(), target);
  }

  // optional .BasicUserBattleInfo battle_info = 10;
  if (has_battle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->battle_info(), target);
  }

  // required uint32 next_lv = 11;
  if (has_next_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->next_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BasicUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

    // required uint32 lv = 5;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // required uint32 xpos = 6;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xpos());
    }

    // required uint32 ypos = 7;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ypos());
    }

    // required uint32 orient = 8;
    if (has_orient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->orient());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 battle_side = 9;
    if (has_battle_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_side());
    }

    // optional .BasicUserBattleInfo battle_info = 10;
    if (has_battle_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_info());
    }

    // required uint32 next_lv = 11;
    if (has_next_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BasicUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BasicUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BasicUserInfo::MergeFrom(const BasicUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_orient()) {
      set_orient(from.orient());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_battle_side()) {
      set_battle_side(from.battle_side());
    }
    if (from.has_battle_info()) {
      mutable_battle_info()->::BasicUserBattleInfo::MergeFrom(from.battle_info());
    }
    if (from.has_next_lv()) {
      set_next_lv(from.next_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BasicUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicUserInfo::CopyFrom(const BasicUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000004ff) != 0x000004ff) return false;

  if (has_battle_info()) {
    if (!this->battle_info().IsInitialized()) return false;
  }
  return true;
}

void BasicUserInfo::Swap(BasicUserInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(gender_, other->gender_);
    std::swap(lv_, other->lv_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(orient_, other->orient_);
    std::swap(battle_side_, other->battle_side_);
    std::swap(battle_info_, other->battle_info_);
    std::swap(next_lv_, other->next_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BasicUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BasicUserInfo_descriptor_;
  metadata.reflection = BasicUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSEnterMapReq::kMapidFieldNumber;
const int CSEnterMapReq::kXposFieldNumber;
const int CSEnterMapReq::kYposFieldNumber;
const int CSEnterMapReq::kOrientFieldNumber;
#endif  // !_MSC_VER

CSEnterMapReq::CSEnterMapReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSEnterMapReq::InitAsDefaultInstance() {
}

CSEnterMapReq::CSEnterMapReq(const CSEnterMapReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSEnterMapReq::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  xpos_ = 0u;
  ypos_ = 0u;
  orient_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEnterMapReq::~CSEnterMapReq() {
  SharedDtor();
}

void CSEnterMapReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSEnterMapReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSEnterMapReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSEnterMapReq_descriptor_;
}

const CSEnterMapReq& CSEnterMapReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSEnterMapReq* CSEnterMapReq::default_instance_ = NULL;

CSEnterMapReq* CSEnterMapReq::New() const {
  return new CSEnterMapReq;
}

void CSEnterMapReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    xpos_ = 0u;
    ypos_ = 0u;
    orient_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSEnterMapReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_xpos;
        break;
      }

      // required uint32 xpos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ypos;
        break;
      }

      // required uint32 ypos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_orient;
        break;
      }

      // required uint32 orient = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orient_)));
          set_has_orient();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEnterMapReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // required uint32 xpos = 2;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->xpos(), output);
  }

  // required uint32 ypos = 3;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ypos(), output);
  }

  // required uint32 orient = 4;
  if (has_orient()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->orient(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSEnterMapReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // required uint32 xpos = 2;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->xpos(), target);
  }

  // required uint32 ypos = 3;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ypos(), target);
  }

  // required uint32 orient = 4;
  if (has_orient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->orient(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSEnterMapReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // required uint32 xpos = 2;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xpos());
    }

    // required uint32 ypos = 3;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ypos());
    }

    // required uint32 orient = 4;
    if (has_orient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->orient());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEnterMapReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSEnterMapReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSEnterMapReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSEnterMapReq::MergeFrom(const CSEnterMapReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_orient()) {
      set_orient(from.orient());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSEnterMapReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSEnterMapReq::CopyFrom(const CSEnterMapReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEnterMapReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSEnterMapReq::Swap(CSEnterMapReq* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(orient_, other->orient_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSEnterMapReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSEnterMapReq_descriptor_;
  metadata.reflection = CSEnterMapReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSEnterMapRsp::kMapidFieldNumber;
const int CSEnterMapRsp::kUserinfoFieldNumber;
#endif  // !_MSC_VER

CSEnterMapRsp::CSEnterMapRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSEnterMapRsp::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::BasicUserInfo*>(&::BasicUserInfo::default_instance());
}

CSEnterMapRsp::CSEnterMapRsp(const CSEnterMapRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSEnterMapRsp::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEnterMapRsp::~CSEnterMapRsp() {
  SharedDtor();
}

void CSEnterMapRsp::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void CSEnterMapRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSEnterMapRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSEnterMapRsp_descriptor_;
}

const CSEnterMapRsp& CSEnterMapRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSEnterMapRsp* CSEnterMapRsp::default_instance_ = NULL;

CSEnterMapRsp* CSEnterMapRsp::New() const {
  return new CSEnterMapRsp;
}

void CSEnterMapRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::BasicUserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSEnterMapRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userinfo;
        break;
      }

      // required .BasicUserInfo userinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEnterMapRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // required .BasicUserInfo userinfo = 2;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSEnterMapRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // required .BasicUserInfo userinfo = 2;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSEnterMapRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // required .BasicUserInfo userinfo = 2;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEnterMapRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSEnterMapRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSEnterMapRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSEnterMapRsp::MergeFrom(const CSEnterMapRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::BasicUserInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSEnterMapRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSEnterMapRsp::CopyFrom(const CSEnterMapRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEnterMapRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_userinfo()) {
    if (!this->userinfo().IsInitialized()) return false;
  }
  return true;
}

void CSEnterMapRsp::Swap(CSEnterMapRsp* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSEnterMapRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSEnterMapRsp_descriptor_;
  metadata.reflection = CSEnterMapRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSLeaveMapRsp::kUidFieldNumber;
#endif  // !_MSC_VER

CSLeaveMapRsp::CSLeaveMapRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSLeaveMapRsp::InitAsDefaultInstance() {
}

CSLeaveMapRsp::CSLeaveMapRsp(const CSLeaveMapRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSLeaveMapRsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLeaveMapRsp::~CSLeaveMapRsp() {
  SharedDtor();
}

void CSLeaveMapRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSLeaveMapRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLeaveMapRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLeaveMapRsp_descriptor_;
}

const CSLeaveMapRsp& CSLeaveMapRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSLeaveMapRsp* CSLeaveMapRsp::default_instance_ = NULL;

CSLeaveMapRsp* CSLeaveMapRsp::New() const {
  return new CSLeaveMapRsp;
}

void CSLeaveMapRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSLeaveMapRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSLeaveMapRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSLeaveMapRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSLeaveMapRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLeaveMapRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSLeaveMapRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSLeaveMapRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLeaveMapRsp::MergeFrom(const CSLeaveMapRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSLeaveMapRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLeaveMapRsp::CopyFrom(const CSLeaveMapRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLeaveMapRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSLeaveMapRsp::Swap(CSLeaveMapRsp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSLeaveMapRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLeaveMapRsp_descriptor_;
  metadata.reflection = CSLeaveMapRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSGetMapUsersReq::CSGetMapUsersReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetMapUsersReq::InitAsDefaultInstance() {
}

CSGetMapUsersReq::CSGetMapUsersReq(const CSGetMapUsersReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetMapUsersReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetMapUsersReq::~CSGetMapUsersReq() {
  SharedDtor();
}

void CSGetMapUsersReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetMapUsersReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetMapUsersReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetMapUsersReq_descriptor_;
}

const CSGetMapUsersReq& CSGetMapUsersReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSGetMapUsersReq* CSGetMapUsersReq::default_instance_ = NULL;

CSGetMapUsersReq* CSGetMapUsersReq::New() const {
  return new CSGetMapUsersReq;
}

void CSGetMapUsersReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetMapUsersReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSGetMapUsersReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetMapUsersReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetMapUsersReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetMapUsersReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetMapUsersReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetMapUsersReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetMapUsersReq::MergeFrom(const CSGetMapUsersReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetMapUsersReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetMapUsersReq::CopyFrom(const CSGetMapUsersReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetMapUsersReq::IsInitialized() const {

  return true;
}

void CSGetMapUsersReq::Swap(CSGetMapUsersReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetMapUsersReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetMapUsersReq_descriptor_;
  metadata.reflection = CSGetMapUsersReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetMapUsersRsp::kUserinfoFieldNumber;
#endif  // !_MSC_VER

CSGetMapUsersRsp::CSGetMapUsersRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetMapUsersRsp::InitAsDefaultInstance() {
}

CSGetMapUsersRsp::CSGetMapUsersRsp(const CSGetMapUsersRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetMapUsersRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetMapUsersRsp::~CSGetMapUsersRsp() {
  SharedDtor();
}

void CSGetMapUsersRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetMapUsersRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetMapUsersRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetMapUsersRsp_descriptor_;
}

const CSGetMapUsersRsp& CSGetMapUsersRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSGetMapUsersRsp* CSGetMapUsersRsp::default_instance_ = NULL;

CSGetMapUsersRsp* CSGetMapUsersRsp::New() const {
  return new CSGetMapUsersRsp;
}

void CSGetMapUsersRsp::Clear() {
  userinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetMapUsersRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BasicUserInfo userinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_userinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetMapUsersRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BasicUserInfo userinfo = 1;
  for (int i = 0; i < this->userinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetMapUsersRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .BasicUserInfo userinfo = 1;
  for (int i = 0; i < this->userinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetMapUsersRsp::ByteSize() const {
  int total_size = 0;

  // repeated .BasicUserInfo userinfo = 1;
  total_size += 1 * this->userinfo_size();
  for (int i = 0; i < this->userinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetMapUsersRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetMapUsersRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetMapUsersRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetMapUsersRsp::MergeFrom(const CSGetMapUsersRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  userinfo_.MergeFrom(from.userinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetMapUsersRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetMapUsersRsp::CopyFrom(const CSGetMapUsersRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetMapUsersRsp::IsInitialized() const {

  for (int i = 0; i < userinfo_size(); i++) {
    if (!this->userinfo(i).IsInitialized()) return false;
  }
  return true;
}

void CSGetMapUsersRsp::Swap(CSGetMapUsersRsp* other) {
  if (other != this) {
    userinfo_.Swap(&other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetMapUsersRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetMapUsersRsp_descriptor_;
  metadata.reflection = CSGetMapUsersRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetUserSkillReq::kUseridFieldNumber;
#endif  // !_MSC_VER

CSGetUserSkillReq::CSGetUserSkillReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetUserSkillReq::InitAsDefaultInstance() {
}

CSGetUserSkillReq::CSGetUserSkillReq(const CSGetUserSkillReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetUserSkillReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetUserSkillReq::~CSGetUserSkillReq() {
  SharedDtor();
}

void CSGetUserSkillReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetUserSkillReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetUserSkillReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetUserSkillReq_descriptor_;
}

const CSGetUserSkillReq& CSGetUserSkillReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSGetUserSkillReq* CSGetUserSkillReq::default_instance_ = NULL;

CSGetUserSkillReq* CSGetUserSkillReq::New() const {
  return new CSGetUserSkillReq;
}

void CSGetUserSkillReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetUserSkillReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetUserSkillReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetUserSkillReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetUserSkillReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetUserSkillReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetUserSkillReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetUserSkillReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetUserSkillReq::MergeFrom(const CSGetUserSkillReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetUserSkillReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetUserSkillReq::CopyFrom(const CSGetUserSkillReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetUserSkillReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSGetUserSkillReq::Swap(CSGetUserSkillReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetUserSkillReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetUserSkillReq_descriptor_;
  metadata.reflection = CSGetUserSkillReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetUserSkillRsp::kUseridFieldNumber;
const int CSGetUserSkillRsp::kUserskillsFieldNumber;
const int CSGetUserSkillRsp::kReadyFieldNumber;
#endif  // !_MSC_VER

CSGetUserSkillRsp::CSGetUserSkillRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetUserSkillRsp::InitAsDefaultInstance() {
}

CSGetUserSkillRsp::CSGetUserSkillRsp(const CSGetUserSkillRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetUserSkillRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetUserSkillRsp::~CSGetUserSkillRsp() {
  SharedDtor();
}

void CSGetUserSkillRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetUserSkillRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetUserSkillRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetUserSkillRsp_descriptor_;
}

const CSGetUserSkillRsp& CSGetUserSkillRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSGetUserSkillRsp* CSGetUserSkillRsp::default_instance_ = NULL;

CSGetUserSkillRsp* CSGetUserSkillRsp::New() const {
  return new CSGetUserSkillRsp;
}

void CSGetUserSkillRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
  }
  userskills_.Clear();
  ready_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetUserSkillRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userskills;
        break;
      }

      // repeated .UserSkillInfo userskills = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userskills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userskills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userskills;
        if (input->ExpectTag(24)) goto parse_ready;
        break;
      }

      // repeated uint32 ready = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_ready())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ready())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ready;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetUserSkillRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // repeated .UserSkillInfo userskills = 2;
  for (int i = 0; i < this->userskills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userskills(i), output);
  }

  // repeated uint32 ready = 3;
  for (int i = 0; i < this->ready_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->ready(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetUserSkillRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // repeated .UserSkillInfo userskills = 2;
  for (int i = 0; i < this->userskills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userskills(i), target);
  }

  // repeated uint32 ready = 3;
  for (int i = 0; i < this->ready_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->ready(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetUserSkillRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

  }
  // repeated .UserSkillInfo userskills = 2;
  total_size += 1 * this->userskills_size();
  for (int i = 0; i < this->userskills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userskills(i));
  }

  // repeated uint32 ready = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->ready_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ready(i));
    }
    total_size += 1 * this->ready_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetUserSkillRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetUserSkillRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetUserSkillRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetUserSkillRsp::MergeFrom(const CSGetUserSkillRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  userskills_.MergeFrom(from.userskills_);
  ready_.MergeFrom(from.ready_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetUserSkillRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetUserSkillRsp::CopyFrom(const CSGetUserSkillRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetUserSkillRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < userskills_size(); i++) {
    if (!this->userskills(i).IsInitialized()) return false;
  }
  return true;
}

void CSGetUserSkillRsp::Swap(CSGetUserSkillRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    userskills_.Swap(&other->userskills_);
    ready_.Swap(&other->ready_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetUserSkillRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetUserSkillRsp_descriptor_;
  metadata.reflection = CSGetUserSkillRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetUserInfoReq::kUseridFieldNumber;
#endif  // !_MSC_VER

CSGetUserInfoReq::CSGetUserInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetUserInfoReq::InitAsDefaultInstance() {
}

CSGetUserInfoReq::CSGetUserInfoReq(const CSGetUserInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetUserInfoReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetUserInfoReq::~CSGetUserInfoReq() {
  SharedDtor();
}

void CSGetUserInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetUserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetUserInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetUserInfoReq_descriptor_;
}

const CSGetUserInfoReq& CSGetUserInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSGetUserInfoReq* CSGetUserInfoReq::default_instance_ = NULL;

CSGetUserInfoReq* CSGetUserInfoReq::New() const {
  return new CSGetUserInfoReq;
}

void CSGetUserInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetUserInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetUserInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetUserInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetUserInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetUserInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetUserInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetUserInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetUserInfoReq::MergeFrom(const CSGetUserInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetUserInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetUserInfoReq::CopyFrom(const CSGetUserInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetUserInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSGetUserInfoReq::Swap(CSGetUserInfoReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetUserInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetUserInfoReq_descriptor_;
  metadata.reflection = CSGetUserInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetUserInfoRsp::kUseridFieldNumber;
const int CSGetUserInfoRsp::kUserinfoFieldNumber;
#endif  // !_MSC_VER

CSGetUserInfoRsp::CSGetUserInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetUserInfoRsp::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::BasicUserInfo*>(&::BasicUserInfo::default_instance());
}

CSGetUserInfoRsp::CSGetUserInfoRsp(const CSGetUserInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetUserInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetUserInfoRsp::~CSGetUserInfoRsp() {
  SharedDtor();
}

void CSGetUserInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void CSGetUserInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetUserInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetUserInfoRsp_descriptor_;
}

const CSGetUserInfoRsp& CSGetUserInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSGetUserInfoRsp* CSGetUserInfoRsp::default_instance_ = NULL;

CSGetUserInfoRsp* CSGetUserInfoRsp::New() const {
  return new CSGetUserInfoRsp;
}

void CSGetUserInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::BasicUserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetUserInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userinfo;
        break;
      }

      // required .BasicUserInfo userinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetUserInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // required .BasicUserInfo userinfo = 2;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetUserInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // required .BasicUserInfo userinfo = 2;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetUserInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // required .BasicUserInfo userinfo = 2;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetUserInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetUserInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetUserInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetUserInfoRsp::MergeFrom(const CSGetUserInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::BasicUserInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetUserInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetUserInfoRsp::CopyFrom(const CSGetUserInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetUserInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_userinfo()) {
    if (!this->userinfo().IsInitialized()) return false;
  }
  return true;
}

void CSGetUserInfoRsp::Swap(CSGetUserInfoRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetUserInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetUserInfoRsp_descriptor_;
  metadata.reflection = CSGetUserInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSAddUserSkillReq::kSkillIdFieldNumber;
const int CSAddUserSkillReq::kSkillLevelFieldNumber;
#endif  // !_MSC_VER

CSAddUserSkillReq::CSAddUserSkillReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSAddUserSkillReq::InitAsDefaultInstance() {
}

CSAddUserSkillReq::CSAddUserSkillReq(const CSAddUserSkillReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSAddUserSkillReq::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0u;
  skill_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAddUserSkillReq::~CSAddUserSkillReq() {
  SharedDtor();
}

void CSAddUserSkillReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSAddUserSkillReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSAddUserSkillReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSAddUserSkillReq_descriptor_;
}

const CSAddUserSkillReq& CSAddUserSkillReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSAddUserSkillReq* CSAddUserSkillReq::default_instance_ = NULL;

CSAddUserSkillReq* CSAddUserSkillReq::New() const {
  return new CSAddUserSkillReq;
}

void CSAddUserSkillReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0u;
    skill_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSAddUserSkillReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }

      // required uint32 skill_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAddUserSkillReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }

  // required uint32 skill_level = 2;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSAddUserSkillReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_id(), target);
  }

  // required uint32 skill_level = 2;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSAddUserSkillReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // required uint32 skill_level = 2;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAddUserSkillReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSAddUserSkillReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSAddUserSkillReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSAddUserSkillReq::MergeFrom(const CSAddUserSkillReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSAddUserSkillReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAddUserSkillReq::CopyFrom(const CSAddUserSkillReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAddUserSkillReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSAddUserSkillReq::Swap(CSAddUserSkillReq* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSAddUserSkillReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSAddUserSkillReq_descriptor_;
  metadata.reflection = CSAddUserSkillReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSAddUserSkillRsp::kSkillIdFieldNumber;
const int CSAddUserSkillRsp::kSkillLevelFieldNumber;
#endif  // !_MSC_VER

CSAddUserSkillRsp::CSAddUserSkillRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSAddUserSkillRsp::InitAsDefaultInstance() {
}

CSAddUserSkillRsp::CSAddUserSkillRsp(const CSAddUserSkillRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSAddUserSkillRsp::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0u;
  skill_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAddUserSkillRsp::~CSAddUserSkillRsp() {
  SharedDtor();
}

void CSAddUserSkillRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSAddUserSkillRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSAddUserSkillRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSAddUserSkillRsp_descriptor_;
}

const CSAddUserSkillRsp& CSAddUserSkillRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSAddUserSkillRsp* CSAddUserSkillRsp::default_instance_ = NULL;

CSAddUserSkillRsp* CSAddUserSkillRsp::New() const {
  return new CSAddUserSkillRsp;
}

void CSAddUserSkillRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0u;
    skill_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSAddUserSkillRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }

      // required uint32 skill_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAddUserSkillRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }

  // required uint32 skill_level = 2;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSAddUserSkillRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_id(), target);
  }

  // required uint32 skill_level = 2;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSAddUserSkillRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // required uint32 skill_level = 2;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAddUserSkillRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSAddUserSkillRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSAddUserSkillRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSAddUserSkillRsp::MergeFrom(const CSAddUserSkillRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSAddUserSkillRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAddUserSkillRsp::CopyFrom(const CSAddUserSkillRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAddUserSkillRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSAddUserSkillRsp::Swap(CSAddUserSkillRsp* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSAddUserSkillRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSAddUserSkillRsp_descriptor_;
  metadata.reflection = CSAddUserSkillRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSUserSkillDiffReq::kSkillIdFieldNumber;
const int CSUserSkillDiffReq::kSkillLevelFieldNumber;
#endif  // !_MSC_VER

CSUserSkillDiffReq::CSUserSkillDiffReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSUserSkillDiffReq::InitAsDefaultInstance() {
}

CSUserSkillDiffReq::CSUserSkillDiffReq(const CSUserSkillDiffReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSUserSkillDiffReq::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0u;
  skill_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSUserSkillDiffReq::~CSUserSkillDiffReq() {
  SharedDtor();
}

void CSUserSkillDiffReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSUserSkillDiffReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSUserSkillDiffReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSUserSkillDiffReq_descriptor_;
}

const CSUserSkillDiffReq& CSUserSkillDiffReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSUserSkillDiffReq* CSUserSkillDiffReq::default_instance_ = NULL;

CSUserSkillDiffReq* CSUserSkillDiffReq::New() const {
  return new CSUserSkillDiffReq;
}

void CSUserSkillDiffReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0u;
    skill_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSUserSkillDiffReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }

      // required uint32 skill_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSUserSkillDiffReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }

  // required uint32 skill_level = 2;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSUserSkillDiffReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_id(), target);
  }

  // required uint32 skill_level = 2;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSUserSkillDiffReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // required uint32 skill_level = 2;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSUserSkillDiffReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSUserSkillDiffReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSUserSkillDiffReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSUserSkillDiffReq::MergeFrom(const CSUserSkillDiffReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSUserSkillDiffReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserSkillDiffReq::CopyFrom(const CSUserSkillDiffReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserSkillDiffReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSUserSkillDiffReq::Swap(CSUserSkillDiffReq* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSUserSkillDiffReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSUserSkillDiffReq_descriptor_;
  metadata.reflection = CSUserSkillDiffReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSUserSkillDiffRsp::kSkillIdFieldNumber;
const int CSUserSkillDiffRsp::kSkillLevelFieldNumber;
const int CSUserSkillDiffRsp::kMoneyFieldNumber;
const int CSUserSkillDiffRsp::kExploitFieldNumber;
const int CSUserSkillDiffRsp::kLvFieldNumber;
const int CSUserSkillDiffRsp::kBattleInfoFieldNumber;
const int CSUserSkillDiffRsp::kOwnCdFieldNumber;
const int CSUserSkillDiffRsp::kShareCdFieldNumber;
const int CSUserSkillDiffRsp::kHurtFieldNumber;
const int CSUserSkillDiffRsp::kContinueTimeFieldNumber;
#endif  // !_MSC_VER

CSUserSkillDiffRsp::CSUserSkillDiffRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSUserSkillDiffRsp::InitAsDefaultInstance() {
  battle_info_ = const_cast< ::BasicUserBattleInfo*>(&::BasicUserBattleInfo::default_instance());
}

CSUserSkillDiffRsp::CSUserSkillDiffRsp(const CSUserSkillDiffRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSUserSkillDiffRsp::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0u;
  skill_level_ = 0u;
  money_ = 0u;
  exploit_ = 0u;
  lv_ = 0u;
  battle_info_ = NULL;
  own_cd_ = 0;
  share_cd_ = 0;
  hurt_ = 0;
  continue_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSUserSkillDiffRsp::~CSUserSkillDiffRsp() {
  SharedDtor();
}

void CSUserSkillDiffRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battle_info_;
  }
}

void CSUserSkillDiffRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSUserSkillDiffRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSUserSkillDiffRsp_descriptor_;
}

const CSUserSkillDiffRsp& CSUserSkillDiffRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSUserSkillDiffRsp* CSUserSkillDiffRsp::default_instance_ = NULL;

CSUserSkillDiffRsp* CSUserSkillDiffRsp::New() const {
  return new CSUserSkillDiffRsp;
}

void CSUserSkillDiffRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0u;
    skill_level_ = 0u;
    money_ = 0u;
    exploit_ = 0u;
    lv_ = 0u;
    if (has_battle_info()) {
      if (battle_info_ != NULL) battle_info_->::BasicUserBattleInfo::Clear();
    }
    own_cd_ = 0;
    share_cd_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hurt_ = 0;
    continue_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSUserSkillDiffRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }

      // required uint32 skill_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional uint32 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exploit;
        break;
      }

      // optional uint32 exploit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exploit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exploit_)));
          set_has_exploit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_battle_info;
        break;
      }

      // optional .BasicUserBattleInfo battle_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_own_cd;
        break;
      }

      // optional int32 own_cd = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_own_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &own_cd_)));
          set_has_own_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_share_cd;
        break;
      }

      // optional int32 share_cd = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_share_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &share_cd_)));
          set_has_share_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hurt;
        break;
      }

      // optional int32 hurt = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hurt_)));
          set_has_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_continue_time;
        break;
      }

      // optional uint32 continue_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continue_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &continue_time_)));
          set_has_continue_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSUserSkillDiffRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }

  // required uint32 skill_level = 2;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_level(), output);
  }

  // optional uint32 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->money(), output);
  }

  // optional uint32 exploit = 4;
  if (has_exploit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exploit(), output);
  }

  // optional uint32 lv = 5;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lv(), output);
  }

  // optional .BasicUserBattleInfo battle_info = 6;
  if (has_battle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->battle_info(), output);
  }

  // optional int32 own_cd = 7;
  if (has_own_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->own_cd(), output);
  }

  // optional int32 share_cd = 8;
  if (has_share_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->share_cd(), output);
  }

  // optional int32 hurt = 9;
  if (has_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hurt(), output);
  }

  // optional uint32 continue_time = 10;
  if (has_continue_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->continue_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSUserSkillDiffRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_id(), target);
  }

  // required uint32 skill_level = 2;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_level(), target);
  }

  // optional uint32 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->money(), target);
  }

  // optional uint32 exploit = 4;
  if (has_exploit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exploit(), target);
  }

  // optional uint32 lv = 5;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lv(), target);
  }

  // optional .BasicUserBattleInfo battle_info = 6;
  if (has_battle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->battle_info(), target);
  }

  // optional int32 own_cd = 7;
  if (has_own_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->own_cd(), target);
  }

  // optional int32 share_cd = 8;
  if (has_share_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->share_cd(), target);
  }

  // optional int32 hurt = 9;
  if (has_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hurt(), target);
  }

  // optional uint32 continue_time = 10;
  if (has_continue_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->continue_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSUserSkillDiffRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // required uint32 skill_level = 2;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

    // optional uint32 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // optional uint32 exploit = 4;
    if (has_exploit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exploit());
    }

    // optional uint32 lv = 5;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional .BasicUserBattleInfo battle_info = 6;
    if (has_battle_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_info());
    }

    // optional int32 own_cd = 7;
    if (has_own_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->own_cd());
    }

    // optional int32 share_cd = 8;
    if (has_share_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->share_cd());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 hurt = 9;
    if (has_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hurt());
    }

    // optional uint32 continue_time = 10;
    if (has_continue_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->continue_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSUserSkillDiffRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSUserSkillDiffRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSUserSkillDiffRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSUserSkillDiffRsp::MergeFrom(const CSUserSkillDiffRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_exploit()) {
      set_exploit(from.exploit());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_battle_info()) {
      mutable_battle_info()->::BasicUserBattleInfo::MergeFrom(from.battle_info());
    }
    if (from.has_own_cd()) {
      set_own_cd(from.own_cd());
    }
    if (from.has_share_cd()) {
      set_share_cd(from.share_cd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hurt()) {
      set_hurt(from.hurt());
    }
    if (from.has_continue_time()) {
      set_continue_time(from.continue_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSUserSkillDiffRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserSkillDiffRsp::CopyFrom(const CSUserSkillDiffRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserSkillDiffRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_battle_info()) {
    if (!this->battle_info().IsInitialized()) return false;
  }
  return true;
}

void CSUserSkillDiffRsp::Swap(CSUserSkillDiffRsp* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(money_, other->money_);
    std::swap(exploit_, other->exploit_);
    std::swap(lv_, other->lv_);
    std::swap(battle_info_, other->battle_info_);
    std::swap(own_cd_, other->own_cd_);
    std::swap(share_cd_, other->share_cd_);
    std::swap(hurt_, other->hurt_);
    std::swap(continue_time_, other->continue_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSUserSkillDiffRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSUserSkillDiffRsp_descriptor_;
  metadata.reflection = CSUserSkillDiffRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSWalkReq::kXposFieldNumber;
const int CSWalkReq::kYposFieldNumber;
const int CSWalkReq::kAnimidFieldNumber;
const int CSWalkReq::kFlipFieldNumber;
#endif  // !_MSC_VER

CSWalkReq::CSWalkReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSWalkReq::InitAsDefaultInstance() {
}

CSWalkReq::CSWalkReq(const CSWalkReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSWalkReq::SharedCtor() {
  _cached_size_ = 0;
  xpos_ = 0u;
  ypos_ = 0u;
  animid_ = 0u;
  flip_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWalkReq::~CSWalkReq() {
  SharedDtor();
}

void CSWalkReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSWalkReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSWalkReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSWalkReq_descriptor_;
}

const CSWalkReq& CSWalkReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSWalkReq* CSWalkReq::default_instance_ = NULL;

CSWalkReq* CSWalkReq::New() const {
  return new CSWalkReq;
}

void CSWalkReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    xpos_ = 0u;
    ypos_ = 0u;
    animid_ = 0u;
    flip_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSWalkReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 xpos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ypos;
        break;
      }

      // required uint32 ypos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_animid;
        break;
      }

      // required uint32 animid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_animid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &animid_)));
          set_has_animid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flip;
        break;
      }

      // required bool flip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flip_)));
          set_has_flip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWalkReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 xpos = 1;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->xpos(), output);
  }

  // required uint32 ypos = 2;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ypos(), output);
  }

  // required uint32 animid = 3;
  if (has_animid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->animid(), output);
  }

  // required bool flip = 4;
  if (has_flip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->flip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSWalkReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 xpos = 1;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->xpos(), target);
  }

  // required uint32 ypos = 2;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ypos(), target);
  }

  // required uint32 animid = 3;
  if (has_animid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->animid(), target);
  }

  // required bool flip = 4;
  if (has_flip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->flip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSWalkReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 xpos = 1;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xpos());
    }

    // required uint32 ypos = 2;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ypos());
    }

    // required uint32 animid = 3;
    if (has_animid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->animid());
    }

    // required bool flip = 4;
    if (has_flip()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWalkReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSWalkReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSWalkReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSWalkReq::MergeFrom(const CSWalkReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_animid()) {
      set_animid(from.animid());
    }
    if (from.has_flip()) {
      set_flip(from.flip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSWalkReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSWalkReq::CopyFrom(const CSWalkReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWalkReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSWalkReq::Swap(CSWalkReq* other) {
  if (other != this) {
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(animid_, other->animid_);
    std::swap(flip_, other->flip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSWalkReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSWalkReq_descriptor_;
  metadata.reflection = CSWalkReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSWalkRsp::kUidFieldNumber;
const int CSWalkRsp::kXposFieldNumber;
const int CSWalkRsp::kYposFieldNumber;
const int CSWalkRsp::kAnimidFieldNumber;
const int CSWalkRsp::kFlipFieldNumber;
#endif  // !_MSC_VER

CSWalkRsp::CSWalkRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSWalkRsp::InitAsDefaultInstance() {
}

CSWalkRsp::CSWalkRsp(const CSWalkRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSWalkRsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  xpos_ = 0u;
  ypos_ = 0u;
  animid_ = 0u;
  flip_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWalkRsp::~CSWalkRsp() {
  SharedDtor();
}

void CSWalkRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSWalkRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSWalkRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSWalkRsp_descriptor_;
}

const CSWalkRsp& CSWalkRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSWalkRsp* CSWalkRsp::default_instance_ = NULL;

CSWalkRsp* CSWalkRsp::New() const {
  return new CSWalkRsp;
}

void CSWalkRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    xpos_ = 0u;
    ypos_ = 0u;
    animid_ = 0u;
    flip_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSWalkRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_xpos;
        break;
      }

      // required uint32 xpos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ypos;
        break;
      }

      // required uint32 ypos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_animid;
        break;
      }

      // required uint32 animid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_animid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &animid_)));
          set_has_animid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_flip;
        break;
      }

      // required bool flip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flip_)));
          set_has_flip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWalkRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 xpos = 2;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->xpos(), output);
  }

  // required uint32 ypos = 3;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ypos(), output);
  }

  // required uint32 animid = 4;
  if (has_animid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->animid(), output);
  }

  // required bool flip = 5;
  if (has_flip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->flip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSWalkRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 xpos = 2;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->xpos(), target);
  }

  // required uint32 ypos = 3;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ypos(), target);
  }

  // required uint32 animid = 4;
  if (has_animid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->animid(), target);
  }

  // required bool flip = 5;
  if (has_flip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->flip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSWalkRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 xpos = 2;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xpos());
    }

    // required uint32 ypos = 3;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ypos());
    }

    // required uint32 animid = 4;
    if (has_animid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->animid());
    }

    // required bool flip = 5;
    if (has_flip()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWalkRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSWalkRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSWalkRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSWalkRsp::MergeFrom(const CSWalkRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_animid()) {
      set_animid(from.animid());
    }
    if (from.has_flip()) {
      set_flip(from.flip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSWalkRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSWalkRsp::CopyFrom(const CSWalkRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWalkRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CSWalkRsp::Swap(CSWalkRsp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(animid_, other->animid_);
    std::swap(flip_, other->flip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSWalkRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSWalkRsp_descriptor_;
  metadata.reflection = CSWalkRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSItemAttr::kAttrKeyFieldNumber;
const int CSItemAttr::kAttrBasicValueFieldNumber;
const int CSItemAttr::kAttrIntensifyValueFieldNumber;
const int CSItemAttr::kAttrGemValueFieldNumber;
#endif  // !_MSC_VER

CSItemAttr::CSItemAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSItemAttr::InitAsDefaultInstance() {
}

CSItemAttr::CSItemAttr(const CSItemAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSItemAttr::SharedCtor() {
  _cached_size_ = 0;
  attr_key_ = 0u;
  attr_basic_value_ = 0u;
  attr_intensify_value_ = 0u;
  attr_gem_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSItemAttr::~CSItemAttr() {
  SharedDtor();
}

void CSItemAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSItemAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSItemAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSItemAttr_descriptor_;
}

const CSItemAttr& CSItemAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSItemAttr* CSItemAttr::default_instance_ = NULL;

CSItemAttr* CSItemAttr::New() const {
  return new CSItemAttr;
}

void CSItemAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attr_key_ = 0u;
    attr_basic_value_ = 0u;
    attr_intensify_value_ = 0u;
    attr_gem_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSItemAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attr_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_key_)));
          set_has_attr_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attr_basic_value;
        break;
      }

      // required uint32 attr_basic_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_basic_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_basic_value_)));
          set_has_attr_basic_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attr_intensify_value;
        break;
      }

      // optional uint32 attr_intensify_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_intensify_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_intensify_value_)));
          set_has_attr_intensify_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attr_gem_value;
        break;
      }

      // optional uint32 attr_gem_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_gem_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_gem_value_)));
          set_has_attr_gem_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSItemAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 attr_key = 1;
  if (has_attr_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attr_key(), output);
  }

  // required uint32 attr_basic_value = 2;
  if (has_attr_basic_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attr_basic_value(), output);
  }

  // optional uint32 attr_intensify_value = 3;
  if (has_attr_intensify_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attr_intensify_value(), output);
  }

  // optional uint32 attr_gem_value = 4;
  if (has_attr_gem_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attr_gem_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSItemAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attr_key = 1;
  if (has_attr_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attr_key(), target);
  }

  // required uint32 attr_basic_value = 2;
  if (has_attr_basic_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attr_basic_value(), target);
  }

  // optional uint32 attr_intensify_value = 3;
  if (has_attr_intensify_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attr_intensify_value(), target);
  }

  // optional uint32 attr_gem_value = 4;
  if (has_attr_gem_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attr_gem_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSItemAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attr_key = 1;
    if (has_attr_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_key());
    }

    // required uint32 attr_basic_value = 2;
    if (has_attr_basic_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_basic_value());
    }

    // optional uint32 attr_intensify_value = 3;
    if (has_attr_intensify_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_intensify_value());
    }

    // optional uint32 attr_gem_value = 4;
    if (has_attr_gem_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_gem_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSItemAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSItemAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSItemAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSItemAttr::MergeFrom(const CSItemAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attr_key()) {
      set_attr_key(from.attr_key());
    }
    if (from.has_attr_basic_value()) {
      set_attr_basic_value(from.attr_basic_value());
    }
    if (from.has_attr_intensify_value()) {
      set_attr_intensify_value(from.attr_intensify_value());
    }
    if (from.has_attr_gem_value()) {
      set_attr_gem_value(from.attr_gem_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSItemAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSItemAttr::CopyFrom(const CSItemAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSItemAttr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSItemAttr::Swap(CSItemAttr* other) {
  if (other != this) {
    std::swap(attr_key_, other->attr_key_);
    std::swap(attr_basic_value_, other->attr_basic_value_);
    std::swap(attr_intensify_value_, other->attr_intensify_value_);
    std::swap(attr_gem_value_, other->attr_gem_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSItemAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSItemAttr_descriptor_;
  metadata.reflection = CSItemAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipHole::kHoleIndexFieldNumber;
const int CSEquipHole::kItemGemIdFieldNumber;
const int CSEquipHole::kAttrKeyFieldNumber;
const int CSEquipHole::kAttrValueFieldNumber;
const int CSEquipHole::kAttrMinVFieldNumber;
const int CSEquipHole::kAttrMaxVFieldNumber;
#endif  // !_MSC_VER

CSEquipHole::CSEquipHole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSEquipHole::InitAsDefaultInstance() {
}

CSEquipHole::CSEquipHole(const CSEquipHole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipHole::SharedCtor() {
  _cached_size_ = 0;
  hole_index_ = 0u;
  item_gem_id_ = 0u;
  attr_key_ = 0u;
  attr_value_ = 0u;
  attr_min_v_ = 0u;
  attr_max_v_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipHole::~CSEquipHole() {
  SharedDtor();
}

void CSEquipHole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSEquipHole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSEquipHole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSEquipHole_descriptor_;
}

const CSEquipHole& CSEquipHole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSEquipHole* CSEquipHole::default_instance_ = NULL;

CSEquipHole* CSEquipHole::New() const {
  return new CSEquipHole;
}

void CSEquipHole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hole_index_ = 0u;
    item_gem_id_ = 0u;
    attr_key_ = 0u;
    attr_value_ = 0u;
    attr_min_v_ = 0u;
    attr_max_v_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSEquipHole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hole_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hole_index_)));
          set_has_hole_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_gem_id;
        break;
      }

      // required uint32 item_gem_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_gem_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_gem_id_)));
          set_has_item_gem_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attr_key;
        break;
      }

      // required uint32 attr_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_key_)));
          set_has_attr_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attr_value;
        break;
      }

      // required uint32 attr_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_value_)));
          set_has_attr_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_attr_min_v;
        break;
      }

      // optional uint32 attr_min_v = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_min_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_min_v_)));
          set_has_attr_min_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_attr_max_v;
        break;
      }

      // optional uint32 attr_max_v = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_max_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_max_v_)));
          set_has_attr_max_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipHole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hole_index = 1;
  if (has_hole_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hole_index(), output);
  }

  // required uint32 item_gem_id = 2;
  if (has_item_gem_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_gem_id(), output);
  }

  // required uint32 attr_key = 3;
  if (has_attr_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attr_key(), output);
  }

  // required uint32 attr_value = 4;
  if (has_attr_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attr_value(), output);
  }

  // optional uint32 attr_min_v = 5;
  if (has_attr_min_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->attr_min_v(), output);
  }

  // optional uint32 attr_max_v = 6;
  if (has_attr_max_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->attr_max_v(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSEquipHole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hole_index = 1;
  if (has_hole_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hole_index(), target);
  }

  // required uint32 item_gem_id = 2;
  if (has_item_gem_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_gem_id(), target);
  }

  // required uint32 attr_key = 3;
  if (has_attr_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attr_key(), target);
  }

  // required uint32 attr_value = 4;
  if (has_attr_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attr_value(), target);
  }

  // optional uint32 attr_min_v = 5;
  if (has_attr_min_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->attr_min_v(), target);
  }

  // optional uint32 attr_max_v = 6;
  if (has_attr_max_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->attr_max_v(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSEquipHole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hole_index = 1;
    if (has_hole_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hole_index());
    }

    // required uint32 item_gem_id = 2;
    if (has_item_gem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_gem_id());
    }

    // required uint32 attr_key = 3;
    if (has_attr_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_key());
    }

    // required uint32 attr_value = 4;
    if (has_attr_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_value());
    }

    // optional uint32 attr_min_v = 5;
    if (has_attr_min_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_min_v());
    }

    // optional uint32 attr_max_v = 6;
    if (has_attr_max_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_max_v());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipHole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSEquipHole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSEquipHole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSEquipHole::MergeFrom(const CSEquipHole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hole_index()) {
      set_hole_index(from.hole_index());
    }
    if (from.has_item_gem_id()) {
      set_item_gem_id(from.item_gem_id());
    }
    if (from.has_attr_key()) {
      set_attr_key(from.attr_key());
    }
    if (from.has_attr_value()) {
      set_attr_value(from.attr_value());
    }
    if (from.has_attr_min_v()) {
      set_attr_min_v(from.attr_min_v());
    }
    if (from.has_attr_max_v()) {
      set_attr_max_v(from.attr_max_v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSEquipHole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSEquipHole::CopyFrom(const CSEquipHole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipHole::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSEquipHole::Swap(CSEquipHole* other) {
  if (other != this) {
    std::swap(hole_index_, other->hole_index_);
    std::swap(item_gem_id_, other->item_gem_id_);
    std::swap(attr_key_, other->attr_key_);
    std::swap(attr_value_, other->attr_value_);
    std::swap(attr_min_v_, other->attr_min_v_);
    std::swap(attr_max_v_, other->attr_max_v_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSEquipHole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSEquipHole_descriptor_;
  metadata.reflection = CSEquipHole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentBase_Item_Attr::kKeyFieldNumber;
const int EquipmentBase_Item_Attr::kValueFieldNumber;
#endif  // !_MSC_VER

EquipmentBase_Item_Attr::EquipmentBase_Item_Attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentBase_Item_Attr::InitAsDefaultInstance() {
}

EquipmentBase_Item_Attr::EquipmentBase_Item_Attr(const EquipmentBase_Item_Attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentBase_Item_Attr::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentBase_Item_Attr::~EquipmentBase_Item_Attr() {
  SharedDtor();
}

void EquipmentBase_Item_Attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentBase_Item_Attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentBase_Item_Attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentBase_Item_Attr_descriptor_;
}

const EquipmentBase_Item_Attr& EquipmentBase_Item_Attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

EquipmentBase_Item_Attr* EquipmentBase_Item_Attr::default_instance_ = NULL;

EquipmentBase_Item_Attr* EquipmentBase_Item_Attr::New() const {
  return new EquipmentBase_Item_Attr;
}

void EquipmentBase_Item_Attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentBase_Item_Attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentBase_Item_Attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentBase_Item_Attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentBase_Item_Attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentBase_Item_Attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentBase_Item_Attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentBase_Item_Attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentBase_Item_Attr::MergeFrom(const EquipmentBase_Item_Attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentBase_Item_Attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentBase_Item_Attr::CopyFrom(const EquipmentBase_Item_Attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentBase_Item_Attr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EquipmentBase_Item_Attr::Swap(EquipmentBase_Item_Attr* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentBase_Item_Attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentBase_Item_Attr_descriptor_;
  metadata.reflection = EquipmentBase_Item_Attr_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int EquipmentBase::kCostLevelupFieldNumber;
const int EquipmentBase::kIncrAttrNextLvFieldNumber;
const int EquipmentBase::kEquipHolesFieldNumber;
#endif  // !_MSC_VER

EquipmentBase::EquipmentBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentBase::InitAsDefaultInstance() {
}

EquipmentBase::EquipmentBase(const EquipmentBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentBase::SharedCtor() {
  _cached_size_ = 0;
  cost_levelup_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentBase::~EquipmentBase() {
  SharedDtor();
}

void EquipmentBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentBase_descriptor_;
}

const EquipmentBase& EquipmentBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

EquipmentBase* EquipmentBase::default_instance_ = NULL;

EquipmentBase* EquipmentBase::New() const {
  return new EquipmentBase;
}

void EquipmentBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cost_levelup_ = 0u;
  }
  incr_attr_next_lv_.Clear();
  equip_holes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cost_levelup = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_levelup_)));
          set_has_cost_levelup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_incr_attr_next_lv;
        break;
      }

      // repeated .EquipmentBase.Item_Attr incr_attr_next_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_incr_attr_next_lv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_incr_attr_next_lv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_incr_attr_next_lv;
        if (input->ExpectTag(26)) goto parse_equip_holes;
        break;
      }

      // repeated .CSEquipHole equip_holes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_holes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_holes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equip_holes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cost_levelup = 1;
  if (has_cost_levelup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cost_levelup(), output);
  }

  // repeated .EquipmentBase.Item_Attr incr_attr_next_lv = 2;
  for (int i = 0; i < this->incr_attr_next_lv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->incr_attr_next_lv(i), output);
  }

  // repeated .CSEquipHole equip_holes = 3;
  for (int i = 0; i < this->equip_holes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equip_holes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cost_levelup = 1;
  if (has_cost_levelup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cost_levelup(), target);
  }

  // repeated .EquipmentBase.Item_Attr incr_attr_next_lv = 2;
  for (int i = 0; i < this->incr_attr_next_lv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->incr_attr_next_lv(i), target);
  }

  // repeated .CSEquipHole equip_holes = 3;
  for (int i = 0; i < this->equip_holes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equip_holes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cost_levelup = 1;
    if (has_cost_levelup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_levelup());
    }

  }
  // repeated .EquipmentBase.Item_Attr incr_attr_next_lv = 2;
  total_size += 1 * this->incr_attr_next_lv_size();
  for (int i = 0; i < this->incr_attr_next_lv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->incr_attr_next_lv(i));
  }

  // repeated .CSEquipHole equip_holes = 3;
  total_size += 1 * this->equip_holes_size();
  for (int i = 0; i < this->equip_holes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_holes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentBase::MergeFrom(const EquipmentBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  incr_attr_next_lv_.MergeFrom(from.incr_attr_next_lv_);
  equip_holes_.MergeFrom(from.equip_holes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cost_levelup()) {
      set_cost_levelup(from.cost_levelup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentBase::CopyFrom(const EquipmentBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < incr_attr_next_lv_size(); i++) {
    if (!this->incr_attr_next_lv(i).IsInitialized()) return false;
  }
  for (int i = 0; i < equip_holes_size(); i++) {
    if (!this->equip_holes(i).IsInitialized()) return false;
  }
  return true;
}

void EquipmentBase::Swap(EquipmentBase* other) {
  if (other != this) {
    std::swap(cost_levelup_, other->cost_levelup_);
    incr_attr_next_lv_.Swap(&other->incr_attr_next_lv_);
    equip_holes_.Swap(&other->equip_holes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentBase_descriptor_;
  metadata.reflection = EquipmentBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpiritStoneBase::kConsumeFieldNumber;
const int SpiritStoneBase::kConvertFieldNumber;
#endif  // !_MSC_VER

SpiritStoneBase::SpiritStoneBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpiritStoneBase::InitAsDefaultInstance() {
}

SpiritStoneBase::SpiritStoneBase(const SpiritStoneBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpiritStoneBase::SharedCtor() {
  _cached_size_ = 0;
  consume_ = 0u;
  convert_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpiritStoneBase::~SpiritStoneBase() {
  SharedDtor();
}

void SpiritStoneBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpiritStoneBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpiritStoneBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpiritStoneBase_descriptor_;
}

const SpiritStoneBase& SpiritStoneBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

SpiritStoneBase* SpiritStoneBase::default_instance_ = NULL;

SpiritStoneBase* SpiritStoneBase::New() const {
  return new SpiritStoneBase;
}

void SpiritStoneBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    consume_ = 0u;
    convert_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpiritStoneBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 consume = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_convert;
        break;
      }

      // required uint32 convert = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_convert:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &convert_)));
          set_has_convert();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpiritStoneBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 consume = 1;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->consume(), output);
  }

  // required uint32 convert = 2;
  if (has_convert()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->convert(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpiritStoneBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 consume = 1;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->consume(), target);
  }

  // required uint32 convert = 2;
  if (has_convert()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->convert(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpiritStoneBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 consume = 1;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // required uint32 convert = 2;
    if (has_convert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->convert());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpiritStoneBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpiritStoneBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpiritStoneBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpiritStoneBase::MergeFrom(const SpiritStoneBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_convert()) {
      set_convert(from.convert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpiritStoneBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpiritStoneBase::CopyFrom(const SpiritStoneBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpiritStoneBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SpiritStoneBase::Swap(SpiritStoneBase* other) {
  if (other != this) {
    std::swap(consume_, other->consume_);
    std::swap(convert_, other->convert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpiritStoneBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpiritStoneBase_descriptor_;
  metadata.reflection = SpiritStoneBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ManorBase::kHuntGainCoinFieldNumber;
const int ManorBase::kPickGainExpFieldNumber;
#endif  // !_MSC_VER

ManorBase::ManorBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ManorBase::InitAsDefaultInstance() {
}

ManorBase::ManorBase(const ManorBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ManorBase::SharedCtor() {
  _cached_size_ = 0;
  hunt_gain_coin_ = 0u;
  pick_gain_exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManorBase::~ManorBase() {
  SharedDtor();
}

void ManorBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ManorBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManorBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManorBase_descriptor_;
}

const ManorBase& ManorBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

ManorBase* ManorBase::default_instance_ = NULL;

ManorBase* ManorBase::New() const {
  return new ManorBase;
}

void ManorBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hunt_gain_coin_ = 0u;
    pick_gain_exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManorBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hunt_gain_coin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hunt_gain_coin_)));
          set_has_hunt_gain_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pick_gain_exp;
        break;
      }

      // required uint32 pick_gain_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pick_gain_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pick_gain_exp_)));
          set_has_pick_gain_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ManorBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hunt_gain_coin = 1;
  if (has_hunt_gain_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hunt_gain_coin(), output);
  }

  // required uint32 pick_gain_exp = 2;
  if (has_pick_gain_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pick_gain_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ManorBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hunt_gain_coin = 1;
  if (has_hunt_gain_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hunt_gain_coin(), target);
  }

  // required uint32 pick_gain_exp = 2;
  if (has_pick_gain_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pick_gain_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ManorBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hunt_gain_coin = 1;
    if (has_hunt_gain_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hunt_gain_coin());
    }

    // required uint32 pick_gain_exp = 2;
    if (has_pick_gain_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pick_gain_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManorBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManorBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManorBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManorBase::MergeFrom(const ManorBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hunt_gain_coin()) {
      set_hunt_gain_coin(from.hunt_gain_coin());
    }
    if (from.has_pick_gain_exp()) {
      set_pick_gain_exp(from.pick_gain_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManorBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManorBase::CopyFrom(const ManorBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManorBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ManorBase::Swap(ManorBase* other) {
  if (other != this) {
    std::swap(hunt_gain_coin_, other->hunt_gain_coin_);
    std::swap(pick_gain_exp_, other->pick_gain_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManorBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManorBase_descriptor_;
  metadata.reflection = ManorBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSItemInfo::kPosFieldNumber;
const int CSItemInfo::kItemIdFieldNumber;
const int CSItemInfo::kItemNumFieldNumber;
const int CSItemInfo::kItemLevelFieldNumber;
const int CSItemInfo::kItemAttrsFieldNumber;
const int CSItemInfo::kEquipInfoFieldNumber;
const int CSItemInfo::kSsInfoFieldNumber;
const int CSItemInfo::kManorInfoFieldNumber;
#endif  // !_MSC_VER

CSItemInfo::CSItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSItemInfo::InitAsDefaultInstance() {
  equip_info_ = const_cast< ::EquipmentBase*>(&::EquipmentBase::default_instance());
  ss_info_ = const_cast< ::SpiritStoneBase*>(&::SpiritStoneBase::default_instance());
  manor_info_ = const_cast< ::ManorBase*>(&::ManorBase::default_instance());
}

CSItemInfo::CSItemInfo(const CSItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSItemInfo::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  item_id_ = 0u;
  item_num_ = 0u;
  item_level_ = 0u;
  equip_info_ = NULL;
  ss_info_ = NULL;
  manor_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSItemInfo::~CSItemInfo() {
  SharedDtor();
}

void CSItemInfo::SharedDtor() {
  if (this != default_instance_) {
    delete equip_info_;
    delete ss_info_;
    delete manor_info_;
  }
}

void CSItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSItemInfo_descriptor_;
}

const CSItemInfo& CSItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSItemInfo* CSItemInfo::default_instance_ = NULL;

CSItemInfo* CSItemInfo::New() const {
  return new CSItemInfo;
}

void CSItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    item_id_ = 0u;
    item_num_ = 0u;
    item_level_ = 0u;
    if (has_equip_info()) {
      if (equip_info_ != NULL) equip_info_->::EquipmentBase::Clear();
    }
    if (has_ss_info()) {
      if (ss_info_ != NULL) ss_info_->::SpiritStoneBase::Clear();
    }
    if (has_manor_info()) {
      if (manor_info_ != NULL) manor_info_->::ManorBase::Clear();
    }
  }
  item_attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // required uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_num;
        break;
      }

      // required uint32 item_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_level;
        break;
      }

      // optional uint32 item_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_level_)));
          set_has_item_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item_attrs;
        break;
      }

      // repeated .CSItemAttr item_attrs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_attrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item_attrs;
        if (input->ExpectTag(50)) goto parse_equip_info;
        break;
      }

      // optional .EquipmentBase equip_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ss_info;
        break;
      }

      // optional .SpiritStoneBase ss_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ss_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ss_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_manor_info;
        break;
      }

      // optional .ManorBase manor_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manor_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manor_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // required uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }

  // required uint32 item_num = 3;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_num(), output);
  }

  // optional uint32 item_level = 4;
  if (has_item_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->item_level(), output);
  }

  // repeated .CSItemAttr item_attrs = 5;
  for (int i = 0; i < this->item_attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->item_attrs(i), output);
  }

  // optional .EquipmentBase equip_info = 6;
  if (has_equip_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->equip_info(), output);
  }

  // optional .SpiritStoneBase ss_info = 7;
  if (has_ss_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ss_info(), output);
  }

  // optional .ManorBase manor_info = 8;
  if (has_manor_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->manor_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // required uint32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_id(), target);
  }

  // required uint32 item_num = 3;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_num(), target);
  }

  // optional uint32 item_level = 4;
  if (has_item_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->item_level(), target);
  }

  // repeated .CSItemAttr item_attrs = 5;
  for (int i = 0; i < this->item_attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->item_attrs(i), target);
  }

  // optional .EquipmentBase equip_info = 6;
  if (has_equip_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->equip_info(), target);
  }

  // optional .SpiritStoneBase ss_info = 7;
  if (has_ss_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ss_info(), target);
  }

  // optional .ManorBase manor_info = 8;
  if (has_manor_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->manor_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // required uint32 item_num = 3;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_num());
    }

    // optional uint32 item_level = 4;
    if (has_item_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_level());
    }

    // optional .EquipmentBase equip_info = 6;
    if (has_equip_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip_info());
    }

    // optional .SpiritStoneBase ss_info = 7;
    if (has_ss_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ss_info());
    }

    // optional .ManorBase manor_info = 8;
    if (has_manor_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->manor_info());
    }

  }
  // repeated .CSItemAttr item_attrs = 5;
  total_size += 1 * this->item_attrs_size();
  for (int i = 0; i < this->item_attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_attrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSItemInfo::MergeFrom(const CSItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_attrs_.MergeFrom(from.item_attrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_item_level()) {
      set_item_level(from.item_level());
    }
    if (from.has_equip_info()) {
      mutable_equip_info()->::EquipmentBase::MergeFrom(from.equip_info());
    }
    if (from.has_ss_info()) {
      mutable_ss_info()->::SpiritStoneBase::MergeFrom(from.ss_info());
    }
    if (from.has_manor_info()) {
      mutable_manor_info()->::ManorBase::MergeFrom(from.manor_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSItemInfo::CopyFrom(const CSItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < item_attrs_size(); i++) {
    if (!this->item_attrs(i).IsInitialized()) return false;
  }
  if (has_equip_info()) {
    if (!this->equip_info().IsInitialized()) return false;
  }
  if (has_ss_info()) {
    if (!this->ss_info().IsInitialized()) return false;
  }
  if (has_manor_info()) {
    if (!this->manor_info().IsInitialized()) return false;
  }
  return true;
}

void CSItemInfo::Swap(CSItemInfo* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(item_level_, other->item_level_);
    item_attrs_.Swap(&other->item_attrs_);
    std::swap(equip_info_, other->equip_info_);
    std::swap(ss_info_, other->ss_info_);
    std::swap(manor_info_, other->manor_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSItemInfo_descriptor_;
  metadata.reflection = CSItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSAllItemsReq::CSAllItemsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSAllItemsReq::InitAsDefaultInstance() {
}

CSAllItemsReq::CSAllItemsReq(const CSAllItemsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSAllItemsReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAllItemsReq::~CSAllItemsReq() {
  SharedDtor();
}

void CSAllItemsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSAllItemsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSAllItemsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSAllItemsReq_descriptor_;
}

const CSAllItemsReq& CSAllItemsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSAllItemsReq* CSAllItemsReq::default_instance_ = NULL;

CSAllItemsReq* CSAllItemsReq::New() const {
  return new CSAllItemsReq;
}

void CSAllItemsReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSAllItemsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSAllItemsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSAllItemsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSAllItemsReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAllItemsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSAllItemsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSAllItemsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSAllItemsReq::MergeFrom(const CSAllItemsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSAllItemsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAllItemsReq::CopyFrom(const CSAllItemsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAllItemsReq::IsInitialized() const {

  return true;
}

void CSAllItemsReq::Swap(CSAllItemsReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSAllItemsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSAllItemsReq_descriptor_;
  metadata.reflection = CSAllItemsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSAllItemsRsp::kDefBagSizeFieldNumber;
const int CSAllItemsRsp::kDefStoreSizeFieldNumber;
const int CSAllItemsRsp::kDefSsBagSizeFieldNumber;
const int CSAllItemsRsp::kDefSsStoreSizeFieldNumber;
const int CSAllItemsRsp::kDefEquipLvupMaxTimesFieldNumber;
const int CSAllItemsRsp::kDefResetGemTimesFieldNumber;
const int CSAllItemsRsp::kDefEnterManorTimesFieldNumber;
const int CSAllItemsRsp::kItemsFieldNumber;
#endif  // !_MSC_VER

CSAllItemsRsp::CSAllItemsRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSAllItemsRsp::InitAsDefaultInstance() {
}

CSAllItemsRsp::CSAllItemsRsp(const CSAllItemsRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSAllItemsRsp::SharedCtor() {
  _cached_size_ = 0;
  def_bag_size_ = 0u;
  def_store_size_ = 0u;
  def_ss_bag_size_ = 0u;
  def_ss_store_size_ = 0u;
  def_equip_lvup_max_times_ = 0u;
  def_reset_gem_times_ = 0u;
  def_enter_manor_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAllItemsRsp::~CSAllItemsRsp() {
  SharedDtor();
}

void CSAllItemsRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSAllItemsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSAllItemsRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSAllItemsRsp_descriptor_;
}

const CSAllItemsRsp& CSAllItemsRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSAllItemsRsp* CSAllItemsRsp::default_instance_ = NULL;

CSAllItemsRsp* CSAllItemsRsp::New() const {
  return new CSAllItemsRsp;
}

void CSAllItemsRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    def_bag_size_ = 0u;
    def_store_size_ = 0u;
    def_ss_bag_size_ = 0u;
    def_ss_store_size_ = 0u;
    def_equip_lvup_max_times_ = 0u;
    def_reset_gem_times_ = 0u;
    def_enter_manor_times_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSAllItemsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 def_bag_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_bag_size_)));
          set_has_def_bag_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_def_store_size;
        break;
      }

      // required uint32 def_store_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def_store_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_store_size_)));
          set_has_def_store_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_def_ss_bag_size;
        break;
      }

      // required uint32 def_ss_bag_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def_ss_bag_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_ss_bag_size_)));
          set_has_def_ss_bag_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_def_ss_store_size;
        break;
      }

      // required uint32 def_ss_store_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def_ss_store_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_ss_store_size_)));
          set_has_def_ss_store_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_def_equip_lvup_max_times;
        break;
      }

      // required uint32 def_equip_lvup_max_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def_equip_lvup_max_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_equip_lvup_max_times_)));
          set_has_def_equip_lvup_max_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_def_reset_gem_times;
        break;
      }

      // required uint32 def_reset_gem_times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def_reset_gem_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_reset_gem_times_)));
          set_has_def_reset_gem_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_def_enter_manor_times;
        break;
      }

      // required uint32 def_enter_manor_times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def_enter_manor_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_enter_manor_times_)));
          set_has_def_enter_manor_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_items;
        break;
      }

      // repeated .CSItemInfo items = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAllItemsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 def_bag_size = 1;
  if (has_def_bag_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->def_bag_size(), output);
  }

  // required uint32 def_store_size = 2;
  if (has_def_store_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->def_store_size(), output);
  }

  // required uint32 def_ss_bag_size = 3;
  if (has_def_ss_bag_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->def_ss_bag_size(), output);
  }

  // required uint32 def_ss_store_size = 4;
  if (has_def_ss_store_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->def_ss_store_size(), output);
  }

  // required uint32 def_equip_lvup_max_times = 5;
  if (has_def_equip_lvup_max_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->def_equip_lvup_max_times(), output);
  }

  // required uint32 def_reset_gem_times = 6;
  if (has_def_reset_gem_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->def_reset_gem_times(), output);
  }

  // required uint32 def_enter_manor_times = 7;
  if (has_def_enter_manor_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->def_enter_manor_times(), output);
  }

  // repeated .CSItemInfo items = 15;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSAllItemsRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 def_bag_size = 1;
  if (has_def_bag_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->def_bag_size(), target);
  }

  // required uint32 def_store_size = 2;
  if (has_def_store_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->def_store_size(), target);
  }

  // required uint32 def_ss_bag_size = 3;
  if (has_def_ss_bag_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->def_ss_bag_size(), target);
  }

  // required uint32 def_ss_store_size = 4;
  if (has_def_ss_store_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->def_ss_store_size(), target);
  }

  // required uint32 def_equip_lvup_max_times = 5;
  if (has_def_equip_lvup_max_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->def_equip_lvup_max_times(), target);
  }

  // required uint32 def_reset_gem_times = 6;
  if (has_def_reset_gem_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->def_reset_gem_times(), target);
  }

  // required uint32 def_enter_manor_times = 7;
  if (has_def_enter_manor_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->def_enter_manor_times(), target);
  }

  // repeated .CSItemInfo items = 15;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSAllItemsRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 def_bag_size = 1;
    if (has_def_bag_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_bag_size());
    }

    // required uint32 def_store_size = 2;
    if (has_def_store_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_store_size());
    }

    // required uint32 def_ss_bag_size = 3;
    if (has_def_ss_bag_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_ss_bag_size());
    }

    // required uint32 def_ss_store_size = 4;
    if (has_def_ss_store_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_ss_store_size());
    }

    // required uint32 def_equip_lvup_max_times = 5;
    if (has_def_equip_lvup_max_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_equip_lvup_max_times());
    }

    // required uint32 def_reset_gem_times = 6;
    if (has_def_reset_gem_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_reset_gem_times());
    }

    // required uint32 def_enter_manor_times = 7;
    if (has_def_enter_manor_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_enter_manor_times());
    }

  }
  // repeated .CSItemInfo items = 15;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAllItemsRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSAllItemsRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSAllItemsRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSAllItemsRsp::MergeFrom(const CSAllItemsRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_def_bag_size()) {
      set_def_bag_size(from.def_bag_size());
    }
    if (from.has_def_store_size()) {
      set_def_store_size(from.def_store_size());
    }
    if (from.has_def_ss_bag_size()) {
      set_def_ss_bag_size(from.def_ss_bag_size());
    }
    if (from.has_def_ss_store_size()) {
      set_def_ss_store_size(from.def_ss_store_size());
    }
    if (from.has_def_equip_lvup_max_times()) {
      set_def_equip_lvup_max_times(from.def_equip_lvup_max_times());
    }
    if (from.has_def_reset_gem_times()) {
      set_def_reset_gem_times(from.def_reset_gem_times());
    }
    if (from.has_def_enter_manor_times()) {
      set_def_enter_manor_times(from.def_enter_manor_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSAllItemsRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAllItemsRsp::CopyFrom(const CSAllItemsRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAllItemsRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void CSAllItemsRsp::Swap(CSAllItemsRsp* other) {
  if (other != this) {
    std::swap(def_bag_size_, other->def_bag_size_);
    std::swap(def_store_size_, other->def_store_size_);
    std::swap(def_ss_bag_size_, other->def_ss_bag_size_);
    std::swap(def_ss_store_size_, other->def_ss_store_size_);
    std::swap(def_equip_lvup_max_times_, other->def_equip_lvup_max_times_);
    std::swap(def_reset_gem_times_, other->def_reset_gem_times_);
    std::swap(def_enter_manor_times_, other->def_enter_manor_times_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSAllItemsRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSAllItemsRsp_descriptor_;
  metadata.reflection = CSAllItemsRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSItemAddRsp::kItemsFieldNumber;
#endif  // !_MSC_VER

CSItemAddRsp::CSItemAddRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSItemAddRsp::InitAsDefaultInstance() {
}

CSItemAddRsp::CSItemAddRsp(const CSItemAddRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSItemAddRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSItemAddRsp::~CSItemAddRsp() {
  SharedDtor();
}

void CSItemAddRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSItemAddRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSItemAddRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSItemAddRsp_descriptor_;
}

const CSItemAddRsp& CSItemAddRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSItemAddRsp* CSItemAddRsp::default_instance_ = NULL;

CSItemAddRsp* CSItemAddRsp::New() const {
  return new CSItemAddRsp;
}

void CSItemAddRsp::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSItemAddRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSItemInfo items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSItemAddRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSItemAddRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSItemAddRsp::ByteSize() const {
  int total_size = 0;

  // repeated .CSItemInfo items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSItemAddRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSItemAddRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSItemAddRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSItemAddRsp::MergeFrom(const CSItemAddRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSItemAddRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSItemAddRsp::CopyFrom(const CSItemAddRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSItemAddRsp::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void CSItemAddRsp::Swap(CSItemAddRsp* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSItemAddRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSItemAddRsp_descriptor_;
  metadata.reflection = CSItemAddRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSItemRemoveReq::kPosFieldNumber;
const int CSItemRemoveReq::kItemIdFieldNumber;
#endif  // !_MSC_VER

CSItemRemoveReq::CSItemRemoveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSItemRemoveReq::InitAsDefaultInstance() {
}

CSItemRemoveReq::CSItemRemoveReq(const CSItemRemoveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSItemRemoveReq::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  item_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSItemRemoveReq::~CSItemRemoveReq() {
  SharedDtor();
}

void CSItemRemoveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSItemRemoveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSItemRemoveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSItemRemoveReq_descriptor_;
}

const CSItemRemoveReq& CSItemRemoveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSItemRemoveReq* CSItemRemoveReq::default_instance_ = NULL;

CSItemRemoveReq* CSItemRemoveReq::New() const {
  return new CSItemRemoveReq;
}

void CSItemRemoveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    item_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSItemRemoveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // required uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSItemRemoveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // required uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSItemRemoveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // required uint32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSItemRemoveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSItemRemoveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSItemRemoveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSItemRemoveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSItemRemoveReq::MergeFrom(const CSItemRemoveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSItemRemoveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSItemRemoveReq::CopyFrom(const CSItemRemoveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSItemRemoveReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSItemRemoveReq::Swap(CSItemRemoveReq* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSItemRemoveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSItemRemoveReq_descriptor_;
  metadata.reflection = CSItemRemoveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSItemRemoveRsp::kPosFieldNumber;
const int CSItemRemoveRsp::kItemIdFieldNumber;
#endif  // !_MSC_VER

CSItemRemoveRsp::CSItemRemoveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSItemRemoveRsp::InitAsDefaultInstance() {
}

CSItemRemoveRsp::CSItemRemoveRsp(const CSItemRemoveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSItemRemoveRsp::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  item_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSItemRemoveRsp::~CSItemRemoveRsp() {
  SharedDtor();
}

void CSItemRemoveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSItemRemoveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSItemRemoveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSItemRemoveRsp_descriptor_;
}

const CSItemRemoveRsp& CSItemRemoveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSItemRemoveRsp* CSItemRemoveRsp::default_instance_ = NULL;

CSItemRemoveRsp* CSItemRemoveRsp::New() const {
  return new CSItemRemoveRsp;
}

void CSItemRemoveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    item_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSItemRemoveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // required uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSItemRemoveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // required uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSItemRemoveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // required uint32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSItemRemoveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSItemRemoveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSItemRemoveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSItemRemoveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSItemRemoveRsp::MergeFrom(const CSItemRemoveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSItemRemoveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSItemRemoveRsp::CopyFrom(const CSItemRemoveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSItemRemoveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSItemRemoveRsp::Swap(CSItemRemoveRsp* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSItemRemoveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSItemRemoveRsp_descriptor_;
  metadata.reflection = CSItemRemoveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSItemUseReq::kPosFieldNumber;
const int CSItemUseReq::kItemIdFieldNumber;
#endif  // !_MSC_VER

CSItemUseReq::CSItemUseReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSItemUseReq::InitAsDefaultInstance() {
}

CSItemUseReq::CSItemUseReq(const CSItemUseReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSItemUseReq::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  item_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSItemUseReq::~CSItemUseReq() {
  SharedDtor();
}

void CSItemUseReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSItemUseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSItemUseReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSItemUseReq_descriptor_;
}

const CSItemUseReq& CSItemUseReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSItemUseReq* CSItemUseReq::default_instance_ = NULL;

CSItemUseReq* CSItemUseReq::New() const {
  return new CSItemUseReq;
}

void CSItemUseReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    item_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSItemUseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // required uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSItemUseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // required uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSItemUseReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // required uint32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSItemUseReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSItemUseReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSItemUseReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSItemUseReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSItemUseReq::MergeFrom(const CSItemUseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSItemUseReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSItemUseReq::CopyFrom(const CSItemUseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSItemUseReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSItemUseReq::Swap(CSItemUseReq* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSItemUseReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSItemUseReq_descriptor_;
  metadata.reflection = CSItemUseReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSItemMoveReq::kPosFromFieldNumber;
const int CSItemMoveReq::kPosToFieldNumber;
#endif  // !_MSC_VER

CSItemMoveReq::CSItemMoveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSItemMoveReq::InitAsDefaultInstance() {
}

CSItemMoveReq::CSItemMoveReq(const CSItemMoveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSItemMoveReq::SharedCtor() {
  _cached_size_ = 0;
  pos_from_ = 0u;
  pos_to_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSItemMoveReq::~CSItemMoveReq() {
  SharedDtor();
}

void CSItemMoveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSItemMoveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSItemMoveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSItemMoveReq_descriptor_;
}

const CSItemMoveReq& CSItemMoveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSItemMoveReq* CSItemMoveReq::default_instance_ = NULL;

CSItemMoveReq* CSItemMoveReq::New() const {
  return new CSItemMoveReq;
}

void CSItemMoveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_from_ = 0u;
    pos_to_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSItemMoveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos_from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_from_)));
          set_has_pos_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos_to;
        break;
      }

      // required uint32 pos_to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_to_)));
          set_has_pos_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSItemMoveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos_from = 1;
  if (has_pos_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos_from(), output);
  }

  // required uint32 pos_to = 2;
  if (has_pos_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos_to(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSItemMoveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos_from = 1;
  if (has_pos_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos_from(), target);
  }

  // required uint32 pos_to = 2;
  if (has_pos_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos_to(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSItemMoveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos_from = 1;
    if (has_pos_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos_from());
    }

    // required uint32 pos_to = 2;
    if (has_pos_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos_to());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSItemMoveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSItemMoveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSItemMoveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSItemMoveReq::MergeFrom(const CSItemMoveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos_from()) {
      set_pos_from(from.pos_from());
    }
    if (from.has_pos_to()) {
      set_pos_to(from.pos_to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSItemMoveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSItemMoveReq::CopyFrom(const CSItemMoveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSItemMoveReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSItemMoveReq::Swap(CSItemMoveReq* other) {
  if (other != this) {
    std::swap(pos_from_, other->pos_from_);
    std::swap(pos_to_, other->pos_to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSItemMoveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSItemMoveReq_descriptor_;
  metadata.reflection = CSItemMoveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSItemMoveRsp::kPosFromFieldNumber;
const int CSItemMoveRsp::kPosToFieldNumber;
#endif  // !_MSC_VER

CSItemMoveRsp::CSItemMoveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSItemMoveRsp::InitAsDefaultInstance() {
}

CSItemMoveRsp::CSItemMoveRsp(const CSItemMoveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSItemMoveRsp::SharedCtor() {
  _cached_size_ = 0;
  pos_from_ = 0u;
  pos_to_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSItemMoveRsp::~CSItemMoveRsp() {
  SharedDtor();
}

void CSItemMoveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSItemMoveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSItemMoveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSItemMoveRsp_descriptor_;
}

const CSItemMoveRsp& CSItemMoveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSItemMoveRsp* CSItemMoveRsp::default_instance_ = NULL;

CSItemMoveRsp* CSItemMoveRsp::New() const {
  return new CSItemMoveRsp;
}

void CSItemMoveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_from_ = 0u;
    pos_to_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSItemMoveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos_from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_from_)));
          set_has_pos_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos_to;
        break;
      }

      // required uint32 pos_to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_to_)));
          set_has_pos_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSItemMoveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos_from = 1;
  if (has_pos_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos_from(), output);
  }

  // required uint32 pos_to = 2;
  if (has_pos_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos_to(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSItemMoveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos_from = 1;
  if (has_pos_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos_from(), target);
  }

  // required uint32 pos_to = 2;
  if (has_pos_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos_to(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSItemMoveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos_from = 1;
    if (has_pos_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos_from());
    }

    // required uint32 pos_to = 2;
    if (has_pos_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos_to());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSItemMoveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSItemMoveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSItemMoveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSItemMoveRsp::MergeFrom(const CSItemMoveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos_from()) {
      set_pos_from(from.pos_from());
    }
    if (from.has_pos_to()) {
      set_pos_to(from.pos_to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSItemMoveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSItemMoveRsp::CopyFrom(const CSItemMoveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSItemMoveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSItemMoveRsp::Swap(CSItemMoveRsp* other) {
  if (other != this) {
    std::swap(pos_from_, other->pos_from_);
    std::swap(pos_to_, other->pos_to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSItemMoveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSItemMoveRsp_descriptor_;
  metadata.reflection = CSItemMoveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSItemUpdateRsp::kItemFieldNumber;
#endif  // !_MSC_VER

CSItemUpdateRsp::CSItemUpdateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSItemUpdateRsp::InitAsDefaultInstance() {
}

CSItemUpdateRsp::CSItemUpdateRsp(const CSItemUpdateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSItemUpdateRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSItemUpdateRsp::~CSItemUpdateRsp() {
  SharedDtor();
}

void CSItemUpdateRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSItemUpdateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSItemUpdateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSItemUpdateRsp_descriptor_;
}

const CSItemUpdateRsp& CSItemUpdateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSItemUpdateRsp* CSItemUpdateRsp::default_instance_ = NULL;

CSItemUpdateRsp* CSItemUpdateRsp::New() const {
  return new CSItemUpdateRsp;
}

void CSItemUpdateRsp::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSItemUpdateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSItemInfo item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSItemUpdateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSItemInfo item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSItemUpdateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSItemInfo item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSItemUpdateRsp::ByteSize() const {
  int total_size = 0;

  // repeated .CSItemInfo item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSItemUpdateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSItemUpdateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSItemUpdateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSItemUpdateRsp::MergeFrom(const CSItemUpdateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSItemUpdateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSItemUpdateRsp::CopyFrom(const CSItemUpdateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSItemUpdateRsp::IsInitialized() const {

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void CSItemUpdateRsp::Swap(CSItemUpdateRsp* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSItemUpdateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSItemUpdateRsp_descriptor_;
  metadata.reflection = CSItemUpdateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSItemOrderReq::kTargetFieldNumber;
#endif  // !_MSC_VER

CSItemOrderReq::CSItemOrderReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSItemOrderReq::InitAsDefaultInstance() {
}

CSItemOrderReq::CSItemOrderReq(const CSItemOrderReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSItemOrderReq::SharedCtor() {
  _cached_size_ = 0;
  target_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSItemOrderReq::~CSItemOrderReq() {
  SharedDtor();
}

void CSItemOrderReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSItemOrderReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSItemOrderReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSItemOrderReq_descriptor_;
}

const CSItemOrderReq& CSItemOrderReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSItemOrderReq* CSItemOrderReq::default_instance_ = NULL;

CSItemOrderReq* CSItemOrderReq::New() const {
  return new CSItemOrderReq;
}

void CSItemOrderReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSItemOrderReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSItemOrderReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSItemOrderReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 target = 1;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSItemOrderReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSItemOrderReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSItemOrderReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSItemOrderReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSItemOrderReq::MergeFrom(const CSItemOrderReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      set_target(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSItemOrderReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSItemOrderReq::CopyFrom(const CSItemOrderReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSItemOrderReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSItemOrderReq::Swap(CSItemOrderReq* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSItemOrderReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSItemOrderReq_descriptor_;
  metadata.reflection = CSItemOrderReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSInstanceReq::kStartFieldNumber;
const int CSInstanceReq::kEndFieldNumber;
#endif  // !_MSC_VER

CSInstanceReq::CSInstanceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSInstanceReq::InitAsDefaultInstance() {
}

CSInstanceReq::CSInstanceReq(const CSInstanceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSInstanceReq::SharedCtor() {
  _cached_size_ = 0;
  start_ = 0u;
  end_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSInstanceReq::~CSInstanceReq() {
  SharedDtor();
}

void CSInstanceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSInstanceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSInstanceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSInstanceReq_descriptor_;
}

const CSInstanceReq& CSInstanceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSInstanceReq* CSInstanceReq::default_instance_ = NULL;

CSInstanceReq* CSInstanceReq::New() const {
  return new CSInstanceReq;
}

void CSInstanceReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_ = 0u;
    end_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSInstanceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 start = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }

      // required uint32 end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSInstanceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start(), output);
  }

  // required uint32 end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSInstanceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->start(), target);
  }

  // required uint32 end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSInstanceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start());
    }

    // required uint32 end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSInstanceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSInstanceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSInstanceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSInstanceReq::MergeFrom(const CSInstanceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSInstanceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSInstanceReq::CopyFrom(const CSInstanceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSInstanceReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSInstanceReq::Swap(CSInstanceReq* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSInstanceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSInstanceReq_descriptor_;
  metadata.reflection = CSInstanceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSInstanceRsp_CSInstance::kInstanceIdFieldNumber;
const int CSInstanceRsp_CSInstance::kActivateFieldNumber;
const int CSInstanceRsp_CSInstance::kStarFieldNumber;
#endif  // !_MSC_VER

CSInstanceRsp_CSInstance::CSInstanceRsp_CSInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSInstanceRsp_CSInstance::InitAsDefaultInstance() {
}

CSInstanceRsp_CSInstance::CSInstanceRsp_CSInstance(const CSInstanceRsp_CSInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSInstanceRsp_CSInstance::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0u;
  activate_ = false;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSInstanceRsp_CSInstance::~CSInstanceRsp_CSInstance() {
  SharedDtor();
}

void CSInstanceRsp_CSInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSInstanceRsp_CSInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSInstanceRsp_CSInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSInstanceRsp_CSInstance_descriptor_;
}

const CSInstanceRsp_CSInstance& CSInstanceRsp_CSInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSInstanceRsp_CSInstance* CSInstanceRsp_CSInstance::default_instance_ = NULL;

CSInstanceRsp_CSInstance* CSInstanceRsp_CSInstance::New() const {
  return new CSInstanceRsp_CSInstance;
}

void CSInstanceRsp_CSInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0u;
    activate_ = false;
    star_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSInstanceRsp_CSInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activate;
        break;
      }

      // required bool activate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activate_)));
          set_has_activate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // required uint32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSInstanceRsp_CSInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->instance_id(), output);
  }

  // required bool activate = 2;
  if (has_activate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->activate(), output);
  }

  // required uint32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSInstanceRsp_CSInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->instance_id(), target);
  }

  // required bool activate = 2;
  if (has_activate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->activate(), target);
  }

  // required uint32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSInstanceRsp_CSInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }

    // required bool activate = 2;
    if (has_activate()) {
      total_size += 1 + 1;
    }

    // required uint32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSInstanceRsp_CSInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSInstanceRsp_CSInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSInstanceRsp_CSInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSInstanceRsp_CSInstance::MergeFrom(const CSInstanceRsp_CSInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_activate()) {
      set_activate(from.activate());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSInstanceRsp_CSInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSInstanceRsp_CSInstance::CopyFrom(const CSInstanceRsp_CSInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSInstanceRsp_CSInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSInstanceRsp_CSInstance::Swap(CSInstanceRsp_CSInstance* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(activate_, other->activate_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSInstanceRsp_CSInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSInstanceRsp_CSInstance_descriptor_;
  metadata.reflection = CSInstanceRsp_CSInstance_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSInstanceRsp::kInstancesFieldNumber;
#endif  // !_MSC_VER

CSInstanceRsp::CSInstanceRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSInstanceRsp::InitAsDefaultInstance() {
}

CSInstanceRsp::CSInstanceRsp(const CSInstanceRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSInstanceRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSInstanceRsp::~CSInstanceRsp() {
  SharedDtor();
}

void CSInstanceRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSInstanceRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSInstanceRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSInstanceRsp_descriptor_;
}

const CSInstanceRsp& CSInstanceRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSInstanceRsp* CSInstanceRsp::default_instance_ = NULL;

CSInstanceRsp* CSInstanceRsp::New() const {
  return new CSInstanceRsp;
}

void CSInstanceRsp::Clear() {
  instances_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSInstanceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSInstanceRsp.CSInstance instances = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_instances;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSInstanceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSInstanceRsp.CSInstance instances = 1;
  for (int i = 0; i < this->instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->instances(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSInstanceRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSInstanceRsp.CSInstance instances = 1;
  for (int i = 0; i < this->instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->instances(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSInstanceRsp::ByteSize() const {
  int total_size = 0;

  // repeated .CSInstanceRsp.CSInstance instances = 1;
  total_size += 1 * this->instances_size();
  for (int i = 0; i < this->instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instances(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSInstanceRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSInstanceRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSInstanceRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSInstanceRsp::MergeFrom(const CSInstanceRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  instances_.MergeFrom(from.instances_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSInstanceRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSInstanceRsp::CopyFrom(const CSInstanceRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSInstanceRsp::IsInitialized() const {

  for (int i = 0; i < instances_size(); i++) {
    if (!this->instances(i).IsInitialized()) return false;
  }
  return true;
}

void CSInstanceRsp::Swap(CSInstanceRsp* other) {
  if (other != this) {
    instances_.Swap(&other->instances_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSInstanceRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSInstanceRsp_descriptor_;
  metadata.reflection = CSInstanceRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSReward_RewardInfo::kItemIdFieldNumber;
const int CSReward_RewardInfo::kItemLevelFieldNumber;
const int CSReward_RewardInfo::kItemNumFieldNumber;
#endif  // !_MSC_VER

CSReward_RewardInfo::CSReward_RewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSReward_RewardInfo::InitAsDefaultInstance() {
}

CSReward_RewardInfo::CSReward_RewardInfo(const CSReward_RewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSReward_RewardInfo::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  item_level_ = 0u;
  item_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSReward_RewardInfo::~CSReward_RewardInfo() {
  SharedDtor();
}

void CSReward_RewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSReward_RewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSReward_RewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSReward_RewardInfo_descriptor_;
}

const CSReward_RewardInfo& CSReward_RewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSReward_RewardInfo* CSReward_RewardInfo::default_instance_ = NULL;

CSReward_RewardInfo* CSReward_RewardInfo::New() const {
  return new CSReward_RewardInfo;
}

void CSReward_RewardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    item_level_ = 0u;
    item_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSReward_RewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_level;
        break;
      }

      // required uint32 item_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_level_)));
          set_has_item_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_num;
        break;
      }

      // required uint32 item_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSReward_RewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // required uint32 item_level = 2;
  if (has_item_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_level(), output);
  }

  // required uint32 item_num = 3;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSReward_RewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // required uint32 item_level = 2;
  if (has_item_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_level(), target);
  }

  // required uint32 item_num = 3;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSReward_RewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // required uint32 item_level = 2;
    if (has_item_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_level());
    }

    // required uint32 item_num = 3;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSReward_RewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSReward_RewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSReward_RewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSReward_RewardInfo::MergeFrom(const CSReward_RewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_level()) {
      set_item_level(from.item_level());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSReward_RewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSReward_RewardInfo::CopyFrom(const CSReward_RewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReward_RewardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSReward_RewardInfo::Swap(CSReward_RewardInfo* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_level_, other->item_level_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSReward_RewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSReward_RewardInfo_descriptor_;
  metadata.reflection = CSReward_RewardInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSReward::kRewardsFieldNumber;
const int CSReward::kAddCoinFieldNumber;
const int CSReward::kAddExpFieldNumber;
const int CSReward::kAddExploitFieldNumber;
#endif  // !_MSC_VER

CSReward::CSReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSReward::InitAsDefaultInstance() {
}

CSReward::CSReward(const CSReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSReward::SharedCtor() {
  _cached_size_ = 0;
  add_coin_ = 0u;
  add_exp_ = 0u;
  add_exploit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSReward::~CSReward() {
  SharedDtor();
}

void CSReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSReward_descriptor_;
}

const CSReward& CSReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSReward* CSReward::default_instance_ = NULL;

CSReward* CSReward::New() const {
  return new CSReward;
}

void CSReward::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    add_coin_ = 0u;
    add_exp_ = 0u;
    add_exploit_ = 0u;
  }
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSReward.RewardInfo rewards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rewards;
        if (input->ExpectTag(16)) goto parse_add_coin;
        break;
      }

      // optional uint32 add_coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_coin_)));
          set_has_add_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_add_exp;
        break;
      }

      // optional uint32 add_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_exp_)));
          set_has_add_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_add_exploit;
        break;
      }

      // optional uint32 add_exploit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_exploit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_exploit_)));
          set_has_add_exploit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSReward.RewardInfo rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(i), output);
  }

  // optional uint32 add_coin = 2;
  if (has_add_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->add_coin(), output);
  }

  // optional uint32 add_exp = 3;
  if (has_add_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->add_exp(), output);
  }

  // optional uint32 add_exploit = 4;
  if (has_add_exploit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->add_exploit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSReward.RewardInfo rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewards(i), target);
  }

  // optional uint32 add_coin = 2;
  if (has_add_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->add_coin(), target);
  }

  // optional uint32 add_exp = 3;
  if (has_add_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->add_exp(), target);
  }

  // optional uint32 add_exploit = 4;
  if (has_add_exploit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->add_exploit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 add_coin = 2;
    if (has_add_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_coin());
    }

    // optional uint32 add_exp = 3;
    if (has_add_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_exp());
    }

    // optional uint32 add_exploit = 4;
    if (has_add_exploit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_exploit());
    }

  }
  // repeated .CSReward.RewardInfo rewards = 1;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSReward::MergeFrom(const CSReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_add_coin()) {
      set_add_coin(from.add_coin());
    }
    if (from.has_add_exp()) {
      set_add_exp(from.add_exp());
    }
    if (from.has_add_exploit()) {
      set_add_exploit(from.add_exploit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSReward::CopyFrom(const CSReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReward::IsInitialized() const {

  for (int i = 0; i < rewards_size(); i++) {
    if (!this->rewards(i).IsInitialized()) return false;
  }
  return true;
}

void CSReward::Swap(CSReward* other) {
  if (other != this) {
    rewards_.Swap(&other->rewards_);
    std::swap(add_coin_, other->add_coin_);
    std::swap(add_exp_, other->add_exp_);
    std::swap(add_exploit_, other->add_exploit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSReward_descriptor_;
  metadata.reflection = CSReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSLevelUpRsp::kLevelFieldNumber;
#endif  // !_MSC_VER

CSLevelUpRsp::CSLevelUpRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSLevelUpRsp::InitAsDefaultInstance() {
}

CSLevelUpRsp::CSLevelUpRsp(const CSLevelUpRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSLevelUpRsp::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLevelUpRsp::~CSLevelUpRsp() {
  SharedDtor();
}

void CSLevelUpRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSLevelUpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLevelUpRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLevelUpRsp_descriptor_;
}

const CSLevelUpRsp& CSLevelUpRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSLevelUpRsp* CSLevelUpRsp::default_instance_ = NULL;

CSLevelUpRsp* CSLevelUpRsp::New() const {
  return new CSLevelUpRsp;
}

void CSLevelUpRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSLevelUpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSLevelUpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSLevelUpRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSLevelUpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLevelUpRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSLevelUpRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSLevelUpRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLevelUpRsp::MergeFrom(const CSLevelUpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSLevelUpRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLevelUpRsp::CopyFrom(const CSLevelUpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLevelUpRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSLevelUpRsp::Swap(CSLevelUpRsp* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSLevelUpRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLevelUpRsp_descriptor_;
  metadata.reflection = CSLevelUpRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBasicUserBattleInfoRsp::kBattleInfoFieldNumber;
#endif  // !_MSC_VER

CSBasicUserBattleInfoRsp::CSBasicUserBattleInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBasicUserBattleInfoRsp::InitAsDefaultInstance() {
  battle_info_ = const_cast< ::BasicUserBattleInfo*>(&::BasicUserBattleInfo::default_instance());
}

CSBasicUserBattleInfoRsp::CSBasicUserBattleInfoRsp(const CSBasicUserBattleInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBasicUserBattleInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  battle_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBasicUserBattleInfoRsp::~CSBasicUserBattleInfoRsp() {
  SharedDtor();
}

void CSBasicUserBattleInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battle_info_;
  }
}

void CSBasicUserBattleInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBasicUserBattleInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBasicUserBattleInfoRsp_descriptor_;
}

const CSBasicUserBattleInfoRsp& CSBasicUserBattleInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSBasicUserBattleInfoRsp* CSBasicUserBattleInfoRsp::default_instance_ = NULL;

CSBasicUserBattleInfoRsp* CSBasicUserBattleInfoRsp::New() const {
  return new CSBasicUserBattleInfoRsp;
}

void CSBasicUserBattleInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_battle_info()) {
      if (battle_info_ != NULL) battle_info_->::BasicUserBattleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBasicUserBattleInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .BasicUserBattleInfo battle_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBasicUserBattleInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .BasicUserBattleInfo battle_info = 1;
  if (has_battle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battle_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBasicUserBattleInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .BasicUserBattleInfo battle_info = 1;
  if (has_battle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battle_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBasicUserBattleInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .BasicUserBattleInfo battle_info = 1;
    if (has_battle_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBasicUserBattleInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBasicUserBattleInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBasicUserBattleInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBasicUserBattleInfoRsp::MergeFrom(const CSBasicUserBattleInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_info()) {
      mutable_battle_info()->::BasicUserBattleInfo::MergeFrom(from.battle_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBasicUserBattleInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBasicUserBattleInfoRsp::CopyFrom(const CSBasicUserBattleInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBasicUserBattleInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_battle_info()) {
    if (!this->battle_info().IsInitialized()) return false;
  }
  return true;
}

void CSBasicUserBattleInfoRsp::Swap(CSBasicUserBattleInfoRsp* other) {
  if (other != this) {
    std::swap(battle_info_, other->battle_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBasicUserBattleInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBasicUserBattleInfoRsp_descriptor_;
  metadata.reflection = CSBasicUserBattleInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSSearchSpiritStoneReq::CSSearchSpiritStoneReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSearchSpiritStoneReq::InitAsDefaultInstance() {
}

CSSearchSpiritStoneReq::CSSearchSpiritStoneReq(const CSSearchSpiritStoneReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSearchSpiritStoneReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSearchSpiritStoneReq::~CSSearchSpiritStoneReq() {
  SharedDtor();
}

void CSSearchSpiritStoneReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSSearchSpiritStoneReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSearchSpiritStoneReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSearchSpiritStoneReq_descriptor_;
}

const CSSearchSpiritStoneReq& CSSearchSpiritStoneReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSSearchSpiritStoneReq* CSSearchSpiritStoneReq::default_instance_ = NULL;

CSSearchSpiritStoneReq* CSSearchSpiritStoneReq::New() const {
  return new CSSearchSpiritStoneReq;
}

void CSSearchSpiritStoneReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSearchSpiritStoneReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSSearchSpiritStoneReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSearchSpiritStoneReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSearchSpiritStoneReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSearchSpiritStoneReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSearchSpiritStoneReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSearchSpiritStoneReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSearchSpiritStoneReq::MergeFrom(const CSSearchSpiritStoneReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSearchSpiritStoneReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSearchSpiritStoneReq::CopyFrom(const CSSearchSpiritStoneReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSearchSpiritStoneReq::IsInitialized() const {

  return true;
}

void CSSearchSpiritStoneReq::Swap(CSSearchSpiritStoneReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSearchSpiritStoneReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSearchSpiritStoneReq_descriptor_;
  metadata.reflection = CSSearchSpiritStoneReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSearchSpiritStoneRsp::kRetFieldNumber;
const int CSSearchSpiritStoneRsp::kCostCoinFieldNumber;
const int CSSearchSpiritStoneRsp::kMonIdFieldNumber;
const int CSSearchSpiritStoneRsp::kItemIdFieldNumber;
#endif  // !_MSC_VER

CSSearchSpiritStoneRsp::CSSearchSpiritStoneRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSearchSpiritStoneRsp::InitAsDefaultInstance() {
}

CSSearchSpiritStoneRsp::CSSearchSpiritStoneRsp(const CSSearchSpiritStoneRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSearchSpiritStoneRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  cost_coin_ = 0u;
  mon_id_ = 0u;
  item_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSearchSpiritStoneRsp::~CSSearchSpiritStoneRsp() {
  SharedDtor();
}

void CSSearchSpiritStoneRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSSearchSpiritStoneRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSearchSpiritStoneRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSearchSpiritStoneRsp_descriptor_;
}

const CSSearchSpiritStoneRsp& CSSearchSpiritStoneRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSSearchSpiritStoneRsp* CSSearchSpiritStoneRsp::default_instance_ = NULL;

CSSearchSpiritStoneRsp* CSSearchSpiritStoneRsp::New() const {
  return new CSSearchSpiritStoneRsp;
}

void CSSearchSpiritStoneRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    cost_coin_ = 0u;
    mon_id_ = 0u;
    item_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSearchSpiritStoneRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cost_coin;
        break;
      }

      // optional uint32 cost_coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_coin_)));
          set_has_cost_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mon_id;
        break;
      }

      // optional uint32 mon_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mon_id_)));
          set_has_mon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSearchSpiritStoneRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional uint32 cost_coin = 2;
  if (has_cost_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cost_coin(), output);
  }

  // optional uint32 mon_id = 3;
  if (has_mon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mon_id(), output);
  }

  // optional uint32 item_id = 4;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSearchSpiritStoneRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional uint32 cost_coin = 2;
  if (has_cost_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cost_coin(), target);
  }

  // optional uint32 mon_id = 3;
  if (has_mon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mon_id(), target);
  }

  // optional uint32 item_id = 4;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSearchSpiritStoneRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 cost_coin = 2;
    if (has_cost_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_coin());
    }

    // optional uint32 mon_id = 3;
    if (has_mon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mon_id());
    }

    // optional uint32 item_id = 4;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSearchSpiritStoneRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSearchSpiritStoneRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSearchSpiritStoneRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSearchSpiritStoneRsp::MergeFrom(const CSSearchSpiritStoneRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cost_coin()) {
      set_cost_coin(from.cost_coin());
    }
    if (from.has_mon_id()) {
      set_mon_id(from.mon_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSearchSpiritStoneRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSearchSpiritStoneRsp::CopyFrom(const CSSearchSpiritStoneRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSearchSpiritStoneRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSSearchSpiritStoneRsp::Swap(CSSearchSpiritStoneRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(cost_coin_, other->cost_coin_);
    std::swap(mon_id_, other->mon_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSearchSpiritStoneRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSearchSpiritStoneRsp_descriptor_;
  metadata.reflection = CSSearchSpiritStoneRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSpiritStoneMoveBagReq::kPosFieldNumber;
#endif  // !_MSC_VER

CSSpiritStoneMoveBagReq::CSSpiritStoneMoveBagReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSpiritStoneMoveBagReq::InitAsDefaultInstance() {
}

CSSpiritStoneMoveBagReq::CSSpiritStoneMoveBagReq(const CSSpiritStoneMoveBagReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSpiritStoneMoveBagReq::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSpiritStoneMoveBagReq::~CSSpiritStoneMoveBagReq() {
  SharedDtor();
}

void CSSpiritStoneMoveBagReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSSpiritStoneMoveBagReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSpiritStoneMoveBagReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSpiritStoneMoveBagReq_descriptor_;
}

const CSSpiritStoneMoveBagReq& CSSpiritStoneMoveBagReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSSpiritStoneMoveBagReq* CSSpiritStoneMoveBagReq::default_instance_ = NULL;

CSSpiritStoneMoveBagReq* CSSpiritStoneMoveBagReq::New() const {
  return new CSSpiritStoneMoveBagReq;
}

void CSSpiritStoneMoveBagReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSpiritStoneMoveBagReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSpiritStoneMoveBagReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSpiritStoneMoveBagReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSpiritStoneMoveBagReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSpiritStoneMoveBagReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSpiritStoneMoveBagReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSpiritStoneMoveBagReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSpiritStoneMoveBagReq::MergeFrom(const CSSpiritStoneMoveBagReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSpiritStoneMoveBagReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSpiritStoneMoveBagReq::CopyFrom(const CSSpiritStoneMoveBagReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSpiritStoneMoveBagReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSSpiritStoneMoveBagReq::Swap(CSSpiritStoneMoveBagReq* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSpiritStoneMoveBagReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSpiritStoneMoveBagReq_descriptor_;
  metadata.reflection = CSSpiritStoneMoveBagReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSpiritStoneMoveBagRsp::kRetFieldNumber;
#endif  // !_MSC_VER

CSSpiritStoneMoveBagRsp::CSSpiritStoneMoveBagRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSpiritStoneMoveBagRsp::InitAsDefaultInstance() {
}

CSSpiritStoneMoveBagRsp::CSSpiritStoneMoveBagRsp(const CSSpiritStoneMoveBagRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSpiritStoneMoveBagRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSpiritStoneMoveBagRsp::~CSSpiritStoneMoveBagRsp() {
  SharedDtor();
}

void CSSpiritStoneMoveBagRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSSpiritStoneMoveBagRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSpiritStoneMoveBagRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSpiritStoneMoveBagRsp_descriptor_;
}

const CSSpiritStoneMoveBagRsp& CSSpiritStoneMoveBagRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSSpiritStoneMoveBagRsp* CSSpiritStoneMoveBagRsp::default_instance_ = NULL;

CSSpiritStoneMoveBagRsp* CSSpiritStoneMoveBagRsp::New() const {
  return new CSSpiritStoneMoveBagRsp;
}

void CSSpiritStoneMoveBagRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSpiritStoneMoveBagRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSpiritStoneMoveBagRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSpiritStoneMoveBagRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSpiritStoneMoveBagRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSpiritStoneMoveBagRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSpiritStoneMoveBagRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSpiritStoneMoveBagRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSpiritStoneMoveBagRsp::MergeFrom(const CSSpiritStoneMoveBagRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSpiritStoneMoveBagRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSpiritStoneMoveBagRsp::CopyFrom(const CSSpiritStoneMoveBagRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSpiritStoneMoveBagRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSSpiritStoneMoveBagRsp::Swap(CSSpiritStoneMoveBagRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSpiritStoneMoveBagRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSpiritStoneMoveBagRsp_descriptor_;
  metadata.reflection = CSSpiritStoneMoveBagRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSpiritStoneLevelUpReq::kPosFieldNumber;
#endif  // !_MSC_VER

CSSpiritStoneLevelUpReq::CSSpiritStoneLevelUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSpiritStoneLevelUpReq::InitAsDefaultInstance() {
}

CSSpiritStoneLevelUpReq::CSSpiritStoneLevelUpReq(const CSSpiritStoneLevelUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSpiritStoneLevelUpReq::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSpiritStoneLevelUpReq::~CSSpiritStoneLevelUpReq() {
  SharedDtor();
}

void CSSpiritStoneLevelUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSSpiritStoneLevelUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSpiritStoneLevelUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSpiritStoneLevelUpReq_descriptor_;
}

const CSSpiritStoneLevelUpReq& CSSpiritStoneLevelUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSSpiritStoneLevelUpReq* CSSpiritStoneLevelUpReq::default_instance_ = NULL;

CSSpiritStoneLevelUpReq* CSSpiritStoneLevelUpReq::New() const {
  return new CSSpiritStoneLevelUpReq;
}

void CSSpiritStoneLevelUpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSpiritStoneLevelUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSpiritStoneLevelUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSpiritStoneLevelUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSpiritStoneLevelUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSpiritStoneLevelUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSpiritStoneLevelUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSpiritStoneLevelUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSpiritStoneLevelUpReq::MergeFrom(const CSSpiritStoneLevelUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSpiritStoneLevelUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSpiritStoneLevelUpReq::CopyFrom(const CSSpiritStoneLevelUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSpiritStoneLevelUpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSSpiritStoneLevelUpReq::Swap(CSSpiritStoneLevelUpReq* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSpiritStoneLevelUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSpiritStoneLevelUpReq_descriptor_;
  metadata.reflection = CSSpiritStoneLevelUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSpiritStoneLevelUpRsp::kRetFieldNumber;
const int CSSpiritStoneLevelUpRsp::kPosFieldNumber;
const int CSSpiritStoneLevelUpRsp::kCostSpFieldNumber;
#endif  // !_MSC_VER

CSSpiritStoneLevelUpRsp::CSSpiritStoneLevelUpRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSpiritStoneLevelUpRsp::InitAsDefaultInstance() {
}

CSSpiritStoneLevelUpRsp::CSSpiritStoneLevelUpRsp(const CSSpiritStoneLevelUpRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSpiritStoneLevelUpRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  pos_ = 0u;
  cost_sp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSpiritStoneLevelUpRsp::~CSSpiritStoneLevelUpRsp() {
  SharedDtor();
}

void CSSpiritStoneLevelUpRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSSpiritStoneLevelUpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSpiritStoneLevelUpRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSpiritStoneLevelUpRsp_descriptor_;
}

const CSSpiritStoneLevelUpRsp& CSSpiritStoneLevelUpRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSSpiritStoneLevelUpRsp* CSSpiritStoneLevelUpRsp::default_instance_ = NULL;

CSSpiritStoneLevelUpRsp* CSSpiritStoneLevelUpRsp::New() const {
  return new CSSpiritStoneLevelUpRsp;
}

void CSSpiritStoneLevelUpRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    pos_ = 0u;
    cost_sp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSpiritStoneLevelUpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // required uint32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cost_sp;
        break;
      }

      // required uint32 cost_sp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_sp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_sp_)));
          set_has_cost_sp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSpiritStoneLevelUpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // required uint32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // required uint32 cost_sp = 3;
  if (has_cost_sp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cost_sp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSpiritStoneLevelUpRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // required uint32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // required uint32 cost_sp = 3;
  if (has_cost_sp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cost_sp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSpiritStoneLevelUpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required uint32 cost_sp = 3;
    if (has_cost_sp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_sp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSpiritStoneLevelUpRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSpiritStoneLevelUpRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSpiritStoneLevelUpRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSpiritStoneLevelUpRsp::MergeFrom(const CSSpiritStoneLevelUpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_cost_sp()) {
      set_cost_sp(from.cost_sp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSpiritStoneLevelUpRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSpiritStoneLevelUpRsp::CopyFrom(const CSSpiritStoneLevelUpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSpiritStoneLevelUpRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSSpiritStoneLevelUpRsp::Swap(CSSpiritStoneLevelUpRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(pos_, other->pos_);
    std::swap(cost_sp_, other->cost_sp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSpiritStoneLevelUpRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSpiritStoneLevelUpRsp_descriptor_;
  metadata.reflection = CSSpiritStoneLevelUpRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSpiritStoneToSPReq::kPosFieldNumber;
#endif  // !_MSC_VER

CSSpiritStoneToSPReq::CSSpiritStoneToSPReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSpiritStoneToSPReq::InitAsDefaultInstance() {
}

CSSpiritStoneToSPReq::CSSpiritStoneToSPReq(const CSSpiritStoneToSPReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSpiritStoneToSPReq::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSpiritStoneToSPReq::~CSSpiritStoneToSPReq() {
  SharedDtor();
}

void CSSpiritStoneToSPReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSSpiritStoneToSPReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSpiritStoneToSPReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSpiritStoneToSPReq_descriptor_;
}

const CSSpiritStoneToSPReq& CSSpiritStoneToSPReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSSpiritStoneToSPReq* CSSpiritStoneToSPReq::default_instance_ = NULL;

CSSpiritStoneToSPReq* CSSpiritStoneToSPReq::New() const {
  return new CSSpiritStoneToSPReq;
}

void CSSpiritStoneToSPReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSpiritStoneToSPReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSpiritStoneToSPReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSpiritStoneToSPReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSpiritStoneToSPReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSpiritStoneToSPReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSpiritStoneToSPReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSpiritStoneToSPReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSpiritStoneToSPReq::MergeFrom(const CSSpiritStoneToSPReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSpiritStoneToSPReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSpiritStoneToSPReq::CopyFrom(const CSSpiritStoneToSPReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSpiritStoneToSPReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSSpiritStoneToSPReq::Swap(CSSpiritStoneToSPReq* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSpiritStoneToSPReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSpiritStoneToSPReq_descriptor_;
  metadata.reflection = CSSpiritStoneToSPReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSpiritStoneToSPRsp::kRetFieldNumber;
const int CSSpiritStoneToSPRsp::kSpKeyFieldNumber;
const int CSSpiritStoneToSPRsp::kSpValueFieldNumber;
#endif  // !_MSC_VER

CSSpiritStoneToSPRsp::CSSpiritStoneToSPRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSpiritStoneToSPRsp::InitAsDefaultInstance() {
}

CSSpiritStoneToSPRsp::CSSpiritStoneToSPRsp(const CSSpiritStoneToSPRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSpiritStoneToSPRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  sp_key_ = 0u;
  sp_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSpiritStoneToSPRsp::~CSSpiritStoneToSPRsp() {
  SharedDtor();
}

void CSSpiritStoneToSPRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSSpiritStoneToSPRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSpiritStoneToSPRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSpiritStoneToSPRsp_descriptor_;
}

const CSSpiritStoneToSPRsp& CSSpiritStoneToSPRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSSpiritStoneToSPRsp* CSSpiritStoneToSPRsp::default_instance_ = NULL;

CSSpiritStoneToSPRsp* CSSpiritStoneToSPRsp::New() const {
  return new CSSpiritStoneToSPRsp;
}

void CSSpiritStoneToSPRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    sp_key_ = 0u;
    sp_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSpiritStoneToSPRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sp_key;
        break;
      }

      // optional uint32 sp_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sp_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sp_key_)));
          set_has_sp_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sp_value;
        break;
      }

      // optional uint32 sp_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sp_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sp_value_)));
          set_has_sp_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSpiritStoneToSPRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional uint32 sp_key = 2;
  if (has_sp_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sp_key(), output);
  }

  // optional uint32 sp_value = 3;
  if (has_sp_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sp_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSpiritStoneToSPRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional uint32 sp_key = 2;
  if (has_sp_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sp_key(), target);
  }

  // optional uint32 sp_value = 3;
  if (has_sp_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sp_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSpiritStoneToSPRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 sp_key = 2;
    if (has_sp_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sp_key());
    }

    // optional uint32 sp_value = 3;
    if (has_sp_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sp_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSpiritStoneToSPRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSpiritStoneToSPRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSpiritStoneToSPRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSpiritStoneToSPRsp::MergeFrom(const CSSpiritStoneToSPRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_sp_key()) {
      set_sp_key(from.sp_key());
    }
    if (from.has_sp_value()) {
      set_sp_value(from.sp_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSpiritStoneToSPRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSpiritStoneToSPRsp::CopyFrom(const CSSpiritStoneToSPRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSpiritStoneToSPRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSSpiritStoneToSPRsp::Swap(CSSpiritStoneToSPRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(sp_key_, other->sp_key_);
    std::swap(sp_value_, other->sp_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSpiritStoneToSPRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSpiritStoneToSPRsp_descriptor_;
  metadata.reflection = CSSpiritStoneToSPRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSGetExchangeSSInfoReq::CSGetExchangeSSInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetExchangeSSInfoReq::InitAsDefaultInstance() {
}

CSGetExchangeSSInfoReq::CSGetExchangeSSInfoReq(const CSGetExchangeSSInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetExchangeSSInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetExchangeSSInfoReq::~CSGetExchangeSSInfoReq() {
  SharedDtor();
}

void CSGetExchangeSSInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetExchangeSSInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetExchangeSSInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetExchangeSSInfoReq_descriptor_;
}

const CSGetExchangeSSInfoReq& CSGetExchangeSSInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSGetExchangeSSInfoReq* CSGetExchangeSSInfoReq::default_instance_ = NULL;

CSGetExchangeSSInfoReq* CSGetExchangeSSInfoReq::New() const {
  return new CSGetExchangeSSInfoReq;
}

void CSGetExchangeSSInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetExchangeSSInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSGetExchangeSSInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetExchangeSSInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetExchangeSSInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetExchangeSSInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetExchangeSSInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetExchangeSSInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetExchangeSSInfoReq::MergeFrom(const CSGetExchangeSSInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetExchangeSSInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetExchangeSSInfoReq::CopyFrom(const CSGetExchangeSSInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetExchangeSSInfoReq::IsInitialized() const {

  return true;
}

void CSGetExchangeSSInfoReq::Swap(CSGetExchangeSSInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetExchangeSSInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetExchangeSSInfoReq_descriptor_;
  metadata.reflection = CSGetExchangeSSInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeSSInfo::kSsIdFieldNumber;
const int ExchangeSSInfo::kConsumeFieldNumber;
const int ExchangeSSInfo::kConvertFieldNumber;
const int ExchangeSSInfo::kNeedChipFieldNumber;
const int ExchangeSSInfo::kKeyFieldNumber;
const int ExchangeSSInfo::kValueFieldNumber;
#endif  // !_MSC_VER

ExchangeSSInfo::ExchangeSSInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExchangeSSInfo::InitAsDefaultInstance() {
}

ExchangeSSInfo::ExchangeSSInfo(const ExchangeSSInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExchangeSSInfo::SharedCtor() {
  _cached_size_ = 0;
  ss_id_ = 0u;
  consume_ = 0u;
  convert_ = 0u;
  need_chip_ = 0u;
  key_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeSSInfo::~ExchangeSSInfo() {
  SharedDtor();
}

void ExchangeSSInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExchangeSSInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeSSInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeSSInfo_descriptor_;
}

const ExchangeSSInfo& ExchangeSSInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

ExchangeSSInfo* ExchangeSSInfo::default_instance_ = NULL;

ExchangeSSInfo* ExchangeSSInfo::New() const {
  return new ExchangeSSInfo;
}

void ExchangeSSInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ss_id_ = 0u;
    consume_ = 0u;
    convert_ = 0u;
    need_chip_ = 0u;
    key_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeSSInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ss_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ss_id_)));
          set_has_ss_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_consume;
        break;
      }

      // required uint32 consume = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_convert;
        break;
      }

      // required uint32 convert = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_convert:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &convert_)));
          set_has_convert();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_need_chip;
        break;
      }

      // required uint32 need_chip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_chip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_chip_)));
          set_has_need_chip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_key;
        break;
      }

      // required uint32 key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_value;
        break;
      }

      // required uint32 value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExchangeSSInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ss_id = 1;
  if (has_ss_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ss_id(), output);
  }

  // required uint32 consume = 2;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->consume(), output);
  }

  // required uint32 convert = 3;
  if (has_convert()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->convert(), output);
  }

  // required uint32 need_chip = 4;
  if (has_need_chip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->need_chip(), output);
  }

  // required uint32 key = 5;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->key(), output);
  }

  // required uint32 value = 6;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExchangeSSInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ss_id = 1;
  if (has_ss_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ss_id(), target);
  }

  // required uint32 consume = 2;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->consume(), target);
  }

  // required uint32 convert = 3;
  if (has_convert()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->convert(), target);
  }

  // required uint32 need_chip = 4;
  if (has_need_chip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->need_chip(), target);
  }

  // required uint32 key = 5;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->key(), target);
  }

  // required uint32 value = 6;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExchangeSSInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ss_id = 1;
    if (has_ss_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ss_id());
    }

    // required uint32 consume = 2;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // required uint32 convert = 3;
    if (has_convert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->convert());
    }

    // required uint32 need_chip = 4;
    if (has_need_chip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need_chip());
    }

    // required uint32 key = 5;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // required uint32 value = 6;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeSSInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeSSInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeSSInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeSSInfo::MergeFrom(const ExchangeSSInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ss_id()) {
      set_ss_id(from.ss_id());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_convert()) {
      set_convert(from.convert());
    }
    if (from.has_need_chip()) {
      set_need_chip(from.need_chip());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeSSInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeSSInfo::CopyFrom(const ExchangeSSInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeSSInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ExchangeSSInfo::Swap(ExchangeSSInfo* other) {
  if (other != this) {
    std::swap(ss_id_, other->ss_id_);
    std::swap(consume_, other->consume_);
    std::swap(convert_, other->convert_);
    std::swap(need_chip_, other->need_chip_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeSSInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeSSInfo_descriptor_;
  metadata.reflection = ExchangeSSInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetExchangeSSInfoRsp::kSsListFieldNumber;
#endif  // !_MSC_VER

CSGetExchangeSSInfoRsp::CSGetExchangeSSInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetExchangeSSInfoRsp::InitAsDefaultInstance() {
}

CSGetExchangeSSInfoRsp::CSGetExchangeSSInfoRsp(const CSGetExchangeSSInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetExchangeSSInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetExchangeSSInfoRsp::~CSGetExchangeSSInfoRsp() {
  SharedDtor();
}

void CSGetExchangeSSInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetExchangeSSInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetExchangeSSInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetExchangeSSInfoRsp_descriptor_;
}

const CSGetExchangeSSInfoRsp& CSGetExchangeSSInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSGetExchangeSSInfoRsp* CSGetExchangeSSInfoRsp::default_instance_ = NULL;

CSGetExchangeSSInfoRsp* CSGetExchangeSSInfoRsp::New() const {
  return new CSGetExchangeSSInfoRsp;
}

void CSGetExchangeSSInfoRsp::Clear() {
  ss_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetExchangeSSInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ExchangeSSInfo ss_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ss_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ss_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ss_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetExchangeSSInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ExchangeSSInfo ss_list = 1;
  for (int i = 0; i < this->ss_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ss_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetExchangeSSInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ExchangeSSInfo ss_list = 1;
  for (int i = 0; i < this->ss_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ss_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetExchangeSSInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .ExchangeSSInfo ss_list = 1;
  total_size += 1 * this->ss_list_size();
  for (int i = 0; i < this->ss_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ss_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetExchangeSSInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetExchangeSSInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetExchangeSSInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetExchangeSSInfoRsp::MergeFrom(const CSGetExchangeSSInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ss_list_.MergeFrom(from.ss_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetExchangeSSInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetExchangeSSInfoRsp::CopyFrom(const CSGetExchangeSSInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetExchangeSSInfoRsp::IsInitialized() const {

  for (int i = 0; i < ss_list_size(); i++) {
    if (!this->ss_list(i).IsInitialized()) return false;
  }
  return true;
}

void CSGetExchangeSSInfoRsp::Swap(CSGetExchangeSSInfoRsp* other) {
  if (other != this) {
    ss_list_.Swap(&other->ss_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetExchangeSSInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetExchangeSSInfoRsp_descriptor_;
  metadata.reflection = CSGetExchangeSSInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSAddManorReq::kManorIdFieldNumber;
#endif  // !_MSC_VER

CSAddManorReq::CSAddManorReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSAddManorReq::InitAsDefaultInstance() {
}

CSAddManorReq::CSAddManorReq(const CSAddManorReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSAddManorReq::SharedCtor() {
  _cached_size_ = 0;
  manor_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAddManorReq::~CSAddManorReq() {
  SharedDtor();
}

void CSAddManorReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSAddManorReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSAddManorReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSAddManorReq_descriptor_;
}

const CSAddManorReq& CSAddManorReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSAddManorReq* CSAddManorReq::default_instance_ = NULL;

CSAddManorReq* CSAddManorReq::New() const {
  return new CSAddManorReq;
}

void CSAddManorReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manor_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSAddManorReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 manor_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manor_id_)));
          set_has_manor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAddManorReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 manor_id = 1;
  if (has_manor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manor_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSAddManorReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 manor_id = 1;
  if (has_manor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manor_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSAddManorReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 manor_id = 1;
    if (has_manor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manor_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAddManorReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSAddManorReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSAddManorReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSAddManorReq::MergeFrom(const CSAddManorReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manor_id()) {
      set_manor_id(from.manor_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSAddManorReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAddManorReq::CopyFrom(const CSAddManorReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAddManorReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSAddManorReq::Swap(CSAddManorReq* other) {
  if (other != this) {
    std::swap(manor_id_, other->manor_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSAddManorReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSAddManorReq_descriptor_;
  metadata.reflection = CSAddManorReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSAddManorRsp::kPosFieldNumber;
#endif  // !_MSC_VER

CSAddManorRsp::CSAddManorRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSAddManorRsp::InitAsDefaultInstance() {
}

CSAddManorRsp::CSAddManorRsp(const CSAddManorRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSAddManorRsp::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAddManorRsp::~CSAddManorRsp() {
  SharedDtor();
}

void CSAddManorRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSAddManorRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSAddManorRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSAddManorRsp_descriptor_;
}

const CSAddManorRsp& CSAddManorRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSAddManorRsp* CSAddManorRsp::default_instance_ = NULL;

CSAddManorRsp* CSAddManorRsp::New() const {
  return new CSAddManorRsp;
}

void CSAddManorRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSAddManorRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAddManorRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSAddManorRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSAddManorRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAddManorRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSAddManorRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSAddManorRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSAddManorRsp::MergeFrom(const CSAddManorRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSAddManorRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAddManorRsp::CopyFrom(const CSAddManorRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAddManorRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSAddManorRsp::Swap(CSAddManorRsp* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSAddManorRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSAddManorRsp_descriptor_;
  metadata.reflection = CSAddManorRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSWarmSportLvUpReq::kPosFieldNumber;
const int CSWarmSportLvUpReq::kToMaxLvFieldNumber;
#endif  // !_MSC_VER

CSWarmSportLvUpReq::CSWarmSportLvUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSWarmSportLvUpReq::InitAsDefaultInstance() {
}

CSWarmSportLvUpReq::CSWarmSportLvUpReq(const CSWarmSportLvUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSWarmSportLvUpReq::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  to_max_lv_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWarmSportLvUpReq::~CSWarmSportLvUpReq() {
  SharedDtor();
}

void CSWarmSportLvUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSWarmSportLvUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSWarmSportLvUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSWarmSportLvUpReq_descriptor_;
}

const CSWarmSportLvUpReq& CSWarmSportLvUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSWarmSportLvUpReq* CSWarmSportLvUpReq::default_instance_ = NULL;

CSWarmSportLvUpReq* CSWarmSportLvUpReq::New() const {
  return new CSWarmSportLvUpReq;
}

void CSWarmSportLvUpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    to_max_lv_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSWarmSportLvUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to_max_lv;
        break;
      }

      // optional bool to_max_lv = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_max_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_max_lv_)));
          set_has_to_max_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWarmSportLvUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // optional bool to_max_lv = 2 [default = false];
  if (has_to_max_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->to_max_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSWarmSportLvUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // optional bool to_max_lv = 2 [default = false];
  if (has_to_max_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->to_max_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSWarmSportLvUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional bool to_max_lv = 2 [default = false];
    if (has_to_max_lv()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWarmSportLvUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSWarmSportLvUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSWarmSportLvUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSWarmSportLvUpReq::MergeFrom(const CSWarmSportLvUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_to_max_lv()) {
      set_to_max_lv(from.to_max_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSWarmSportLvUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSWarmSportLvUpReq::CopyFrom(const CSWarmSportLvUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWarmSportLvUpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSWarmSportLvUpReq::Swap(CSWarmSportLvUpReq* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(to_max_lv_, other->to_max_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSWarmSportLvUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSWarmSportLvUpReq_descriptor_;
  metadata.reflection = CSWarmSportLvUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSWarmSportLvUpRsp::kPosFieldNumber;
#endif  // !_MSC_VER

CSWarmSportLvUpRsp::CSWarmSportLvUpRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSWarmSportLvUpRsp::InitAsDefaultInstance() {
}

CSWarmSportLvUpRsp::CSWarmSportLvUpRsp(const CSWarmSportLvUpRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSWarmSportLvUpRsp::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWarmSportLvUpRsp::~CSWarmSportLvUpRsp() {
  SharedDtor();
}

void CSWarmSportLvUpRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSWarmSportLvUpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSWarmSportLvUpRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSWarmSportLvUpRsp_descriptor_;
}

const CSWarmSportLvUpRsp& CSWarmSportLvUpRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSWarmSportLvUpRsp* CSWarmSportLvUpRsp::default_instance_ = NULL;

CSWarmSportLvUpRsp* CSWarmSportLvUpRsp::New() const {
  return new CSWarmSportLvUpRsp;
}

void CSWarmSportLvUpRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSWarmSportLvUpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWarmSportLvUpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSWarmSportLvUpRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSWarmSportLvUpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWarmSportLvUpRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSWarmSportLvUpRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSWarmSportLvUpRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSWarmSportLvUpRsp::MergeFrom(const CSWarmSportLvUpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSWarmSportLvUpRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSWarmSportLvUpRsp::CopyFrom(const CSWarmSportLvUpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWarmSportLvUpRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSWarmSportLvUpRsp::Swap(CSWarmSportLvUpRsp* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSWarmSportLvUpRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSWarmSportLvUpRsp_descriptor_;
  metadata.reflection = CSWarmSportLvUpRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSManorOptReq::kPosFieldNumber;
const int CSManorOptReq::kOptFieldNumber;
#endif  // !_MSC_VER

CSManorOptReq::CSManorOptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSManorOptReq::InitAsDefaultInstance() {
}

CSManorOptReq::CSManorOptReq(const CSManorOptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSManorOptReq::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  opt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSManorOptReq::~CSManorOptReq() {
  SharedDtor();
}

void CSManorOptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSManorOptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSManorOptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSManorOptReq_descriptor_;
}

const CSManorOptReq& CSManorOptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSManorOptReq* CSManorOptReq::default_instance_ = NULL;

CSManorOptReq* CSManorOptReq::New() const {
  return new CSManorOptReq;
}

void CSManorOptReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    opt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSManorOptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opt;
        break;
      }

      // required uint32 opt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSManorOptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // required uint32 opt = 2;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSManorOptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // required uint32 opt = 2;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSManorOptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required uint32 opt = 2;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSManorOptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSManorOptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSManorOptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSManorOptReq::MergeFrom(const CSManorOptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSManorOptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSManorOptReq::CopyFrom(const CSManorOptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSManorOptReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSManorOptReq::Swap(CSManorOptReq* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSManorOptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSManorOptReq_descriptor_;
  metadata.reflection = CSManorOptReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSManorOptRsp::kPosFieldNumber;
const int CSManorOptRsp::kOptFieldNumber;
#endif  // !_MSC_VER

CSManorOptRsp::CSManorOptRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSManorOptRsp::InitAsDefaultInstance() {
}

CSManorOptRsp::CSManorOptRsp(const CSManorOptRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSManorOptRsp::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  opt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSManorOptRsp::~CSManorOptRsp() {
  SharedDtor();
}

void CSManorOptRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSManorOptRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSManorOptRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSManorOptRsp_descriptor_;
}

const CSManorOptRsp& CSManorOptRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSManorOptRsp* CSManorOptRsp::default_instance_ = NULL;

CSManorOptRsp* CSManorOptRsp::New() const {
  return new CSManorOptRsp;
}

void CSManorOptRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    opt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSManorOptRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opt;
        break;
      }

      // required uint32 opt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSManorOptRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // required uint32 opt = 2;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSManorOptRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // required uint32 opt = 2;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSManorOptRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required uint32 opt = 2;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSManorOptRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSManorOptRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSManorOptRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSManorOptRsp::MergeFrom(const CSManorOptRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSManorOptRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSManorOptRsp::CopyFrom(const CSManorOptRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSManorOptRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSManorOptRsp::Swap(CSManorOptRsp* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSManorOptRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSManorOptRsp_descriptor_;
  metadata.reflection = CSManorOptRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonListReq::kUidFieldNumber;
const int CSMonListReq::kNameFieldNumber;
#endif  // !_MSC_VER

CSMonListReq::CSMonListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonListReq::InitAsDefaultInstance() {
}

CSMonListReq::CSMonListReq(const CSMonListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonListReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonListReq::~CSMonListReq() {
  SharedDtor();
}

void CSMonListReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSMonListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonListReq_descriptor_;
}

const CSMonListReq& CSMonListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSMonListReq* CSMonListReq::default_instance_ = NULL;

CSMonListReq* CSMonListReq::New() const {
  return new CSMonListReq;
}

void CSMonListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonListReq::MergeFrom(const CSMonListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonListReq::CopyFrom(const CSMonListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSMonListReq::Swap(CSMonListReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonListReq_descriptor_;
  metadata.reflection = CSMonListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonInfo::kMonIdFieldNumber;
const int MonInfo::kMonStatusFieldNumber;
#endif  // !_MSC_VER

MonInfo::MonInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonInfo::InitAsDefaultInstance() {
}

MonInfo::MonInfo(const MonInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonInfo::SharedCtor() {
  _cached_size_ = 0;
  mon_id_ = 0u;
  mon_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonInfo::~MonInfo() {
  SharedDtor();
}

void MonInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonInfo_descriptor_;
}

const MonInfo& MonInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

MonInfo* MonInfo::default_instance_ = NULL;

MonInfo* MonInfo::New() const {
  return new MonInfo;
}

void MonInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mon_id_ = 0u;
    mon_status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mon_id_)));
          set_has_mon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mon_status;
        break;
      }

      // required uint32 mon_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mon_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mon_status_)));
          set_has_mon_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mon_id = 1;
  if (has_mon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mon_id(), output);
  }

  // required uint32 mon_status = 2;
  if (has_mon_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mon_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mon_id = 1;
  if (has_mon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mon_id(), target);
  }

  // required uint32 mon_status = 2;
  if (has_mon_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mon_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mon_id = 1;
    if (has_mon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mon_id());
    }

    // required uint32 mon_status = 2;
    if (has_mon_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mon_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonInfo::MergeFrom(const MonInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mon_id()) {
      set_mon_id(from.mon_id());
    }
    if (from.has_mon_status()) {
      set_mon_status(from.mon_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonInfo::CopyFrom(const MonInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MonInfo::Swap(MonInfo* other) {
  if (other != this) {
    std::swap(mon_id_, other->mon_id_);
    std::swap(mon_status_, other->mon_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonInfo_descriptor_;
  metadata.reflection = MonInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonListRsp::kUidFieldNumber;
const int CSMonListRsp::kNameFieldNumber;
const int CSMonListRsp::kMonInfoFieldNumber;
#endif  // !_MSC_VER

CSMonListRsp::CSMonListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonListRsp::InitAsDefaultInstance() {
}

CSMonListRsp::CSMonListRsp(const CSMonListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonListRsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonListRsp::~CSMonListRsp() {
  SharedDtor();
}

void CSMonListRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSMonListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonListRsp_descriptor_;
}

const CSMonListRsp& CSMonListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSMonListRsp* CSMonListRsp::default_instance_ = NULL;

CSMonListRsp* CSMonListRsp::New() const {
  return new CSMonListRsp;
}

void CSMonListRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  mon_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mon_info;
        break;
      }

      // repeated .MonInfo mon_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mon_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mon_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mon_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // repeated .MonInfo mon_info = 3;
  for (int i = 0; i < this->mon_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mon_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .MonInfo mon_info = 3;
  for (int i = 0; i < this->mon_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mon_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .MonInfo mon_info = 3;
  total_size += 1 * this->mon_info_size();
  for (int i = 0; i < this->mon_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mon_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonListRsp::MergeFrom(const CSMonListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mon_info_.MergeFrom(from.mon_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonListRsp::CopyFrom(const CSMonListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < mon_info_size(); i++) {
    if (!this->mon_info(i).IsInitialized()) return false;
  }
  return true;
}

void CSMonListRsp::Swap(CSMonListRsp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    mon_info_.Swap(&other->mon_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonListRsp_descriptor_;
  metadata.reflection = CSMonListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSetMonStatusReq::kMonIdFieldNumber;
const int CSSetMonStatusReq::kMonStatusFieldNumber;
#endif  // !_MSC_VER

CSSetMonStatusReq::CSSetMonStatusReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSetMonStatusReq::InitAsDefaultInstance() {
}

CSSetMonStatusReq::CSSetMonStatusReq(const CSSetMonStatusReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSetMonStatusReq::SharedCtor() {
  _cached_size_ = 0;
  mon_id_ = 0u;
  mon_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSetMonStatusReq::~CSSetMonStatusReq() {
  SharedDtor();
}

void CSSetMonStatusReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSSetMonStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSetMonStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSetMonStatusReq_descriptor_;
}

const CSSetMonStatusReq& CSSetMonStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSSetMonStatusReq* CSSetMonStatusReq::default_instance_ = NULL;

CSSetMonStatusReq* CSSetMonStatusReq::New() const {
  return new CSSetMonStatusReq;
}

void CSSetMonStatusReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mon_id_ = 0u;
    mon_status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSetMonStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mon_id_)));
          set_has_mon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mon_status;
        break;
      }

      // required uint32 mon_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mon_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mon_status_)));
          set_has_mon_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSetMonStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mon_id = 1;
  if (has_mon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mon_id(), output);
  }

  // required uint32 mon_status = 2;
  if (has_mon_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mon_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSetMonStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mon_id = 1;
  if (has_mon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mon_id(), target);
  }

  // required uint32 mon_status = 2;
  if (has_mon_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mon_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSetMonStatusReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mon_id = 1;
    if (has_mon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mon_id());
    }

    // required uint32 mon_status = 2;
    if (has_mon_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mon_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSetMonStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSetMonStatusReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSetMonStatusReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSetMonStatusReq::MergeFrom(const CSSetMonStatusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mon_id()) {
      set_mon_id(from.mon_id());
    }
    if (from.has_mon_status()) {
      set_mon_status(from.mon_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSetMonStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSetMonStatusReq::CopyFrom(const CSSetMonStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSetMonStatusReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSSetMonStatusReq::Swap(CSSetMonStatusReq* other) {
  if (other != this) {
    std::swap(mon_id_, other->mon_id_);
    std::swap(mon_status_, other->mon_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSetMonStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSetMonStatusReq_descriptor_;
  metadata.reflection = CSSetMonStatusReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSetMonStatusRsp::kRetFieldNumber;
const int CSSetMonStatusRsp::kMonIdFieldNumber;
const int CSSetMonStatusRsp::kMonStatusFieldNumber;
#endif  // !_MSC_VER

CSSetMonStatusRsp::CSSetMonStatusRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSetMonStatusRsp::InitAsDefaultInstance() {
}

CSSetMonStatusRsp::CSSetMonStatusRsp(const CSSetMonStatusRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSetMonStatusRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  mon_id_ = 0u;
  mon_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSetMonStatusRsp::~CSSetMonStatusRsp() {
  SharedDtor();
}

void CSSetMonStatusRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSSetMonStatusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSetMonStatusRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSetMonStatusRsp_descriptor_;
}

const CSSetMonStatusRsp& CSSetMonStatusRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSSetMonStatusRsp* CSSetMonStatusRsp::default_instance_ = NULL;

CSSetMonStatusRsp* CSSetMonStatusRsp::New() const {
  return new CSSetMonStatusRsp;
}

void CSSetMonStatusRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    mon_id_ = 0u;
    mon_status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSetMonStatusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mon_id;
        break;
      }

      // optional uint32 mon_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mon_id_)));
          set_has_mon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mon_status;
        break;
      }

      // optional uint32 mon_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mon_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mon_status_)));
          set_has_mon_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSetMonStatusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional uint32 mon_id = 2;
  if (has_mon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mon_id(), output);
  }

  // optional uint32 mon_status = 3;
  if (has_mon_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mon_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSetMonStatusRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional uint32 mon_id = 2;
  if (has_mon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mon_id(), target);
  }

  // optional uint32 mon_status = 3;
  if (has_mon_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mon_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSetMonStatusRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 mon_id = 2;
    if (has_mon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mon_id());
    }

    // optional uint32 mon_status = 3;
    if (has_mon_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mon_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSetMonStatusRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSetMonStatusRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSetMonStatusRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSetMonStatusRsp::MergeFrom(const CSSetMonStatusRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_mon_id()) {
      set_mon_id(from.mon_id());
    }
    if (from.has_mon_status()) {
      set_mon_status(from.mon_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSetMonStatusRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSetMonStatusRsp::CopyFrom(const CSSetMonStatusRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSetMonStatusRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSSetMonStatusRsp::Swap(CSSetMonStatusRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(mon_id_, other->mon_id_);
    std::swap(mon_status_, other->mon_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSetMonStatusRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSetMonStatusRsp_descriptor_;
  metadata.reflection = CSSetMonStatusRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSPVPQueryRoomReq::CSPVPQueryRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVPQueryRoomReq::InitAsDefaultInstance() {
}

CSPVPQueryRoomReq::CSPVPQueryRoomReq(const CSPVPQueryRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVPQueryRoomReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVPQueryRoomReq::~CSPVPQueryRoomReq() {
  SharedDtor();
}

void CSPVPQueryRoomReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVPQueryRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVPQueryRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVPQueryRoomReq_descriptor_;
}

const CSPVPQueryRoomReq& CSPVPQueryRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVPQueryRoomReq* CSPVPQueryRoomReq::default_instance_ = NULL;

CSPVPQueryRoomReq* CSPVPQueryRoomReq::New() const {
  return new CSPVPQueryRoomReq;
}

void CSPVPQueryRoomReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVPQueryRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSPVPQueryRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVPQueryRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVPQueryRoomReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVPQueryRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVPQueryRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVPQueryRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVPQueryRoomReq::MergeFrom(const CSPVPQueryRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVPQueryRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVPQueryRoomReq::CopyFrom(const CSPVPQueryRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVPQueryRoomReq::IsInitialized() const {

  return true;
}

void CSPVPQueryRoomReq::Swap(CSPVPQueryRoomReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVPQueryRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVPQueryRoomReq_descriptor_;
  metadata.reflection = CSPVPQueryRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVPRoomBase::kRoomIdFieldNumber;
const int PVPRoomBase::kTopLevelFieldNumber;
const int PVPRoomBase::kCurrentOnlineFieldNumber;
const int PVPRoomBase::kMaxOnlineFieldNumber;
#endif  // !_MSC_VER

PVPRoomBase::PVPRoomBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVPRoomBase::InitAsDefaultInstance() {
}

PVPRoomBase::PVPRoomBase(const PVPRoomBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVPRoomBase::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0u;
  top_level_ = 0u;
  current_online_ = 0u;
  max_online_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVPRoomBase::~PVPRoomBase() {
  SharedDtor();
}

void PVPRoomBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVPRoomBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVPRoomBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVPRoomBase_descriptor_;
}

const PVPRoomBase& PVPRoomBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

PVPRoomBase* PVPRoomBase::default_instance_ = NULL;

PVPRoomBase* PVPRoomBase::New() const {
  return new PVPRoomBase;
}

void PVPRoomBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0u;
    top_level_ = 0u;
    current_online_ = 0u;
    max_online_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVPRoomBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_top_level;
        break;
      }

      // required uint32 top_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_level_)));
          set_has_top_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_current_online;
        break;
      }

      // required uint32 current_online = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_online_)));
          set_has_current_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_online;
        break;
      }

      // required uint32 max_online = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_online_)));
          set_has_max_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVPRoomBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_id(), output);
  }

  // required uint32 top_level = 2;
  if (has_top_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->top_level(), output);
  }

  // required uint32 current_online = 3;
  if (has_current_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->current_online(), output);
  }

  // required uint32 max_online = 4;
  if (has_max_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVPRoomBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->room_id(), target);
  }

  // required uint32 top_level = 2;
  if (has_top_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->top_level(), target);
  }

  // required uint32 current_online = 3;
  if (has_current_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->current_online(), target);
  }

  // required uint32 max_online = 4;
  if (has_max_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVPRoomBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // required uint32 top_level = 2;
    if (has_top_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_level());
    }

    // required uint32 current_online = 3;
    if (has_current_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_online());
    }

    // required uint32 max_online = 4;
    if (has_max_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_online());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVPRoomBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVPRoomBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVPRoomBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVPRoomBase::MergeFrom(const PVPRoomBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_top_level()) {
      set_top_level(from.top_level());
    }
    if (from.has_current_online()) {
      set_current_online(from.current_online());
    }
    if (from.has_max_online()) {
      set_max_online(from.max_online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVPRoomBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPRoomBase::CopyFrom(const PVPRoomBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPRoomBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PVPRoomBase::Swap(PVPRoomBase* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(top_level_, other->top_level_);
    std::swap(current_online_, other->current_online_);
    std::swap(max_online_, other->max_online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVPRoomBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVPRoomBase_descriptor_;
  metadata.reflection = PVPRoomBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPVPQueryRoomRsp::kRoomsFieldNumber;
#endif  // !_MSC_VER

CSPVPQueryRoomRsp::CSPVPQueryRoomRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVPQueryRoomRsp::InitAsDefaultInstance() {
}

CSPVPQueryRoomRsp::CSPVPQueryRoomRsp(const CSPVPQueryRoomRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVPQueryRoomRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVPQueryRoomRsp::~CSPVPQueryRoomRsp() {
  SharedDtor();
}

void CSPVPQueryRoomRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVPQueryRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVPQueryRoomRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVPQueryRoomRsp_descriptor_;
}

const CSPVPQueryRoomRsp& CSPVPQueryRoomRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVPQueryRoomRsp* CSPVPQueryRoomRsp::default_instance_ = NULL;

CSPVPQueryRoomRsp* CSPVPQueryRoomRsp::New() const {
  return new CSPVPQueryRoomRsp;
}

void CSPVPQueryRoomRsp::Clear() {
  rooms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVPQueryRoomRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PVPRoomBase rooms = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rooms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rooms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rooms;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPVPQueryRoomRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PVPRoomBase rooms = 1;
  for (int i = 0; i < this->rooms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rooms(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVPQueryRoomRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PVPRoomBase rooms = 1;
  for (int i = 0; i < this->rooms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rooms(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVPQueryRoomRsp::ByteSize() const {
  int total_size = 0;

  // repeated .PVPRoomBase rooms = 1;
  total_size += 1 * this->rooms_size();
  for (int i = 0; i < this->rooms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rooms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVPQueryRoomRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVPQueryRoomRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVPQueryRoomRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVPQueryRoomRsp::MergeFrom(const CSPVPQueryRoomRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rooms_.MergeFrom(from.rooms_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVPQueryRoomRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVPQueryRoomRsp::CopyFrom(const CSPVPQueryRoomRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVPQueryRoomRsp::IsInitialized() const {

  for (int i = 0; i < rooms_size(); i++) {
    if (!this->rooms(i).IsInitialized()) return false;
  }
  return true;
}

void CSPVPQueryRoomRsp::Swap(CSPVPQueryRoomRsp* other) {
  if (other != this) {
    rooms_.Swap(&other->rooms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVPQueryRoomRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVPQueryRoomRsp_descriptor_;
  metadata.reflection = CSPVPQueryRoomRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPVPBaseInfoRsp::kWinningFieldNumber;
const int CSPVPBaseInfoRsp::kRemainTimesFieldNumber;
#endif  // !_MSC_VER

CSPVPBaseInfoRsp::CSPVPBaseInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVPBaseInfoRsp::InitAsDefaultInstance() {
}

CSPVPBaseInfoRsp::CSPVPBaseInfoRsp(const CSPVPBaseInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVPBaseInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  winning_ = 0u;
  remain_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVPBaseInfoRsp::~CSPVPBaseInfoRsp() {
  SharedDtor();
}

void CSPVPBaseInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVPBaseInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVPBaseInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVPBaseInfoRsp_descriptor_;
}

const CSPVPBaseInfoRsp& CSPVPBaseInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVPBaseInfoRsp* CSPVPBaseInfoRsp::default_instance_ = NULL;

CSPVPBaseInfoRsp* CSPVPBaseInfoRsp::New() const {
  return new CSPVPBaseInfoRsp;
}

void CSPVPBaseInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winning_ = 0u;
    remain_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVPBaseInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 winning = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winning_)));
          set_has_winning();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remain_times;
        break;
      }

      // required uint32 remain_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_times_)));
          set_has_remain_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPVPBaseInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 winning = 1;
  if (has_winning()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->winning(), output);
  }

  // required uint32 remain_times = 2;
  if (has_remain_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remain_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVPBaseInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 winning = 1;
  if (has_winning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->winning(), target);
  }

  // required uint32 remain_times = 2;
  if (has_remain_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remain_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVPBaseInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 winning = 1;
    if (has_winning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winning());
    }

    // required uint32 remain_times = 2;
    if (has_remain_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remain_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVPBaseInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVPBaseInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVPBaseInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVPBaseInfoRsp::MergeFrom(const CSPVPBaseInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winning()) {
      set_winning(from.winning());
    }
    if (from.has_remain_times()) {
      set_remain_times(from.remain_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVPBaseInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVPBaseInfoRsp::CopyFrom(const CSPVPBaseInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVPBaseInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSPVPBaseInfoRsp::Swap(CSPVPBaseInfoRsp* other) {
  if (other != this) {
    std::swap(winning_, other->winning_);
    std::swap(remain_times_, other->remain_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVPBaseInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVPBaseInfoRsp_descriptor_;
  metadata.reflection = CSPVPBaseInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPVPCreateRoomReq::kTypeFieldNumber;
const int CSPVPCreateRoomReq::kTopLevelFieldNumber;
#endif  // !_MSC_VER

CSPVPCreateRoomReq::CSPVPCreateRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVPCreateRoomReq::InitAsDefaultInstance() {
}

CSPVPCreateRoomReq::CSPVPCreateRoomReq(const CSPVPCreateRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVPCreateRoomReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  top_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVPCreateRoomReq::~CSPVPCreateRoomReq() {
  SharedDtor();
}

void CSPVPCreateRoomReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVPCreateRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVPCreateRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVPCreateRoomReq_descriptor_;
}

const CSPVPCreateRoomReq& CSPVPCreateRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVPCreateRoomReq* CSPVPCreateRoomReq::default_instance_ = NULL;

CSPVPCreateRoomReq* CSPVPCreateRoomReq::New() const {
  return new CSPVPCreateRoomReq;
}

void CSPVPCreateRoomReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    top_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVPCreateRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_top_level;
        break;
      }

      // required uint32 top_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_level_)));
          set_has_top_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPVPCreateRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 top_level = 2;
  if (has_top_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->top_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVPCreateRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 top_level = 2;
  if (has_top_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->top_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVPCreateRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 top_level = 2;
    if (has_top_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVPCreateRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVPCreateRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVPCreateRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVPCreateRoomReq::MergeFrom(const CSPVPCreateRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_top_level()) {
      set_top_level(from.top_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVPCreateRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVPCreateRoomReq::CopyFrom(const CSPVPCreateRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVPCreateRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSPVPCreateRoomReq::Swap(CSPVPCreateRoomReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(top_level_, other->top_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVPCreateRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVPCreateRoomReq_descriptor_;
  metadata.reflection = CSPVPCreateRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPVPJoinRoomReq::kRoomIdFieldNumber;
#endif  // !_MSC_VER

CSPVPJoinRoomReq::CSPVPJoinRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVPJoinRoomReq::InitAsDefaultInstance() {
}

CSPVPJoinRoomReq::CSPVPJoinRoomReq(const CSPVPJoinRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVPJoinRoomReq::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVPJoinRoomReq::~CSPVPJoinRoomReq() {
  SharedDtor();
}

void CSPVPJoinRoomReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVPJoinRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVPJoinRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVPJoinRoomReq_descriptor_;
}

const CSPVPJoinRoomReq& CSPVPJoinRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVPJoinRoomReq* CSPVPJoinRoomReq::default_instance_ = NULL;

CSPVPJoinRoomReq* CSPVPJoinRoomReq::New() const {
  return new CSPVPJoinRoomReq;
}

void CSPVPJoinRoomReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVPJoinRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPVPJoinRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVPJoinRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVPJoinRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVPJoinRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVPJoinRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVPJoinRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVPJoinRoomReq::MergeFrom(const CSPVPJoinRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVPJoinRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVPJoinRoomReq::CopyFrom(const CSPVPJoinRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVPJoinRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSPVPJoinRoomReq::Swap(CSPVPJoinRoomReq* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVPJoinRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVPJoinRoomReq_descriptor_;
  metadata.reflection = CSPVPJoinRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVPSeatBase::kIdFieldNumber;
const int PVPSeatBase::kAvatarFieldNumber;
const int PVPSeatBase::kNameFieldNumber;
const int PVPSeatBase::kLevelFieldNumber;
const int PVPSeatBase::kReadyFieldNumber;
#endif  // !_MSC_VER

PVPSeatBase::PVPSeatBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVPSeatBase::InitAsDefaultInstance() {
}

PVPSeatBase::PVPSeatBase(const PVPSeatBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVPSeatBase::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  avatar_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  ready_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVPSeatBase::~PVPSeatBase() {
  SharedDtor();
}

void PVPSeatBase::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PVPSeatBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVPSeatBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVPSeatBase_descriptor_;
}

const PVPSeatBase& PVPSeatBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

PVPSeatBase* PVPSeatBase::default_instance_ = NULL;

PVPSeatBase* PVPSeatBase::New() const {
  return new PVPSeatBase;
}

void PVPSeatBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    avatar_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    ready_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVPSeatBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_avatar;
        break;
      }

      // required uint32 avatar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_)));
          set_has_avatar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ready;
        break;
      }

      // required bool ready = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVPSeatBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 avatar = 2;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->avatar(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // required bool ready = 5;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ready(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVPSeatBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 avatar = 2;
  if (has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->avatar(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // required bool ready = 5;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ready(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVPSeatBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 avatar = 2;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required bool ready = 5;
    if (has_ready()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVPSeatBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVPSeatBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVPSeatBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVPSeatBase::MergeFrom(const PVPSeatBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVPSeatBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPSeatBase::CopyFrom(const PVPSeatBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPSeatBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PVPSeatBase::Swap(PVPSeatBase* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(avatar_, other->avatar_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(ready_, other->ready_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVPSeatBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVPSeatBase_descriptor_;
  metadata.reflection = PVPSeatBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPVPJoinRoomRsp::kRoomIdFieldNumber;
const int CSPVPJoinRoomRsp::kTypeFieldNumber;
const int CSPVPJoinRoomRsp::kTopLevelFieldNumber;
const int CSPVPJoinRoomRsp::kSeatsFieldNumber;
#endif  // !_MSC_VER

CSPVPJoinRoomRsp::CSPVPJoinRoomRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVPJoinRoomRsp::InitAsDefaultInstance() {
}

CSPVPJoinRoomRsp::CSPVPJoinRoomRsp(const CSPVPJoinRoomRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVPJoinRoomRsp::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0u;
  type_ = 0u;
  top_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVPJoinRoomRsp::~CSPVPJoinRoomRsp() {
  SharedDtor();
}

void CSPVPJoinRoomRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVPJoinRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVPJoinRoomRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVPJoinRoomRsp_descriptor_;
}

const CSPVPJoinRoomRsp& CSPVPJoinRoomRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVPJoinRoomRsp* CSPVPJoinRoomRsp::default_instance_ = NULL;

CSPVPJoinRoomRsp* CSPVPJoinRoomRsp::New() const {
  return new CSPVPJoinRoomRsp;
}

void CSPVPJoinRoomRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0u;
    type_ = 0u;
    top_level_ = 0u;
  }
  seats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVPJoinRoomRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_top_level;
        break;
      }

      // required uint32 top_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_level_)));
          set_has_top_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_seats;
        break;
      }

      // repeated .PVPSeatBase seats = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_seats;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPVPJoinRoomRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_id(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 top_level = 3;
  if (has_top_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->top_level(), output);
  }

  // repeated .PVPSeatBase seats = 4;
  for (int i = 0; i < this->seats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->seats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVPJoinRoomRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->room_id(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 top_level = 3;
  if (has_top_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->top_level(), target);
  }

  // repeated .PVPSeatBase seats = 4;
  for (int i = 0; i < this->seats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->seats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVPJoinRoomRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 top_level = 3;
    if (has_top_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_level());
    }

  }
  // repeated .PVPSeatBase seats = 4;
  total_size += 1 * this->seats_size();
  for (int i = 0; i < this->seats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVPJoinRoomRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVPJoinRoomRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVPJoinRoomRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVPJoinRoomRsp::MergeFrom(const CSPVPJoinRoomRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  seats_.MergeFrom(from.seats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_top_level()) {
      set_top_level(from.top_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVPJoinRoomRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVPJoinRoomRsp::CopyFrom(const CSPVPJoinRoomRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVPJoinRoomRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < seats_size(); i++) {
    if (!this->seats(i).IsInitialized()) return false;
  }
  return true;
}

void CSPVPJoinRoomRsp::Swap(CSPVPJoinRoomRsp* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(type_, other->type_);
    std::swap(top_level_, other->top_level_);
    seats_.Swap(&other->seats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVPJoinRoomRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVPJoinRoomRsp_descriptor_;
  metadata.reflection = CSPVPJoinRoomRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSPVPExitRoomReq::CSPVPExitRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVPExitRoomReq::InitAsDefaultInstance() {
}

CSPVPExitRoomReq::CSPVPExitRoomReq(const CSPVPExitRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVPExitRoomReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVPExitRoomReq::~CSPVPExitRoomReq() {
  SharedDtor();
}

void CSPVPExitRoomReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVPExitRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVPExitRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVPExitRoomReq_descriptor_;
}

const CSPVPExitRoomReq& CSPVPExitRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVPExitRoomReq* CSPVPExitRoomReq::default_instance_ = NULL;

CSPVPExitRoomReq* CSPVPExitRoomReq::New() const {
  return new CSPVPExitRoomReq;
}

void CSPVPExitRoomReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVPExitRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSPVPExitRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVPExitRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVPExitRoomReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVPExitRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVPExitRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVPExitRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVPExitRoomReq::MergeFrom(const CSPVPExitRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVPExitRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVPExitRoomReq::CopyFrom(const CSPVPExitRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVPExitRoomReq::IsInitialized() const {

  return true;
}

void CSPVPExitRoomReq::Swap(CSPVPExitRoomReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVPExitRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVPExitRoomReq_descriptor_;
  metadata.reflection = CSPVPExitRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSPVPExitRoomRsp::CSPVPExitRoomRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVPExitRoomRsp::InitAsDefaultInstance() {
}

CSPVPExitRoomRsp::CSPVPExitRoomRsp(const CSPVPExitRoomRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVPExitRoomRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVPExitRoomRsp::~CSPVPExitRoomRsp() {
  SharedDtor();
}

void CSPVPExitRoomRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVPExitRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVPExitRoomRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVPExitRoomRsp_descriptor_;
}

const CSPVPExitRoomRsp& CSPVPExitRoomRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVPExitRoomRsp* CSPVPExitRoomRsp::default_instance_ = NULL;

CSPVPExitRoomRsp* CSPVPExitRoomRsp::New() const {
  return new CSPVPExitRoomRsp;
}

void CSPVPExitRoomRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVPExitRoomRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSPVPExitRoomRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVPExitRoomRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVPExitRoomRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVPExitRoomRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVPExitRoomRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVPExitRoomRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVPExitRoomRsp::MergeFrom(const CSPVPExitRoomRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVPExitRoomRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVPExitRoomRsp::CopyFrom(const CSPVPExitRoomRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVPExitRoomRsp::IsInitialized() const {

  return true;
}

void CSPVPExitRoomRsp::Swap(CSPVPExitRoomRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVPExitRoomRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVPExitRoomRsp_descriptor_;
  metadata.reflection = CSPVPExitRoomRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSPVPCloseRoomRsp::CSPVPCloseRoomRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVPCloseRoomRsp::InitAsDefaultInstance() {
}

CSPVPCloseRoomRsp::CSPVPCloseRoomRsp(const CSPVPCloseRoomRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVPCloseRoomRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVPCloseRoomRsp::~CSPVPCloseRoomRsp() {
  SharedDtor();
}

void CSPVPCloseRoomRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVPCloseRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVPCloseRoomRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVPCloseRoomRsp_descriptor_;
}

const CSPVPCloseRoomRsp& CSPVPCloseRoomRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVPCloseRoomRsp* CSPVPCloseRoomRsp::default_instance_ = NULL;

CSPVPCloseRoomRsp* CSPVPCloseRoomRsp::New() const {
  return new CSPVPCloseRoomRsp;
}

void CSPVPCloseRoomRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVPCloseRoomRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSPVPCloseRoomRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVPCloseRoomRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVPCloseRoomRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVPCloseRoomRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVPCloseRoomRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVPCloseRoomRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVPCloseRoomRsp::MergeFrom(const CSPVPCloseRoomRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVPCloseRoomRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVPCloseRoomRsp::CopyFrom(const CSPVPCloseRoomRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVPCloseRoomRsp::IsInitialized() const {

  return true;
}

void CSPVPCloseRoomRsp::Swap(CSPVPCloseRoomRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVPCloseRoomRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVPCloseRoomRsp_descriptor_;
  metadata.reflection = CSPVPCloseRoomRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPVPChangeSeatReq::kSeatFieldNumber;
#endif  // !_MSC_VER

CSPVPChangeSeatReq::CSPVPChangeSeatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVPChangeSeatReq::InitAsDefaultInstance() {
}

CSPVPChangeSeatReq::CSPVPChangeSeatReq(const CSPVPChangeSeatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVPChangeSeatReq::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVPChangeSeatReq::~CSPVPChangeSeatReq() {
  SharedDtor();
}

void CSPVPChangeSeatReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVPChangeSeatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVPChangeSeatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVPChangeSeatReq_descriptor_;
}

const CSPVPChangeSeatReq& CSPVPChangeSeatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVPChangeSeatReq* CSPVPChangeSeatReq::default_instance_ = NULL;

CSPVPChangeSeatReq* CSPVPChangeSeatReq::New() const {
  return new CSPVPChangeSeatReq;
}

void CSPVPChangeSeatReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVPChangeSeatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPVPChangeSeatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVPChangeSeatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVPChangeSeatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVPChangeSeatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVPChangeSeatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVPChangeSeatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVPChangeSeatReq::MergeFrom(const CSPVPChangeSeatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVPChangeSeatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVPChangeSeatReq::CopyFrom(const CSPVPChangeSeatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVPChangeSeatReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSPVPChangeSeatReq::Swap(CSPVPChangeSeatReq* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVPChangeSeatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVPChangeSeatReq_descriptor_;
  metadata.reflection = CSPVPChangeSeatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSPVPReadyReq::CSPVPReadyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVPReadyReq::InitAsDefaultInstance() {
}

CSPVPReadyReq::CSPVPReadyReq(const CSPVPReadyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVPReadyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVPReadyReq::~CSPVPReadyReq() {
  SharedDtor();
}

void CSPVPReadyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVPReadyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVPReadyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVPReadyReq_descriptor_;
}

const CSPVPReadyReq& CSPVPReadyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVPReadyReq* CSPVPReadyReq::default_instance_ = NULL;

CSPVPReadyReq* CSPVPReadyReq::New() const {
  return new CSPVPReadyReq;
}

void CSPVPReadyReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVPReadyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSPVPReadyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVPReadyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVPReadyReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVPReadyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVPReadyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVPReadyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVPReadyReq::MergeFrom(const CSPVPReadyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVPReadyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVPReadyReq::CopyFrom(const CSPVPReadyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVPReadyReq::IsInitialized() const {

  return true;
}

void CSPVPReadyReq::Swap(CSPVPReadyReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVPReadyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVPReadyReq_descriptor_;
  metadata.reflection = CSPVPReadyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSPVPCancelReadyReq::CSPVPCancelReadyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVPCancelReadyReq::InitAsDefaultInstance() {
}

CSPVPCancelReadyReq::CSPVPCancelReadyReq(const CSPVPCancelReadyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVPCancelReadyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVPCancelReadyReq::~CSPVPCancelReadyReq() {
  SharedDtor();
}

void CSPVPCancelReadyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVPCancelReadyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVPCancelReadyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVPCancelReadyReq_descriptor_;
}

const CSPVPCancelReadyReq& CSPVPCancelReadyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVPCancelReadyReq* CSPVPCancelReadyReq::default_instance_ = NULL;

CSPVPCancelReadyReq* CSPVPCancelReadyReq::New() const {
  return new CSPVPCancelReadyReq;
}

void CSPVPCancelReadyReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVPCancelReadyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSPVPCancelReadyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVPCancelReadyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVPCancelReadyReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVPCancelReadyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVPCancelReadyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVPCancelReadyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVPCancelReadyReq::MergeFrom(const CSPVPCancelReadyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVPCancelReadyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVPCancelReadyReq::CopyFrom(const CSPVPCancelReadyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVPCancelReadyReq::IsInitialized() const {

  return true;
}

void CSPVPCancelReadyReq::Swap(CSPVPCancelReadyReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVPCancelReadyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVPCancelReadyReq_descriptor_;
  metadata.reflection = CSPVPCancelReadyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPVPKickoffReq::kSeatFieldNumber;
#endif  // !_MSC_VER

CSPVPKickoffReq::CSPVPKickoffReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVPKickoffReq::InitAsDefaultInstance() {
}

CSPVPKickoffReq::CSPVPKickoffReq(const CSPVPKickoffReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVPKickoffReq::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVPKickoffReq::~CSPVPKickoffReq() {
  SharedDtor();
}

void CSPVPKickoffReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVPKickoffReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVPKickoffReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVPKickoffReq_descriptor_;
}

const CSPVPKickoffReq& CSPVPKickoffReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVPKickoffReq* CSPVPKickoffReq::default_instance_ = NULL;

CSPVPKickoffReq* CSPVPKickoffReq::New() const {
  return new CSPVPKickoffReq;
}

void CSPVPKickoffReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVPKickoffReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPVPKickoffReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVPKickoffReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVPKickoffReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVPKickoffReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVPKickoffReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVPKickoffReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVPKickoffReq::MergeFrom(const CSPVPKickoffReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVPKickoffReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVPKickoffReq::CopyFrom(const CSPVPKickoffReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVPKickoffReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSPVPKickoffReq::Swap(CSPVPKickoffReq* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVPKickoffReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVPKickoffReq_descriptor_;
  metadata.reflection = CSPVPKickoffReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSPVPKickoffRsp::CSPVPKickoffRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVPKickoffRsp::InitAsDefaultInstance() {
}

CSPVPKickoffRsp::CSPVPKickoffRsp(const CSPVPKickoffRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVPKickoffRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVPKickoffRsp::~CSPVPKickoffRsp() {
  SharedDtor();
}

void CSPVPKickoffRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVPKickoffRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVPKickoffRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVPKickoffRsp_descriptor_;
}

const CSPVPKickoffRsp& CSPVPKickoffRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVPKickoffRsp* CSPVPKickoffRsp::default_instance_ = NULL;

CSPVPKickoffRsp* CSPVPKickoffRsp::New() const {
  return new CSPVPKickoffRsp;
}

void CSPVPKickoffRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVPKickoffRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSPVPKickoffRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVPKickoffRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVPKickoffRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVPKickoffRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVPKickoffRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVPKickoffRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVPKickoffRsp::MergeFrom(const CSPVPKickoffRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVPKickoffRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVPKickoffRsp::CopyFrom(const CSPVPKickoffRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVPKickoffRsp::IsInitialized() const {

  return true;
}

void CSPVPKickoffRsp::Swap(CSPVPKickoffRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVPKickoffRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVPKickoffRsp_descriptor_;
  metadata.reflection = CSPVPKickoffRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSPVPStartReq::CSPVPStartReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVPStartReq::InitAsDefaultInstance() {
}

CSPVPStartReq::CSPVPStartReq(const CSPVPStartReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVPStartReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVPStartReq::~CSPVPStartReq() {
  SharedDtor();
}

void CSPVPStartReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVPStartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVPStartReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVPStartReq_descriptor_;
}

const CSPVPStartReq& CSPVPStartReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVPStartReq* CSPVPStartReq::default_instance_ = NULL;

CSPVPStartReq* CSPVPStartReq::New() const {
  return new CSPVPStartReq;
}

void CSPVPStartReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVPStartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSPVPStartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVPStartReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVPStartReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVPStartReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVPStartReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVPStartReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVPStartReq::MergeFrom(const CSPVPStartReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVPStartReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVPStartReq::CopyFrom(const CSPVPStartReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVPStartReq::IsInitialized() const {

  return true;
}

void CSPVPStartReq::Swap(CSPVPStartReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVPStartReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVPStartReq_descriptor_;
  metadata.reflection = CSPVPStartReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPVPStartRsp::kMapidFieldNumber;
#endif  // !_MSC_VER

CSPVPStartRsp::CSPVPStartRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVPStartRsp::InitAsDefaultInstance() {
}

CSPVPStartRsp::CSPVPStartRsp(const CSPVPStartRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVPStartRsp::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVPStartRsp::~CSPVPStartRsp() {
  SharedDtor();
}

void CSPVPStartRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVPStartRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVPStartRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVPStartRsp_descriptor_;
}

const CSPVPStartRsp& CSPVPStartRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVPStartRsp* CSPVPStartRsp::default_instance_ = NULL;

CSPVPStartRsp* CSPVPStartRsp::New() const {
  return new CSPVPStartRsp;
}

void CSPVPStartRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVPStartRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPVPStartRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVPStartRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVPStartRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVPStartRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVPStartRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVPStartRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVPStartRsp::MergeFrom(const CSPVPStartRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVPStartRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVPStartRsp::CopyFrom(const CSPVPStartRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVPStartRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSPVPStartRsp::Swap(CSPVPStartRsp* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVPStartRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVPStartRsp_descriptor_;
  metadata.reflection = CSPVPStartRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSPPVEBattleReq::CSPPVEBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPPVEBattleReq::InitAsDefaultInstance() {
}

CSPPVEBattleReq::CSPPVEBattleReq(const CSPPVEBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPPVEBattleReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPPVEBattleReq::~CSPPVEBattleReq() {
  SharedDtor();
}

void CSPPVEBattleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPPVEBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPPVEBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPPVEBattleReq_descriptor_;
}

const CSPPVEBattleReq& CSPPVEBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPPVEBattleReq* CSPPVEBattleReq::default_instance_ = NULL;

CSPPVEBattleReq* CSPPVEBattleReq::New() const {
  return new CSPPVEBattleReq;
}

void CSPPVEBattleReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPPVEBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSPPVEBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPPVEBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPPVEBattleReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPPVEBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPPVEBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPPVEBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPPVEBattleReq::MergeFrom(const CSPPVEBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPPVEBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPPVEBattleReq::CopyFrom(const CSPPVEBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPPVEBattleReq::IsInitialized() const {

  return true;
}

void CSPPVEBattleReq::Swap(CSPPVEBattleReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPPVEBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPPVEBattleReq_descriptor_;
  metadata.reflection = CSPPVEBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPPVEBattleRsp::kIdsFieldNumber;
#endif  // !_MSC_VER

CSPPVEBattleRsp::CSPPVEBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPPVEBattleRsp::InitAsDefaultInstance() {
}

CSPPVEBattleRsp::CSPPVEBattleRsp(const CSPPVEBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPPVEBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPPVEBattleRsp::~CSPPVEBattleRsp() {
  SharedDtor();
}

void CSPPVEBattleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPPVEBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPPVEBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPPVEBattleRsp_descriptor_;
}

const CSPPVEBattleRsp& CSPPVEBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPPVEBattleRsp* CSPPVEBattleRsp::default_instance_ = NULL;

CSPPVEBattleRsp* CSPPVEBattleRsp::New() const {
  return new CSPPVEBattleRsp;
}

void CSPPVEBattleRsp::Clear() {
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPPVEBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPPVEBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPPVEBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPPVEBattleRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPPVEBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPPVEBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPPVEBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPPVEBattleRsp::MergeFrom(const CSPPVEBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPPVEBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPPVEBattleRsp::CopyFrom(const CSPPVEBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPPVEBattleRsp::IsInitialized() const {

  return true;
}

void CSPPVEBattleRsp::Swap(CSPPVEBattleRsp* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPPVEBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPPVEBattleRsp_descriptor_;
  metadata.reflection = CSPPVEBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSPVEQueryRoomReq::CSPVEQueryRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVEQueryRoomReq::InitAsDefaultInstance() {
}

CSPVEQueryRoomReq::CSPVEQueryRoomReq(const CSPVEQueryRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVEQueryRoomReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVEQueryRoomReq::~CSPVEQueryRoomReq() {
  SharedDtor();
}

void CSPVEQueryRoomReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVEQueryRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVEQueryRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVEQueryRoomReq_descriptor_;
}

const CSPVEQueryRoomReq& CSPVEQueryRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVEQueryRoomReq* CSPVEQueryRoomReq::default_instance_ = NULL;

CSPVEQueryRoomReq* CSPVEQueryRoomReq::New() const {
  return new CSPVEQueryRoomReq;
}

void CSPVEQueryRoomReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVEQueryRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSPVEQueryRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVEQueryRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVEQueryRoomReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVEQueryRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVEQueryRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVEQueryRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVEQueryRoomReq::MergeFrom(const CSPVEQueryRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVEQueryRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVEQueryRoomReq::CopyFrom(const CSPVEQueryRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVEQueryRoomReq::IsInitialized() const {

  return true;
}

void CSPVEQueryRoomReq::Swap(CSPVEQueryRoomReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVEQueryRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVEQueryRoomReq_descriptor_;
  metadata.reflection = CSPVEQueryRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVERoomBase::kRoomIdFieldNumber;
const int PVERoomBase::kTopLevelFieldNumber;
const int PVERoomBase::kCurrentOnlineFieldNumber;
const int PVERoomBase::kMaxOnlineFieldNumber;
#endif  // !_MSC_VER

PVERoomBase::PVERoomBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVERoomBase::InitAsDefaultInstance() {
}

PVERoomBase::PVERoomBase(const PVERoomBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVERoomBase::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0u;
  top_level_ = 0u;
  current_online_ = 0u;
  max_online_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVERoomBase::~PVERoomBase() {
  SharedDtor();
}

void PVERoomBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVERoomBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVERoomBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVERoomBase_descriptor_;
}

const PVERoomBase& PVERoomBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

PVERoomBase* PVERoomBase::default_instance_ = NULL;

PVERoomBase* PVERoomBase::New() const {
  return new PVERoomBase;
}

void PVERoomBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0u;
    top_level_ = 0u;
    current_online_ = 0u;
    max_online_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVERoomBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_top_level;
        break;
      }

      // required uint32 top_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_level_)));
          set_has_top_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_current_online;
        break;
      }

      // required uint32 current_online = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_online_)));
          set_has_current_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_online;
        break;
      }

      // required uint32 max_online = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_online_)));
          set_has_max_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVERoomBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_id(), output);
  }

  // required uint32 top_level = 2;
  if (has_top_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->top_level(), output);
  }

  // required uint32 current_online = 3;
  if (has_current_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->current_online(), output);
  }

  // required uint32 max_online = 4;
  if (has_max_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVERoomBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->room_id(), target);
  }

  // required uint32 top_level = 2;
  if (has_top_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->top_level(), target);
  }

  // required uint32 current_online = 3;
  if (has_current_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->current_online(), target);
  }

  // required uint32 max_online = 4;
  if (has_max_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVERoomBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // required uint32 top_level = 2;
    if (has_top_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_level());
    }

    // required uint32 current_online = 3;
    if (has_current_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_online());
    }

    // required uint32 max_online = 4;
    if (has_max_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_online());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVERoomBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVERoomBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVERoomBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVERoomBase::MergeFrom(const PVERoomBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_top_level()) {
      set_top_level(from.top_level());
    }
    if (from.has_current_online()) {
      set_current_online(from.current_online());
    }
    if (from.has_max_online()) {
      set_max_online(from.max_online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVERoomBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVERoomBase::CopyFrom(const PVERoomBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVERoomBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PVERoomBase::Swap(PVERoomBase* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(top_level_, other->top_level_);
    std::swap(current_online_, other->current_online_);
    std::swap(max_online_, other->max_online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVERoomBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVERoomBase_descriptor_;
  metadata.reflection = PVERoomBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPVEQueryRoomRsp::kRoomsFieldNumber;
#endif  // !_MSC_VER

CSPVEQueryRoomRsp::CSPVEQueryRoomRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVEQueryRoomRsp::InitAsDefaultInstance() {
}

CSPVEQueryRoomRsp::CSPVEQueryRoomRsp(const CSPVEQueryRoomRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVEQueryRoomRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVEQueryRoomRsp::~CSPVEQueryRoomRsp() {
  SharedDtor();
}

void CSPVEQueryRoomRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVEQueryRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVEQueryRoomRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVEQueryRoomRsp_descriptor_;
}

const CSPVEQueryRoomRsp& CSPVEQueryRoomRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVEQueryRoomRsp* CSPVEQueryRoomRsp::default_instance_ = NULL;

CSPVEQueryRoomRsp* CSPVEQueryRoomRsp::New() const {
  return new CSPVEQueryRoomRsp;
}

void CSPVEQueryRoomRsp::Clear() {
  rooms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVEQueryRoomRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PVERoomBase rooms = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rooms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rooms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rooms;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPVEQueryRoomRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PVERoomBase rooms = 1;
  for (int i = 0; i < this->rooms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rooms(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVEQueryRoomRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PVERoomBase rooms = 1;
  for (int i = 0; i < this->rooms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rooms(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVEQueryRoomRsp::ByteSize() const {
  int total_size = 0;

  // repeated .PVERoomBase rooms = 1;
  total_size += 1 * this->rooms_size();
  for (int i = 0; i < this->rooms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rooms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVEQueryRoomRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVEQueryRoomRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVEQueryRoomRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVEQueryRoomRsp::MergeFrom(const CSPVEQueryRoomRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rooms_.MergeFrom(from.rooms_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVEQueryRoomRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVEQueryRoomRsp::CopyFrom(const CSPVEQueryRoomRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVEQueryRoomRsp::IsInitialized() const {

  for (int i = 0; i < rooms_size(); i++) {
    if (!this->rooms(i).IsInitialized()) return false;
  }
  return true;
}

void CSPVEQueryRoomRsp::Swap(CSPVEQueryRoomRsp* other) {
  if (other != this) {
    rooms_.Swap(&other->rooms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVEQueryRoomRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVEQueryRoomRsp_descriptor_;
  metadata.reflection = CSPVEQueryRoomRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPVEBaseInfoRsp::kCountdownFieldNumber;
const int CSPVEBaseInfoRsp::kRemainTimesFieldNumber;
#endif  // !_MSC_VER

CSPVEBaseInfoRsp::CSPVEBaseInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVEBaseInfoRsp::InitAsDefaultInstance() {
}

CSPVEBaseInfoRsp::CSPVEBaseInfoRsp(const CSPVEBaseInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVEBaseInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  countdown_ = 0u;
  remain_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVEBaseInfoRsp::~CSPVEBaseInfoRsp() {
  SharedDtor();
}

void CSPVEBaseInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVEBaseInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVEBaseInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVEBaseInfoRsp_descriptor_;
}

const CSPVEBaseInfoRsp& CSPVEBaseInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVEBaseInfoRsp* CSPVEBaseInfoRsp::default_instance_ = NULL;

CSPVEBaseInfoRsp* CSPVEBaseInfoRsp::New() const {
  return new CSPVEBaseInfoRsp;
}

void CSPVEBaseInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    countdown_ = 0u;
    remain_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVEBaseInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 countdown = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countdown_)));
          set_has_countdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remain_times;
        break;
      }

      // required uint32 remain_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_times_)));
          set_has_remain_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPVEBaseInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 countdown = 1;
  if (has_countdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->countdown(), output);
  }

  // required uint32 remain_times = 2;
  if (has_remain_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remain_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVEBaseInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 countdown = 1;
  if (has_countdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->countdown(), target);
  }

  // required uint32 remain_times = 2;
  if (has_remain_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remain_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVEBaseInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 countdown = 1;
    if (has_countdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countdown());
    }

    // required uint32 remain_times = 2;
    if (has_remain_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remain_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVEBaseInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVEBaseInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVEBaseInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVEBaseInfoRsp::MergeFrom(const CSPVEBaseInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_countdown()) {
      set_countdown(from.countdown());
    }
    if (from.has_remain_times()) {
      set_remain_times(from.remain_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVEBaseInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVEBaseInfoRsp::CopyFrom(const CSPVEBaseInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVEBaseInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSPVEBaseInfoRsp::Swap(CSPVEBaseInfoRsp* other) {
  if (other != this) {
    std::swap(countdown_, other->countdown_);
    std::swap(remain_times_, other->remain_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVEBaseInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVEBaseInfoRsp_descriptor_;
  metadata.reflection = CSPVEBaseInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPVECreateRoomReq::kTopLevelFieldNumber;
const int CSPVECreateRoomReq::kBattleIdFieldNumber;
#endif  // !_MSC_VER

CSPVECreateRoomReq::CSPVECreateRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVECreateRoomReq::InitAsDefaultInstance() {
}

CSPVECreateRoomReq::CSPVECreateRoomReq(const CSPVECreateRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVECreateRoomReq::SharedCtor() {
  _cached_size_ = 0;
  top_level_ = 0u;
  battle_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVECreateRoomReq::~CSPVECreateRoomReq() {
  SharedDtor();
}

void CSPVECreateRoomReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVECreateRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVECreateRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVECreateRoomReq_descriptor_;
}

const CSPVECreateRoomReq& CSPVECreateRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVECreateRoomReq* CSPVECreateRoomReq::default_instance_ = NULL;

CSPVECreateRoomReq* CSPVECreateRoomReq::New() const {
  return new CSPVECreateRoomReq;
}

void CSPVECreateRoomReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    top_level_ = 0u;
    battle_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVECreateRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 top_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_level_)));
          set_has_top_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_id;
        break;
      }

      // required uint32 battle_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_id_)));
          set_has_battle_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPVECreateRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 top_level = 1;
  if (has_top_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->top_level(), output);
  }

  // required uint32 battle_id = 2;
  if (has_battle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->battle_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVECreateRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 top_level = 1;
  if (has_top_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->top_level(), target);
  }

  // required uint32 battle_id = 2;
  if (has_battle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->battle_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVECreateRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 top_level = 1;
    if (has_top_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_level());
    }

    // required uint32 battle_id = 2;
    if (has_battle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVECreateRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVECreateRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVECreateRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVECreateRoomReq::MergeFrom(const CSPVECreateRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_top_level()) {
      set_top_level(from.top_level());
    }
    if (from.has_battle_id()) {
      set_battle_id(from.battle_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVECreateRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVECreateRoomReq::CopyFrom(const CSPVECreateRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVECreateRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSPVECreateRoomReq::Swap(CSPVECreateRoomReq* other) {
  if (other != this) {
    std::swap(top_level_, other->top_level_);
    std::swap(battle_id_, other->battle_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVECreateRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVECreateRoomReq_descriptor_;
  metadata.reflection = CSPVECreateRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPVEJoinRoomReq::kRoomIdFieldNumber;
#endif  // !_MSC_VER

CSPVEJoinRoomReq::CSPVEJoinRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVEJoinRoomReq::InitAsDefaultInstance() {
}

CSPVEJoinRoomReq::CSPVEJoinRoomReq(const CSPVEJoinRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVEJoinRoomReq::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVEJoinRoomReq::~CSPVEJoinRoomReq() {
  SharedDtor();
}

void CSPVEJoinRoomReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVEJoinRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVEJoinRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVEJoinRoomReq_descriptor_;
}

const CSPVEJoinRoomReq& CSPVEJoinRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVEJoinRoomReq* CSPVEJoinRoomReq::default_instance_ = NULL;

CSPVEJoinRoomReq* CSPVEJoinRoomReq::New() const {
  return new CSPVEJoinRoomReq;
}

void CSPVEJoinRoomReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVEJoinRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPVEJoinRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVEJoinRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVEJoinRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVEJoinRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVEJoinRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVEJoinRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVEJoinRoomReq::MergeFrom(const CSPVEJoinRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVEJoinRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVEJoinRoomReq::CopyFrom(const CSPVEJoinRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVEJoinRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSPVEJoinRoomReq::Swap(CSPVEJoinRoomReq* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVEJoinRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVEJoinRoomReq_descriptor_;
  metadata.reflection = CSPVEJoinRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPVEJoinRoomFailureRsp::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CSPVEJoinRoomFailureRsp::CSPVEJoinRoomFailureRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVEJoinRoomFailureRsp::InitAsDefaultInstance() {
}

CSPVEJoinRoomFailureRsp::CSPVEJoinRoomFailureRsp(const CSPVEJoinRoomFailureRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVEJoinRoomFailureRsp::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVEJoinRoomFailureRsp::~CSPVEJoinRoomFailureRsp() {
  SharedDtor();
}

void CSPVEJoinRoomFailureRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVEJoinRoomFailureRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVEJoinRoomFailureRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVEJoinRoomFailureRsp_descriptor_;
}

const CSPVEJoinRoomFailureRsp& CSPVEJoinRoomFailureRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVEJoinRoomFailureRsp* CSPVEJoinRoomFailureRsp::default_instance_ = NULL;

CSPVEJoinRoomFailureRsp* CSPVEJoinRoomFailureRsp::New() const {
  return new CSPVEJoinRoomFailureRsp;
}

void CSPVEJoinRoomFailureRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVEJoinRoomFailureRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPVEJoinRoomFailureRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVEJoinRoomFailureRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVEJoinRoomFailureRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVEJoinRoomFailureRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVEJoinRoomFailureRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVEJoinRoomFailureRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVEJoinRoomFailureRsp::MergeFrom(const CSPVEJoinRoomFailureRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVEJoinRoomFailureRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVEJoinRoomFailureRsp::CopyFrom(const CSPVEJoinRoomFailureRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVEJoinRoomFailureRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSPVEJoinRoomFailureRsp::Swap(CSPVEJoinRoomFailureRsp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVEJoinRoomFailureRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVEJoinRoomFailureRsp_descriptor_;
  metadata.reflection = CSPVEJoinRoomFailureRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVESeatBase::kIdFieldNumber;
const int PVESeatBase::kAvatarFieldNumber;
const int PVESeatBase::kNameFieldNumber;
const int PVESeatBase::kLevelFieldNumber;
const int PVESeatBase::kReadyFieldNumber;
#endif  // !_MSC_VER

PVESeatBase::PVESeatBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVESeatBase::InitAsDefaultInstance() {
}

PVESeatBase::PVESeatBase(const PVESeatBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVESeatBase::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  avatar_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  ready_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVESeatBase::~PVESeatBase() {
  SharedDtor();
}

void PVESeatBase::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PVESeatBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVESeatBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVESeatBase_descriptor_;
}

const PVESeatBase& PVESeatBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

PVESeatBase* PVESeatBase::default_instance_ = NULL;

PVESeatBase* PVESeatBase::New() const {
  return new PVESeatBase;
}

void PVESeatBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    avatar_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    ready_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVESeatBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_avatar;
        break;
      }

      // required uint32 avatar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_)));
          set_has_avatar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ready;
        break;
      }

      // required bool ready = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVESeatBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 avatar = 2;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->avatar(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // required bool ready = 5;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ready(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVESeatBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 avatar = 2;
  if (has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->avatar(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // required bool ready = 5;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ready(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVESeatBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 avatar = 2;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required bool ready = 5;
    if (has_ready()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVESeatBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVESeatBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVESeatBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVESeatBase::MergeFrom(const PVESeatBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVESeatBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVESeatBase::CopyFrom(const PVESeatBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVESeatBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PVESeatBase::Swap(PVESeatBase* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(avatar_, other->avatar_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(ready_, other->ready_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVESeatBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVESeatBase_descriptor_;
  metadata.reflection = PVESeatBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPVEJoinRoomRsp::kRoomIdFieldNumber;
const int CSPVEJoinRoomRsp::kTopLevelFieldNumber;
const int CSPVEJoinRoomRsp::kSeatsFieldNumber;
#endif  // !_MSC_VER

CSPVEJoinRoomRsp::CSPVEJoinRoomRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVEJoinRoomRsp::InitAsDefaultInstance() {
}

CSPVEJoinRoomRsp::CSPVEJoinRoomRsp(const CSPVEJoinRoomRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVEJoinRoomRsp::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0u;
  top_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVEJoinRoomRsp::~CSPVEJoinRoomRsp() {
  SharedDtor();
}

void CSPVEJoinRoomRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVEJoinRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVEJoinRoomRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVEJoinRoomRsp_descriptor_;
}

const CSPVEJoinRoomRsp& CSPVEJoinRoomRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVEJoinRoomRsp* CSPVEJoinRoomRsp::default_instance_ = NULL;

CSPVEJoinRoomRsp* CSPVEJoinRoomRsp::New() const {
  return new CSPVEJoinRoomRsp;
}

void CSPVEJoinRoomRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0u;
    top_level_ = 0u;
  }
  seats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVEJoinRoomRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_top_level;
        break;
      }

      // required uint32 top_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_level_)));
          set_has_top_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_seats;
        break;
      }

      // repeated .PVESeatBase seats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_seats;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPVEJoinRoomRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_id(), output);
  }

  // required uint32 top_level = 2;
  if (has_top_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->top_level(), output);
  }

  // repeated .PVESeatBase seats = 3;
  for (int i = 0; i < this->seats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->seats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVEJoinRoomRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->room_id(), target);
  }

  // required uint32 top_level = 2;
  if (has_top_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->top_level(), target);
  }

  // repeated .PVESeatBase seats = 3;
  for (int i = 0; i < this->seats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->seats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVEJoinRoomRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // required uint32 top_level = 2;
    if (has_top_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_level());
    }

  }
  // repeated .PVESeatBase seats = 3;
  total_size += 1 * this->seats_size();
  for (int i = 0; i < this->seats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVEJoinRoomRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVEJoinRoomRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVEJoinRoomRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVEJoinRoomRsp::MergeFrom(const CSPVEJoinRoomRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  seats_.MergeFrom(from.seats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_top_level()) {
      set_top_level(from.top_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVEJoinRoomRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVEJoinRoomRsp::CopyFrom(const CSPVEJoinRoomRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVEJoinRoomRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < seats_size(); i++) {
    if (!this->seats(i).IsInitialized()) return false;
  }
  return true;
}

void CSPVEJoinRoomRsp::Swap(CSPVEJoinRoomRsp* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(top_level_, other->top_level_);
    seats_.Swap(&other->seats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVEJoinRoomRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVEJoinRoomRsp_descriptor_;
  metadata.reflection = CSPVEJoinRoomRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSPVEExitRoomReq::CSPVEExitRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVEExitRoomReq::InitAsDefaultInstance() {
}

CSPVEExitRoomReq::CSPVEExitRoomReq(const CSPVEExitRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVEExitRoomReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVEExitRoomReq::~CSPVEExitRoomReq() {
  SharedDtor();
}

void CSPVEExitRoomReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVEExitRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVEExitRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVEExitRoomReq_descriptor_;
}

const CSPVEExitRoomReq& CSPVEExitRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVEExitRoomReq* CSPVEExitRoomReq::default_instance_ = NULL;

CSPVEExitRoomReq* CSPVEExitRoomReq::New() const {
  return new CSPVEExitRoomReq;
}

void CSPVEExitRoomReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVEExitRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSPVEExitRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVEExitRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVEExitRoomReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVEExitRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVEExitRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVEExitRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVEExitRoomReq::MergeFrom(const CSPVEExitRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVEExitRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVEExitRoomReq::CopyFrom(const CSPVEExitRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVEExitRoomReq::IsInitialized() const {

  return true;
}

void CSPVEExitRoomReq::Swap(CSPVEExitRoomReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVEExitRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVEExitRoomReq_descriptor_;
  metadata.reflection = CSPVEExitRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSPVEExitRoomRsp::CSPVEExitRoomRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVEExitRoomRsp::InitAsDefaultInstance() {
}

CSPVEExitRoomRsp::CSPVEExitRoomRsp(const CSPVEExitRoomRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVEExitRoomRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVEExitRoomRsp::~CSPVEExitRoomRsp() {
  SharedDtor();
}

void CSPVEExitRoomRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVEExitRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVEExitRoomRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVEExitRoomRsp_descriptor_;
}

const CSPVEExitRoomRsp& CSPVEExitRoomRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVEExitRoomRsp* CSPVEExitRoomRsp::default_instance_ = NULL;

CSPVEExitRoomRsp* CSPVEExitRoomRsp::New() const {
  return new CSPVEExitRoomRsp;
}

void CSPVEExitRoomRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVEExitRoomRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSPVEExitRoomRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVEExitRoomRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVEExitRoomRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVEExitRoomRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVEExitRoomRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVEExitRoomRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVEExitRoomRsp::MergeFrom(const CSPVEExitRoomRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVEExitRoomRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVEExitRoomRsp::CopyFrom(const CSPVEExitRoomRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVEExitRoomRsp::IsInitialized() const {

  return true;
}

void CSPVEExitRoomRsp::Swap(CSPVEExitRoomRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVEExitRoomRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVEExitRoomRsp_descriptor_;
  metadata.reflection = CSPVEExitRoomRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSPVECloseRoomRsp::CSPVECloseRoomRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVECloseRoomRsp::InitAsDefaultInstance() {
}

CSPVECloseRoomRsp::CSPVECloseRoomRsp(const CSPVECloseRoomRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVECloseRoomRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVECloseRoomRsp::~CSPVECloseRoomRsp() {
  SharedDtor();
}

void CSPVECloseRoomRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVECloseRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVECloseRoomRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVECloseRoomRsp_descriptor_;
}

const CSPVECloseRoomRsp& CSPVECloseRoomRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVECloseRoomRsp* CSPVECloseRoomRsp::default_instance_ = NULL;

CSPVECloseRoomRsp* CSPVECloseRoomRsp::New() const {
  return new CSPVECloseRoomRsp;
}

void CSPVECloseRoomRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVECloseRoomRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSPVECloseRoomRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVECloseRoomRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVECloseRoomRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVECloseRoomRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVECloseRoomRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVECloseRoomRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVECloseRoomRsp::MergeFrom(const CSPVECloseRoomRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVECloseRoomRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVECloseRoomRsp::CopyFrom(const CSPVECloseRoomRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVECloseRoomRsp::IsInitialized() const {

  return true;
}

void CSPVECloseRoomRsp::Swap(CSPVECloseRoomRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVECloseRoomRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVECloseRoomRsp_descriptor_;
  metadata.reflection = CSPVECloseRoomRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSPVEReadyReq::CSPVEReadyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVEReadyReq::InitAsDefaultInstance() {
}

CSPVEReadyReq::CSPVEReadyReq(const CSPVEReadyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVEReadyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVEReadyReq::~CSPVEReadyReq() {
  SharedDtor();
}

void CSPVEReadyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVEReadyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVEReadyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVEReadyReq_descriptor_;
}

const CSPVEReadyReq& CSPVEReadyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVEReadyReq* CSPVEReadyReq::default_instance_ = NULL;

CSPVEReadyReq* CSPVEReadyReq::New() const {
  return new CSPVEReadyReq;
}

void CSPVEReadyReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVEReadyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSPVEReadyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVEReadyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVEReadyReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVEReadyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVEReadyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVEReadyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVEReadyReq::MergeFrom(const CSPVEReadyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVEReadyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVEReadyReq::CopyFrom(const CSPVEReadyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVEReadyReq::IsInitialized() const {

  return true;
}

void CSPVEReadyReq::Swap(CSPVEReadyReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVEReadyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVEReadyReq_descriptor_;
  metadata.reflection = CSPVEReadyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSPVECancelReadyReq::CSPVECancelReadyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVECancelReadyReq::InitAsDefaultInstance() {
}

CSPVECancelReadyReq::CSPVECancelReadyReq(const CSPVECancelReadyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVECancelReadyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVECancelReadyReq::~CSPVECancelReadyReq() {
  SharedDtor();
}

void CSPVECancelReadyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVECancelReadyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVECancelReadyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVECancelReadyReq_descriptor_;
}

const CSPVECancelReadyReq& CSPVECancelReadyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVECancelReadyReq* CSPVECancelReadyReq::default_instance_ = NULL;

CSPVECancelReadyReq* CSPVECancelReadyReq::New() const {
  return new CSPVECancelReadyReq;
}

void CSPVECancelReadyReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVECancelReadyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSPVECancelReadyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVECancelReadyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVECancelReadyReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVECancelReadyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVECancelReadyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVECancelReadyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVECancelReadyReq::MergeFrom(const CSPVECancelReadyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVECancelReadyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVECancelReadyReq::CopyFrom(const CSPVECancelReadyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVECancelReadyReq::IsInitialized() const {

  return true;
}

void CSPVECancelReadyReq::Swap(CSPVECancelReadyReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVECancelReadyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVECancelReadyReq_descriptor_;
  metadata.reflection = CSPVECancelReadyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPVEKickoffReq::kSeatFieldNumber;
#endif  // !_MSC_VER

CSPVEKickoffReq::CSPVEKickoffReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVEKickoffReq::InitAsDefaultInstance() {
}

CSPVEKickoffReq::CSPVEKickoffReq(const CSPVEKickoffReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVEKickoffReq::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVEKickoffReq::~CSPVEKickoffReq() {
  SharedDtor();
}

void CSPVEKickoffReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVEKickoffReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVEKickoffReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVEKickoffReq_descriptor_;
}

const CSPVEKickoffReq& CSPVEKickoffReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVEKickoffReq* CSPVEKickoffReq::default_instance_ = NULL;

CSPVEKickoffReq* CSPVEKickoffReq::New() const {
  return new CSPVEKickoffReq;
}

void CSPVEKickoffReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVEKickoffReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPVEKickoffReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVEKickoffReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVEKickoffReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVEKickoffReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVEKickoffReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVEKickoffReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVEKickoffReq::MergeFrom(const CSPVEKickoffReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVEKickoffReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVEKickoffReq::CopyFrom(const CSPVEKickoffReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVEKickoffReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSPVEKickoffReq::Swap(CSPVEKickoffReq* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVEKickoffReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVEKickoffReq_descriptor_;
  metadata.reflection = CSPVEKickoffReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSPVEKickoffRsp::CSPVEKickoffRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVEKickoffRsp::InitAsDefaultInstance() {
}

CSPVEKickoffRsp::CSPVEKickoffRsp(const CSPVEKickoffRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVEKickoffRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVEKickoffRsp::~CSPVEKickoffRsp() {
  SharedDtor();
}

void CSPVEKickoffRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVEKickoffRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVEKickoffRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVEKickoffRsp_descriptor_;
}

const CSPVEKickoffRsp& CSPVEKickoffRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVEKickoffRsp* CSPVEKickoffRsp::default_instance_ = NULL;

CSPVEKickoffRsp* CSPVEKickoffRsp::New() const {
  return new CSPVEKickoffRsp;
}

void CSPVEKickoffRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVEKickoffRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSPVEKickoffRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVEKickoffRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVEKickoffRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVEKickoffRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVEKickoffRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVEKickoffRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVEKickoffRsp::MergeFrom(const CSPVEKickoffRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVEKickoffRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVEKickoffRsp::CopyFrom(const CSPVEKickoffRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVEKickoffRsp::IsInitialized() const {

  return true;
}

void CSPVEKickoffRsp::Swap(CSPVEKickoffRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVEKickoffRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVEKickoffRsp_descriptor_;
  metadata.reflection = CSPVEKickoffRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSPVEStartReq::CSPVEStartReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVEStartReq::InitAsDefaultInstance() {
}

CSPVEStartReq::CSPVEStartReq(const CSPVEStartReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVEStartReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVEStartReq::~CSPVEStartReq() {
  SharedDtor();
}

void CSPVEStartReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVEStartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVEStartReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVEStartReq_descriptor_;
}

const CSPVEStartReq& CSPVEStartReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVEStartReq* CSPVEStartReq::default_instance_ = NULL;

CSPVEStartReq* CSPVEStartReq::New() const {
  return new CSPVEStartReq;
}

void CSPVEStartReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVEStartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSPVEStartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVEStartReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVEStartReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVEStartReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVEStartReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVEStartReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVEStartReq::MergeFrom(const CSPVEStartReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVEStartReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVEStartReq::CopyFrom(const CSPVEStartReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVEStartReq::IsInitialized() const {

  return true;
}

void CSPVEStartReq::Swap(CSPVEStartReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVEStartReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVEStartReq_descriptor_;
  metadata.reflection = CSPVEStartReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPVEStartRsp::kMapidFieldNumber;
#endif  // !_MSC_VER

CSPVEStartRsp::CSPVEStartRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVEStartRsp::InitAsDefaultInstance() {
}

CSPVEStartRsp::CSPVEStartRsp(const CSPVEStartRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVEStartRsp::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVEStartRsp::~CSPVEStartRsp() {
  SharedDtor();
}

void CSPVEStartRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVEStartRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVEStartRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVEStartRsp_descriptor_;
}

const CSPVEStartRsp& CSPVEStartRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVEStartRsp* CSPVEStartRsp::default_instance_ = NULL;

CSPVEStartRsp* CSPVEStartRsp::New() const {
  return new CSPVEStartRsp;
}

void CSPVEStartRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVEStartRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPVEStartRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVEStartRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVEStartRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVEStartRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVEStartRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVEStartRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVEStartRsp::MergeFrom(const CSPVEStartRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVEStartRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVEStartRsp::CopyFrom(const CSPVEStartRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVEStartRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSPVEStartRsp::Swap(CSPVEStartRsp* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVEStartRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVEStartRsp_descriptor_;
  metadata.reflection = CSPVEStartRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPVAIReq::kUseridFieldNumber;
#endif  // !_MSC_VER

CSPVAIReq::CSPVAIReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVAIReq::InitAsDefaultInstance() {
}

CSPVAIReq::CSPVAIReq(const CSPVAIReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVAIReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVAIReq::~CSPVAIReq() {
  SharedDtor();
}

void CSPVAIReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVAIReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVAIReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVAIReq_descriptor_;
}

const CSPVAIReq& CSPVAIReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVAIReq* CSPVAIReq::default_instance_ = NULL;

CSPVAIReq* CSPVAIReq::New() const {
  return new CSPVAIReq;
}

void CSPVAIReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVAIReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPVAIReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVAIReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVAIReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVAIReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVAIReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVAIReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVAIReq::MergeFrom(const CSPVAIReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVAIReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVAIReq::CopyFrom(const CSPVAIReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVAIReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSPVAIReq::Swap(CSPVAIReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVAIReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVAIReq_descriptor_;
  metadata.reflection = CSPVAIReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSPVAIInfoReq::CSPVAIInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVAIInfoReq::InitAsDefaultInstance() {
}

CSPVAIInfoReq::CSPVAIInfoReq(const CSPVAIInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVAIInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVAIInfoReq::~CSPVAIInfoReq() {
  SharedDtor();
}

void CSPVAIInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVAIInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVAIInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVAIInfoReq_descriptor_;
}

const CSPVAIInfoReq& CSPVAIInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVAIInfoReq* CSPVAIInfoReq::default_instance_ = NULL;

CSPVAIInfoReq* CSPVAIInfoReq::New() const {
  return new CSPVAIInfoReq;
}

void CSPVAIInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVAIInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSPVAIInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVAIInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVAIInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVAIInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVAIInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVAIInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVAIInfoReq::MergeFrom(const CSPVAIInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVAIInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVAIInfoReq::CopyFrom(const CSPVAIInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVAIInfoReq::IsInitialized() const {

  return true;
}

void CSPVAIInfoReq::Swap(CSPVAIInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVAIInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVAIInfoReq_descriptor_;
  metadata.reflection = CSPVAIInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPVAIInfoRsq_CSPVAIInfo::kUseridFieldNumber;
const int CSPVAIInfoRsq_CSPVAIInfo::kRegTimeFieldNumber;
const int CSPVAIInfoRsq_CSPVAIInfo::kRankFieldNumber;
const int CSPVAIInfoRsq_CSPVAIInfo::kNameFieldNumber;
const int CSPVAIInfoRsq_CSPVAIInfo::kTypeFieldNumber;
const int CSPVAIInfoRsq_CSPVAIInfo::kLvFieldNumber;
#endif  // !_MSC_VER

CSPVAIInfoRsq_CSPVAIInfo::CSPVAIInfoRsq_CSPVAIInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVAIInfoRsq_CSPVAIInfo::InitAsDefaultInstance() {
}

CSPVAIInfoRsq_CSPVAIInfo::CSPVAIInfoRsq_CSPVAIInfo(const CSPVAIInfoRsq_CSPVAIInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVAIInfoRsq_CSPVAIInfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  rank_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVAIInfoRsq_CSPVAIInfo::~CSPVAIInfoRsq_CSPVAIInfo() {
  SharedDtor();
}

void CSPVAIInfoRsq_CSPVAIInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSPVAIInfoRsq_CSPVAIInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVAIInfoRsq_CSPVAIInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVAIInfoRsq_CSPVAIInfo_descriptor_;
}

const CSPVAIInfoRsq_CSPVAIInfo& CSPVAIInfoRsq_CSPVAIInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVAIInfoRsq_CSPVAIInfo* CSPVAIInfoRsq_CSPVAIInfo::default_instance_ = NULL;

CSPVAIInfoRsq_CSPVAIInfo* CSPVAIInfoRsq_CSPVAIInfo::New() const {
  return new CSPVAIInfoRsq_CSPVAIInfo;
}

void CSPVAIInfoRsq_CSPVAIInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    rank_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0u;
    lv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVAIInfoRsq_CSPVAIInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }

      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // required uint32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // required uint32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lv;
        break;
      }

      // required uint32 lv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPVAIInfoRsq_CSPVAIInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }

  // required uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // required uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  // required uint32 lv = 6;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVAIInfoRsq_CSPVAIInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }

  // required uint32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // required uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  // required uint32 lv = 6;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVAIInfoRsq_CSPVAIInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }

    // required uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 lv = 6;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVAIInfoRsq_CSPVAIInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVAIInfoRsq_CSPVAIInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVAIInfoRsq_CSPVAIInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVAIInfoRsq_CSPVAIInfo::MergeFrom(const CSPVAIInfoRsq_CSPVAIInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVAIInfoRsq_CSPVAIInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVAIInfoRsq_CSPVAIInfo::CopyFrom(const CSPVAIInfoRsq_CSPVAIInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVAIInfoRsq_CSPVAIInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CSPVAIInfoRsq_CSPVAIInfo::Swap(CSPVAIInfoRsq_CSPVAIInfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVAIInfoRsq_CSPVAIInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVAIInfoRsq_CSPVAIInfo_descriptor_;
  metadata.reflection = CSPVAIInfoRsq_CSPVAIInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSPVAIInfoRsq_CSPVAILog::kNameFieldNumber;
const int CSPVAIInfoRsq_CSPVAILog::kDirectFieldNumber;
const int CSPVAIInfoRsq_CSPVAILog::kWinFieldNumber;
#endif  // !_MSC_VER

CSPVAIInfoRsq_CSPVAILog::CSPVAIInfoRsq_CSPVAILog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVAIInfoRsq_CSPVAILog::InitAsDefaultInstance() {
}

CSPVAIInfoRsq_CSPVAILog::CSPVAIInfoRsq_CSPVAILog(const CSPVAIInfoRsq_CSPVAILog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVAIInfoRsq_CSPVAILog::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  direct_ = false;
  win_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVAIInfoRsq_CSPVAILog::~CSPVAIInfoRsq_CSPVAILog() {
  SharedDtor();
}

void CSPVAIInfoRsq_CSPVAILog::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSPVAIInfoRsq_CSPVAILog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVAIInfoRsq_CSPVAILog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVAIInfoRsq_CSPVAILog_descriptor_;
}

const CSPVAIInfoRsq_CSPVAILog& CSPVAIInfoRsq_CSPVAILog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVAIInfoRsq_CSPVAILog* CSPVAIInfoRsq_CSPVAILog::default_instance_ = NULL;

CSPVAIInfoRsq_CSPVAILog* CSPVAIInfoRsq_CSPVAILog::New() const {
  return new CSPVAIInfoRsq_CSPVAILog;
}

void CSPVAIInfoRsq_CSPVAILog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    direct_ = false;
    win_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVAIInfoRsq_CSPVAILog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_direct;
        break;
      }

      // required bool direct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &direct_)));
          set_has_direct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win;
        break;
      }

      // required bool win = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPVAIInfoRsq_CSPVAILog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required bool direct = 2;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->direct(), output);
  }

  // required bool win = 3;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->win(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVAIInfoRsq_CSPVAILog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required bool direct = 2;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->direct(), target);
  }

  // required bool win = 3;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->win(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVAIInfoRsq_CSPVAILog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required bool direct = 2;
    if (has_direct()) {
      total_size += 1 + 1;
    }

    // required bool win = 3;
    if (has_win()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVAIInfoRsq_CSPVAILog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVAIInfoRsq_CSPVAILog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVAIInfoRsq_CSPVAILog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVAIInfoRsq_CSPVAILog::MergeFrom(const CSPVAIInfoRsq_CSPVAILog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_direct()) {
      set_direct(from.direct());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVAIInfoRsq_CSPVAILog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVAIInfoRsq_CSPVAILog::CopyFrom(const CSPVAIInfoRsq_CSPVAILog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVAIInfoRsq_CSPVAILog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSPVAIInfoRsq_CSPVAILog::Swap(CSPVAIInfoRsq_CSPVAILog* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(direct_, other->direct_);
    std::swap(win_, other->win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVAIInfoRsq_CSPVAILog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVAIInfoRsq_CSPVAILog_descriptor_;
  metadata.reflection = CSPVAIInfoRsq_CSPVAILog_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSPVAIInfoRsq::kRankFieldNumber;
const int CSPVAIInfoRsq::kInfosFieldNumber;
const int CSPVAIInfoRsq::kLogsFieldNumber;
#endif  // !_MSC_VER

CSPVAIInfoRsq::CSPVAIInfoRsq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPVAIInfoRsq::InitAsDefaultInstance() {
}

CSPVAIInfoRsq::CSPVAIInfoRsq(const CSPVAIInfoRsq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPVAIInfoRsq::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPVAIInfoRsq::~CSPVAIInfoRsq() {
  SharedDtor();
}

void CSPVAIInfoRsq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPVAIInfoRsq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPVAIInfoRsq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPVAIInfoRsq_descriptor_;
}

const CSPVAIInfoRsq& CSPVAIInfoRsq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSPVAIInfoRsq* CSPVAIInfoRsq::default_instance_ = NULL;

CSPVAIInfoRsq* CSPVAIInfoRsq::New() const {
  return new CSPVAIInfoRsq;
}

void CSPVAIInfoRsq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
  }
  infos_.Clear();
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPVAIInfoRsq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .CSPVAIInfoRsq.CSPVAIInfo infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectTag(26)) goto parse_logs;
        break;
      }

      // repeated .CSPVAIInfoRsq.CSPVAILog logs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_logs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPVAIInfoRsq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // repeated .CSPVAIInfoRsq.CSPVAIInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  // repeated .CSPVAIInfoRsq.CSPVAILog logs = 3;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->logs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPVAIInfoRsq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // repeated .CSPVAIInfoRsq.CSPVAIInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  // repeated .CSPVAIInfoRsq.CSPVAILog logs = 3;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->logs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPVAIInfoRsq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  // repeated .CSPVAIInfoRsq.CSPVAIInfo infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  // repeated .CSPVAIInfoRsq.CSPVAILog logs = 3;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPVAIInfoRsq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPVAIInfoRsq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPVAIInfoRsq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPVAIInfoRsq::MergeFrom(const CSPVAIInfoRsq& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  logs_.MergeFrom(from.logs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPVAIInfoRsq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPVAIInfoRsq::CopyFrom(const CSPVAIInfoRsq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPVAIInfoRsq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < logs_size(); i++) {
    if (!this->logs(i).IsInitialized()) return false;
  }
  return true;
}

void CSPVAIInfoRsq::Swap(CSPVAIInfoRsq* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    infos_.Swap(&other->infos_);
    logs_.Swap(&other->logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPVAIInfoRsq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPVAIInfoRsq_descriptor_;
  metadata.reflection = CSPVAIInfoRsq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSGetEquipLvUpCDReq::CSGetEquipLvUpCDReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetEquipLvUpCDReq::InitAsDefaultInstance() {
}

CSGetEquipLvUpCDReq::CSGetEquipLvUpCDReq(const CSGetEquipLvUpCDReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetEquipLvUpCDReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetEquipLvUpCDReq::~CSGetEquipLvUpCDReq() {
  SharedDtor();
}

void CSGetEquipLvUpCDReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetEquipLvUpCDReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetEquipLvUpCDReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetEquipLvUpCDReq_descriptor_;
}

const CSGetEquipLvUpCDReq& CSGetEquipLvUpCDReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSGetEquipLvUpCDReq* CSGetEquipLvUpCDReq::default_instance_ = NULL;

CSGetEquipLvUpCDReq* CSGetEquipLvUpCDReq::New() const {
  return new CSGetEquipLvUpCDReq;
}

void CSGetEquipLvUpCDReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetEquipLvUpCDReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSGetEquipLvUpCDReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetEquipLvUpCDReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetEquipLvUpCDReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetEquipLvUpCDReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetEquipLvUpCDReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetEquipLvUpCDReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetEquipLvUpCDReq::MergeFrom(const CSGetEquipLvUpCDReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetEquipLvUpCDReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetEquipLvUpCDReq::CopyFrom(const CSGetEquipLvUpCDReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetEquipLvUpCDReq::IsInitialized() const {

  return true;
}

void CSGetEquipLvUpCDReq::Swap(CSGetEquipLvUpCDReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetEquipLvUpCDReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetEquipLvUpCDReq_descriptor_;
  metadata.reflection = CSGetEquipLvUpCDReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetEquipLvUpCDRsp::kColdTimeFieldNumber;
#endif  // !_MSC_VER

CSGetEquipLvUpCDRsp::CSGetEquipLvUpCDRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetEquipLvUpCDRsp::InitAsDefaultInstance() {
}

CSGetEquipLvUpCDRsp::CSGetEquipLvUpCDRsp(const CSGetEquipLvUpCDRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetEquipLvUpCDRsp::SharedCtor() {
  _cached_size_ = 0;
  cold_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetEquipLvUpCDRsp::~CSGetEquipLvUpCDRsp() {
  SharedDtor();
}

void CSGetEquipLvUpCDRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetEquipLvUpCDRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetEquipLvUpCDRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetEquipLvUpCDRsp_descriptor_;
}

const CSGetEquipLvUpCDRsp& CSGetEquipLvUpCDRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSGetEquipLvUpCDRsp* CSGetEquipLvUpCDRsp::default_instance_ = NULL;

CSGetEquipLvUpCDRsp* CSGetEquipLvUpCDRsp::New() const {
  return new CSGetEquipLvUpCDRsp;
}

void CSGetEquipLvUpCDRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cold_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetEquipLvUpCDRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cold_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cold_time_)));
          set_has_cold_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetEquipLvUpCDRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cold_time = 1;
  if (has_cold_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cold_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetEquipLvUpCDRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cold_time = 1;
  if (has_cold_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cold_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetEquipLvUpCDRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cold_time = 1;
    if (has_cold_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cold_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetEquipLvUpCDRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetEquipLvUpCDRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetEquipLvUpCDRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetEquipLvUpCDRsp::MergeFrom(const CSGetEquipLvUpCDRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cold_time()) {
      set_cold_time(from.cold_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetEquipLvUpCDRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetEquipLvUpCDRsp::CopyFrom(const CSGetEquipLvUpCDRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetEquipLvUpCDRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSGetEquipLvUpCDRsp::Swap(CSGetEquipLvUpCDRsp* other) {
  if (other != this) {
    std::swap(cold_time_, other->cold_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetEquipLvUpCDRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetEquipLvUpCDRsp_descriptor_;
  metadata.reflection = CSGetEquipLvUpCDRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipInlayGemReq::kEquipPosFieldNumber;
const int CSEquipInlayGemReq::kGemIdFieldNumber;
const int CSEquipInlayGemReq::kHoleIndexFieldNumber;
#endif  // !_MSC_VER

CSEquipInlayGemReq::CSEquipInlayGemReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSEquipInlayGemReq::InitAsDefaultInstance() {
}

CSEquipInlayGemReq::CSEquipInlayGemReq(const CSEquipInlayGemReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipInlayGemReq::SharedCtor() {
  _cached_size_ = 0;
  equip_pos_ = 0u;
  gem_id_ = 0u;
  hole_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipInlayGemReq::~CSEquipInlayGemReq() {
  SharedDtor();
}

void CSEquipInlayGemReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSEquipInlayGemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSEquipInlayGemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSEquipInlayGemReq_descriptor_;
}

const CSEquipInlayGemReq& CSEquipInlayGemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSEquipInlayGemReq* CSEquipInlayGemReq::default_instance_ = NULL;

CSEquipInlayGemReq* CSEquipInlayGemReq::New() const {
  return new CSEquipInlayGemReq;
}

void CSEquipInlayGemReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_pos_ = 0u;
    gem_id_ = 0u;
    hole_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSEquipInlayGemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 equip_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gem_id;
        break;
      }

      // required uint32 gem_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gem_id_)));
          set_has_gem_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hole_index;
        break;
      }

      // required uint32 hole_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hole_index_)));
          set_has_hole_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipInlayGemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 equip_pos = 1;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equip_pos(), output);
  }

  // required uint32 gem_id = 2;
  if (has_gem_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gem_id(), output);
  }

  // required uint32 hole_index = 3;
  if (has_hole_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hole_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSEquipInlayGemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 equip_pos = 1;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equip_pos(), target);
  }

  // required uint32 gem_id = 2;
  if (has_gem_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gem_id(), target);
  }

  // required uint32 hole_index = 3;
  if (has_hole_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hole_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSEquipInlayGemReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 equip_pos = 1;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_pos());
    }

    // required uint32 gem_id = 2;
    if (has_gem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gem_id());
    }

    // required uint32 hole_index = 3;
    if (has_hole_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hole_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipInlayGemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSEquipInlayGemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSEquipInlayGemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSEquipInlayGemReq::MergeFrom(const CSEquipInlayGemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_gem_id()) {
      set_gem_id(from.gem_id());
    }
    if (from.has_hole_index()) {
      set_hole_index(from.hole_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSEquipInlayGemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSEquipInlayGemReq::CopyFrom(const CSEquipInlayGemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipInlayGemReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSEquipInlayGemReq::Swap(CSEquipInlayGemReq* other) {
  if (other != this) {
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(gem_id_, other->gem_id_);
    std::swap(hole_index_, other->hole_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSEquipInlayGemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSEquipInlayGemReq_descriptor_;
  metadata.reflection = CSEquipInlayGemReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipInlayGemRsp::kRetFieldNumber;
#endif  // !_MSC_VER

CSEquipInlayGemRsp::CSEquipInlayGemRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSEquipInlayGemRsp::InitAsDefaultInstance() {
}

CSEquipInlayGemRsp::CSEquipInlayGemRsp(const CSEquipInlayGemRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipInlayGemRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipInlayGemRsp::~CSEquipInlayGemRsp() {
  SharedDtor();
}

void CSEquipInlayGemRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSEquipInlayGemRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSEquipInlayGemRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSEquipInlayGemRsp_descriptor_;
}

const CSEquipInlayGemRsp& CSEquipInlayGemRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSEquipInlayGemRsp* CSEquipInlayGemRsp::default_instance_ = NULL;

CSEquipInlayGemRsp* CSEquipInlayGemRsp::New() const {
  return new CSEquipInlayGemRsp;
}

void CSEquipInlayGemRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSEquipInlayGemRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipInlayGemRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSEquipInlayGemRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSEquipInlayGemRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipInlayGemRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSEquipInlayGemRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSEquipInlayGemRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSEquipInlayGemRsp::MergeFrom(const CSEquipInlayGemRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSEquipInlayGemRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSEquipInlayGemRsp::CopyFrom(const CSEquipInlayGemRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipInlayGemRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSEquipInlayGemRsp::Swap(CSEquipInlayGemRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSEquipInlayGemRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSEquipInlayGemRsp_descriptor_;
  metadata.reflection = CSEquipInlayGemRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSResetGemAttrReq::kEquipPosFieldNumber;
const int CSResetGemAttrReq::kHolesIndexFieldNumber;
const int CSResetGemAttrReq::kCostAttrKeyFieldNumber;
#endif  // !_MSC_VER

CSResetGemAttrReq::CSResetGemAttrReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSResetGemAttrReq::InitAsDefaultInstance() {
}

CSResetGemAttrReq::CSResetGemAttrReq(const CSResetGemAttrReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSResetGemAttrReq::SharedCtor() {
  _cached_size_ = 0;
  equip_pos_ = 0u;
  cost_attr_key_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSResetGemAttrReq::~CSResetGemAttrReq() {
  SharedDtor();
}

void CSResetGemAttrReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSResetGemAttrReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSResetGemAttrReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSResetGemAttrReq_descriptor_;
}

const CSResetGemAttrReq& CSResetGemAttrReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSResetGemAttrReq* CSResetGemAttrReq::default_instance_ = NULL;

CSResetGemAttrReq* CSResetGemAttrReq::New() const {
  return new CSResetGemAttrReq;
}

void CSResetGemAttrReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_pos_ = 0u;
    cost_attr_key_ = 0u;
  }
  holes_index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSResetGemAttrReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 equip_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_holes_index;
        break;
      }

      // repeated uint32 holes_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holes_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_holes_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_holes_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_holes_index;
        if (input->ExpectTag(24)) goto parse_cost_attr_key;
        break;
      }

      // optional uint32 cost_attr_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_attr_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_attr_key_)));
          set_has_cost_attr_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSResetGemAttrReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 equip_pos = 1;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equip_pos(), output);
  }

  // repeated uint32 holes_index = 2;
  for (int i = 0; i < this->holes_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->holes_index(i), output);
  }

  // optional uint32 cost_attr_key = 3;
  if (has_cost_attr_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cost_attr_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSResetGemAttrReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 equip_pos = 1;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equip_pos(), target);
  }

  // repeated uint32 holes_index = 2;
  for (int i = 0; i < this->holes_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->holes_index(i), target);
  }

  // optional uint32 cost_attr_key = 3;
  if (has_cost_attr_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cost_attr_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSResetGemAttrReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 equip_pos = 1;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_pos());
    }

    // optional uint32 cost_attr_key = 3;
    if (has_cost_attr_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_attr_key());
    }

  }
  // repeated uint32 holes_index = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->holes_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->holes_index(i));
    }
    total_size += 1 * this->holes_index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSResetGemAttrReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSResetGemAttrReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSResetGemAttrReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSResetGemAttrReq::MergeFrom(const CSResetGemAttrReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  holes_index_.MergeFrom(from.holes_index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_cost_attr_key()) {
      set_cost_attr_key(from.cost_attr_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSResetGemAttrReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSResetGemAttrReq::CopyFrom(const CSResetGemAttrReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSResetGemAttrReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSResetGemAttrReq::Swap(CSResetGemAttrReq* other) {
  if (other != this) {
    std::swap(equip_pos_, other->equip_pos_);
    holes_index_.Swap(&other->holes_index_);
    std::swap(cost_attr_key_, other->cost_attr_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSResetGemAttrReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSResetGemAttrReq_descriptor_;
  metadata.reflection = CSResetGemAttrReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSResetGemAttrRsp::kRetFieldNumber;
#endif  // !_MSC_VER

CSResetGemAttrRsp::CSResetGemAttrRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSResetGemAttrRsp::InitAsDefaultInstance() {
}

CSResetGemAttrRsp::CSResetGemAttrRsp(const CSResetGemAttrRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSResetGemAttrRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSResetGemAttrRsp::~CSResetGemAttrRsp() {
  SharedDtor();
}

void CSResetGemAttrRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSResetGemAttrRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSResetGemAttrRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSResetGemAttrRsp_descriptor_;
}

const CSResetGemAttrRsp& CSResetGemAttrRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSResetGemAttrRsp* CSResetGemAttrRsp::default_instance_ = NULL;

CSResetGemAttrRsp* CSResetGemAttrRsp::New() const {
  return new CSResetGemAttrRsp;
}

void CSResetGemAttrRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSResetGemAttrRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSResetGemAttrRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSResetGemAttrRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSResetGemAttrRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSResetGemAttrRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSResetGemAttrRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSResetGemAttrRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSResetGemAttrRsp::MergeFrom(const CSResetGemAttrRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSResetGemAttrRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSResetGemAttrRsp::CopyFrom(const CSResetGemAttrRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSResetGemAttrRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSResetGemAttrRsp::Swap(CSResetGemAttrRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSResetGemAttrRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSResetGemAttrRsp_descriptor_;
  metadata.reflection = CSResetGemAttrRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipmentStrengthReq::kPosFieldNumber;
#endif  // !_MSC_VER

CSEquipmentStrengthReq::CSEquipmentStrengthReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSEquipmentStrengthReq::InitAsDefaultInstance() {
}

CSEquipmentStrengthReq::CSEquipmentStrengthReq(const CSEquipmentStrengthReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipmentStrengthReq::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipmentStrengthReq::~CSEquipmentStrengthReq() {
  SharedDtor();
}

void CSEquipmentStrengthReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSEquipmentStrengthReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSEquipmentStrengthReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSEquipmentStrengthReq_descriptor_;
}

const CSEquipmentStrengthReq& CSEquipmentStrengthReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSEquipmentStrengthReq* CSEquipmentStrengthReq::default_instance_ = NULL;

CSEquipmentStrengthReq* CSEquipmentStrengthReq::New() const {
  return new CSEquipmentStrengthReq;
}

void CSEquipmentStrengthReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSEquipmentStrengthReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipmentStrengthReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSEquipmentStrengthReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSEquipmentStrengthReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipmentStrengthReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSEquipmentStrengthReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSEquipmentStrengthReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSEquipmentStrengthReq::MergeFrom(const CSEquipmentStrengthReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSEquipmentStrengthReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSEquipmentStrengthReq::CopyFrom(const CSEquipmentStrengthReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipmentStrengthReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSEquipmentStrengthReq::Swap(CSEquipmentStrengthReq* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSEquipmentStrengthReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSEquipmentStrengthReq_descriptor_;
  metadata.reflection = CSEquipmentStrengthReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipmentStrengthRsp::kResultFieldNumber;
const int CSEquipmentStrengthRsp::kPosFieldNumber;
const int CSEquipmentStrengthRsp::kColdTimeFieldNumber;
#endif  // !_MSC_VER

CSEquipmentStrengthRsp::CSEquipmentStrengthRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSEquipmentStrengthRsp::InitAsDefaultInstance() {
}

CSEquipmentStrengthRsp::CSEquipmentStrengthRsp(const CSEquipmentStrengthRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipmentStrengthRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pos_ = 0u;
  cold_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipmentStrengthRsp::~CSEquipmentStrengthRsp() {
  SharedDtor();
}

void CSEquipmentStrengthRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSEquipmentStrengthRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSEquipmentStrengthRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSEquipmentStrengthRsp_descriptor_;
}

const CSEquipmentStrengthRsp& CSEquipmentStrengthRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSEquipmentStrengthRsp* CSEquipmentStrengthRsp::default_instance_ = NULL;

CSEquipmentStrengthRsp* CSEquipmentStrengthRsp::New() const {
  return new CSEquipmentStrengthRsp;
}

void CSEquipmentStrengthRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    pos_ = 0u;
    cold_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSEquipmentStrengthRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // required uint32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cold_time;
        break;
      }

      // required uint32 cold_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cold_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cold_time_)));
          set_has_cold_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipmentStrengthRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // required uint32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // required uint32 cold_time = 3;
  if (has_cold_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cold_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSEquipmentStrengthRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // required uint32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // required uint32 cold_time = 3;
  if (has_cold_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cold_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSEquipmentStrengthRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // required uint32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required uint32 cold_time = 3;
    if (has_cold_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cold_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipmentStrengthRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSEquipmentStrengthRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSEquipmentStrengthRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSEquipmentStrengthRsp::MergeFrom(const CSEquipmentStrengthRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_cold_time()) {
      set_cold_time(from.cold_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSEquipmentStrengthRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSEquipmentStrengthRsp::CopyFrom(const CSEquipmentStrengthRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipmentStrengthRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSEquipmentStrengthRsp::Swap(CSEquipmentStrengthRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pos_, other->pos_);
    std::swap(cold_time_, other->cold_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSEquipmentStrengthRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSEquipmentStrengthRsp_descriptor_;
  metadata.reflection = CSEquipmentStrengthRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipmentComposeReq::kExchangeItemIdFieldNumber;
const int CSEquipmentComposeReq::kFromItemPosFieldNumber;
const int CSEquipmentComposeReq::kMultiFieldNumber;
#endif  // !_MSC_VER

CSEquipmentComposeReq::CSEquipmentComposeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSEquipmentComposeReq::InitAsDefaultInstance() {
}

CSEquipmentComposeReq::CSEquipmentComposeReq(const CSEquipmentComposeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipmentComposeReq::SharedCtor() {
  _cached_size_ = 0;
  exchange_item_id_ = 0u;
  multi_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipmentComposeReq::~CSEquipmentComposeReq() {
  SharedDtor();
}

void CSEquipmentComposeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSEquipmentComposeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSEquipmentComposeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSEquipmentComposeReq_descriptor_;
}

const CSEquipmentComposeReq& CSEquipmentComposeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSEquipmentComposeReq* CSEquipmentComposeReq::default_instance_ = NULL;

CSEquipmentComposeReq* CSEquipmentComposeReq::New() const {
  return new CSEquipmentComposeReq;
}

void CSEquipmentComposeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exchange_item_id_ = 0u;
    multi_ = 1u;
  }
  from_item_pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSEquipmentComposeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 exchange_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exchange_item_id_)));
          set_has_exchange_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_from_item_pos;
        break;
      }

      // repeated uint32 from_item_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_item_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_from_item_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_from_item_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_from_item_pos;
        if (input->ExpectTag(24)) goto parse_multi;
        break;
      }

      // optional uint32 multi = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multi_)));
          set_has_multi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipmentComposeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 exchange_item_id = 1;
  if (has_exchange_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exchange_item_id(), output);
  }

  // repeated uint32 from_item_pos = 2;
  for (int i = 0; i < this->from_item_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->from_item_pos(i), output);
  }

  // optional uint32 multi = 3 [default = 1];
  if (has_multi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->multi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSEquipmentComposeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 exchange_item_id = 1;
  if (has_exchange_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exchange_item_id(), target);
  }

  // repeated uint32 from_item_pos = 2;
  for (int i = 0; i < this->from_item_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->from_item_pos(i), target);
  }

  // optional uint32 multi = 3 [default = 1];
  if (has_multi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->multi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSEquipmentComposeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 exchange_item_id = 1;
    if (has_exchange_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exchange_item_id());
    }

    // optional uint32 multi = 3 [default = 1];
    if (has_multi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multi());
    }

  }
  // repeated uint32 from_item_pos = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->from_item_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->from_item_pos(i));
    }
    total_size += 1 * this->from_item_pos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipmentComposeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSEquipmentComposeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSEquipmentComposeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSEquipmentComposeReq::MergeFrom(const CSEquipmentComposeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  from_item_pos_.MergeFrom(from.from_item_pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchange_item_id()) {
      set_exchange_item_id(from.exchange_item_id());
    }
    if (from.has_multi()) {
      set_multi(from.multi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSEquipmentComposeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSEquipmentComposeReq::CopyFrom(const CSEquipmentComposeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipmentComposeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSEquipmentComposeReq::Swap(CSEquipmentComposeReq* other) {
  if (other != this) {
    std::swap(exchange_item_id_, other->exchange_item_id_);
    from_item_pos_.Swap(&other->from_item_pos_);
    std::swap(multi_, other->multi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSEquipmentComposeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSEquipmentComposeReq_descriptor_;
  metadata.reflection = CSEquipmentComposeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipmentComposeRsp::kExchangeItemIdFieldNumber;
const int CSEquipmentComposeRsp::kResultFieldNumber;
#endif  // !_MSC_VER

CSEquipmentComposeRsp::CSEquipmentComposeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSEquipmentComposeRsp::InitAsDefaultInstance() {
}

CSEquipmentComposeRsp::CSEquipmentComposeRsp(const CSEquipmentComposeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipmentComposeRsp::SharedCtor() {
  _cached_size_ = 0;
  exchange_item_id_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipmentComposeRsp::~CSEquipmentComposeRsp() {
  SharedDtor();
}

void CSEquipmentComposeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSEquipmentComposeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSEquipmentComposeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSEquipmentComposeRsp_descriptor_;
}

const CSEquipmentComposeRsp& CSEquipmentComposeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSEquipmentComposeRsp* CSEquipmentComposeRsp::default_instance_ = NULL;

CSEquipmentComposeRsp* CSEquipmentComposeRsp::New() const {
  return new CSEquipmentComposeRsp;
}

void CSEquipmentComposeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exchange_item_id_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSEquipmentComposeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 exchange_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exchange_item_id_)));
          set_has_exchange_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipmentComposeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 exchange_item_id = 1;
  if (has_exchange_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exchange_item_id(), output);
  }

  // required uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSEquipmentComposeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 exchange_item_id = 1;
  if (has_exchange_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exchange_item_id(), target);
  }

  // required uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSEquipmentComposeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 exchange_item_id = 1;
    if (has_exchange_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exchange_item_id());
    }

    // required uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipmentComposeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSEquipmentComposeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSEquipmentComposeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSEquipmentComposeRsp::MergeFrom(const CSEquipmentComposeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchange_item_id()) {
      set_exchange_item_id(from.exchange_item_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSEquipmentComposeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSEquipmentComposeRsp::CopyFrom(const CSEquipmentComposeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipmentComposeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSEquipmentComposeRsp::Swap(CSEquipmentComposeRsp* other) {
  if (other != this) {
    std::swap(exchange_item_id_, other->exchange_item_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSEquipmentComposeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSEquipmentComposeRsp_descriptor_;
  metadata.reflection = CSEquipmentComposeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSTaskInfoReq::CSTaskInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSTaskInfoReq::InitAsDefaultInstance() {
}

CSTaskInfoReq::CSTaskInfoReq(const CSTaskInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSTaskInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSTaskInfoReq::~CSTaskInfoReq() {
  SharedDtor();
}

void CSTaskInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSTaskInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSTaskInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSTaskInfoReq_descriptor_;
}

const CSTaskInfoReq& CSTaskInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSTaskInfoReq* CSTaskInfoReq::default_instance_ = NULL;

CSTaskInfoReq* CSTaskInfoReq::New() const {
  return new CSTaskInfoReq;
}

void CSTaskInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSTaskInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSTaskInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSTaskInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSTaskInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSTaskInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSTaskInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSTaskInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSTaskInfoReq::MergeFrom(const CSTaskInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSTaskInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTaskInfoReq::CopyFrom(const CSTaskInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTaskInfoReq::IsInitialized() const {

  return true;
}

void CSTaskInfoReq::Swap(CSTaskInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSTaskInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSTaskInfoReq_descriptor_;
  metadata.reflection = CSTaskInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskInfo::kTaskIdFieldNumber;
const int TaskInfo::kStepIdFieldNumber;
const int TaskInfo::kStepValueFieldNumber;
#endif  // !_MSC_VER

TaskInfo::TaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskInfo::InitAsDefaultInstance() {
}

TaskInfo::TaskInfo(const TaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskInfo::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  step_id_ = 0u;
  step_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskInfo::~TaskInfo() {
  SharedDtor();
}

void TaskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskInfo_descriptor_;
}

const TaskInfo& TaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

TaskInfo* TaskInfo::default_instance_ = NULL;

TaskInfo* TaskInfo::New() const {
  return new TaskInfo;
}

void TaskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    step_id_ = 0u;
    step_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_step_id;
        break;
      }

      // required uint32 step_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_id_)));
          set_has_step_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_step_value;
        break;
      }

      // required uint32 step_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_value_)));
          set_has_step_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }

  // required uint32 step_id = 2;
  if (has_step_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->step_id(), output);
  }

  // required uint32 step_value = 3;
  if (has_step_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->step_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }

  // required uint32 step_id = 2;
  if (has_step_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->step_id(), target);
  }

  // required uint32 step_value = 3;
  if (has_step_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->step_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // required uint32 step_id = 2;
    if (has_step_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_id());
    }

    // required uint32 step_value = 3;
    if (has_step_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskInfo::MergeFrom(const TaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_step_id()) {
      set_step_id(from.step_id());
    }
    if (from.has_step_value()) {
      set_step_value(from.step_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskInfo::CopyFrom(const TaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TaskInfo::Swap(TaskInfo* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(step_id_, other->step_id_);
    std::swap(step_value_, other->step_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskInfo_descriptor_;
  metadata.reflection = TaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSTaskInfoRsp::kAcceptableTasksFieldNumber;
const int CSTaskInfoRsp::kAcceptTasksFieldNumber;
#endif  // !_MSC_VER

CSTaskInfoRsp::CSTaskInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSTaskInfoRsp::InitAsDefaultInstance() {
}

CSTaskInfoRsp::CSTaskInfoRsp(const CSTaskInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSTaskInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSTaskInfoRsp::~CSTaskInfoRsp() {
  SharedDtor();
}

void CSTaskInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSTaskInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSTaskInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSTaskInfoRsp_descriptor_;
}

const CSTaskInfoRsp& CSTaskInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSTaskInfoRsp* CSTaskInfoRsp::default_instance_ = NULL;

CSTaskInfoRsp* CSTaskInfoRsp::New() const {
  return new CSTaskInfoRsp;
}

void CSTaskInfoRsp::Clear() {
  acceptable_tasks_.Clear();
  accept_tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSTaskInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 acceptable_tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acceptable_tasks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_acceptable_tasks())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_acceptable_tasks())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_acceptable_tasks;
        if (input->ExpectTag(18)) goto parse_accept_tasks;
        break;
      }

      // repeated .TaskInfo accept_tasks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accept_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accept_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_accept_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSTaskInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 acceptable_tasks = 1;
  for (int i = 0; i < this->acceptable_tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->acceptable_tasks(i), output);
  }

  // repeated .TaskInfo accept_tasks = 2;
  for (int i = 0; i < this->accept_tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->accept_tasks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSTaskInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 acceptable_tasks = 1;
  for (int i = 0; i < this->acceptable_tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->acceptable_tasks(i), target);
  }

  // repeated .TaskInfo accept_tasks = 2;
  for (int i = 0; i < this->accept_tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->accept_tasks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSTaskInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 acceptable_tasks = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->acceptable_tasks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->acceptable_tasks(i));
    }
    total_size += 1 * this->acceptable_tasks_size() + data_size;
  }

  // repeated .TaskInfo accept_tasks = 2;
  total_size += 1 * this->accept_tasks_size();
  for (int i = 0; i < this->accept_tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accept_tasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSTaskInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSTaskInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSTaskInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSTaskInfoRsp::MergeFrom(const CSTaskInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  acceptable_tasks_.MergeFrom(from.acceptable_tasks_);
  accept_tasks_.MergeFrom(from.accept_tasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSTaskInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTaskInfoRsp::CopyFrom(const CSTaskInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTaskInfoRsp::IsInitialized() const {

  for (int i = 0; i < accept_tasks_size(); i++) {
    if (!this->accept_tasks(i).IsInitialized()) return false;
  }
  return true;
}

void CSTaskInfoRsp::Swap(CSTaskInfoRsp* other) {
  if (other != this) {
    acceptable_tasks_.Swap(&other->acceptable_tasks_);
    accept_tasks_.Swap(&other->accept_tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSTaskInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSTaskInfoRsp_descriptor_;
  metadata.reflection = CSTaskInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSTaskDoStepReq::kTaskIdFieldNumber;
const int CSTaskDoStepReq::kStepIdFieldNumber;
const int CSTaskDoStepReq::kStepValueFieldNumber;
#endif  // !_MSC_VER

CSTaskDoStepReq::CSTaskDoStepReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSTaskDoStepReq::InitAsDefaultInstance() {
}

CSTaskDoStepReq::CSTaskDoStepReq(const CSTaskDoStepReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSTaskDoStepReq::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  step_id_ = 0u;
  step_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSTaskDoStepReq::~CSTaskDoStepReq() {
  SharedDtor();
}

void CSTaskDoStepReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSTaskDoStepReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSTaskDoStepReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSTaskDoStepReq_descriptor_;
}

const CSTaskDoStepReq& CSTaskDoStepReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSTaskDoStepReq* CSTaskDoStepReq::default_instance_ = NULL;

CSTaskDoStepReq* CSTaskDoStepReq::New() const {
  return new CSTaskDoStepReq;
}

void CSTaskDoStepReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    step_id_ = 0u;
    step_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSTaskDoStepReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_step_id;
        break;
      }

      // required uint32 step_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_id_)));
          set_has_step_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_step_value;
        break;
      }

      // required uint32 step_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_value_)));
          set_has_step_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSTaskDoStepReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }

  // required uint32 step_id = 2;
  if (has_step_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->step_id(), output);
  }

  // required uint32 step_value = 3;
  if (has_step_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->step_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSTaskDoStepReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }

  // required uint32 step_id = 2;
  if (has_step_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->step_id(), target);
  }

  // required uint32 step_value = 3;
  if (has_step_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->step_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSTaskDoStepReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // required uint32 step_id = 2;
    if (has_step_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_id());
    }

    // required uint32 step_value = 3;
    if (has_step_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSTaskDoStepReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSTaskDoStepReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSTaskDoStepReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSTaskDoStepReq::MergeFrom(const CSTaskDoStepReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_step_id()) {
      set_step_id(from.step_id());
    }
    if (from.has_step_value()) {
      set_step_value(from.step_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSTaskDoStepReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTaskDoStepReq::CopyFrom(const CSTaskDoStepReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTaskDoStepReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSTaskDoStepReq::Swap(CSTaskDoStepReq* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(step_id_, other->step_id_);
    std::swap(step_value_, other->step_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSTaskDoStepReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSTaskDoStepReq_descriptor_;
  metadata.reflection = CSTaskDoStepReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSTaskDoStepRsp::kTaskIdFieldNumber;
const int CSTaskDoStepRsp::kStepIdFieldNumber;
const int CSTaskDoStepRsp::kStepValueFieldNumber;
#endif  // !_MSC_VER

CSTaskDoStepRsp::CSTaskDoStepRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSTaskDoStepRsp::InitAsDefaultInstance() {
}

CSTaskDoStepRsp::CSTaskDoStepRsp(const CSTaskDoStepRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSTaskDoStepRsp::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  step_id_ = 0u;
  step_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSTaskDoStepRsp::~CSTaskDoStepRsp() {
  SharedDtor();
}

void CSTaskDoStepRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSTaskDoStepRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSTaskDoStepRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSTaskDoStepRsp_descriptor_;
}

const CSTaskDoStepRsp& CSTaskDoStepRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSTaskDoStepRsp* CSTaskDoStepRsp::default_instance_ = NULL;

CSTaskDoStepRsp* CSTaskDoStepRsp::New() const {
  return new CSTaskDoStepRsp;
}

void CSTaskDoStepRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    step_id_ = 0u;
    step_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSTaskDoStepRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_step_id;
        break;
      }

      // required uint32 step_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_id_)));
          set_has_step_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_step_value;
        break;
      }

      // required uint32 step_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_value_)));
          set_has_step_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSTaskDoStepRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }

  // required uint32 step_id = 2;
  if (has_step_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->step_id(), output);
  }

  // required uint32 step_value = 3;
  if (has_step_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->step_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSTaskDoStepRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }

  // required uint32 step_id = 2;
  if (has_step_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->step_id(), target);
  }

  // required uint32 step_value = 3;
  if (has_step_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->step_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSTaskDoStepRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // required uint32 step_id = 2;
    if (has_step_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_id());
    }

    // required uint32 step_value = 3;
    if (has_step_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSTaskDoStepRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSTaskDoStepRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSTaskDoStepRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSTaskDoStepRsp::MergeFrom(const CSTaskDoStepRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_step_id()) {
      set_step_id(from.step_id());
    }
    if (from.has_step_value()) {
      set_step_value(from.step_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSTaskDoStepRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTaskDoStepRsp::CopyFrom(const CSTaskDoStepRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTaskDoStepRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSTaskDoStepRsp::Swap(CSTaskDoStepRsp* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(step_id_, other->step_id_);
    std::swap(step_value_, other->step_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSTaskDoStepRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSTaskDoStepRsp_descriptor_;
  metadata.reflection = CSTaskDoStepRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSTaskLogReq::CSTaskLogReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSTaskLogReq::InitAsDefaultInstance() {
}

CSTaskLogReq::CSTaskLogReq(const CSTaskLogReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSTaskLogReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSTaskLogReq::~CSTaskLogReq() {
  SharedDtor();
}

void CSTaskLogReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSTaskLogReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSTaskLogReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSTaskLogReq_descriptor_;
}

const CSTaskLogReq& CSTaskLogReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSTaskLogReq* CSTaskLogReq::default_instance_ = NULL;

CSTaskLogReq* CSTaskLogReq::New() const {
  return new CSTaskLogReq;
}

void CSTaskLogReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSTaskLogReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSTaskLogReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSTaskLogReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSTaskLogReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSTaskLogReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSTaskLogReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSTaskLogReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSTaskLogReq::MergeFrom(const CSTaskLogReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSTaskLogReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTaskLogReq::CopyFrom(const CSTaskLogReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTaskLogReq::IsInitialized() const {

  return true;
}

void CSTaskLogReq::Swap(CSTaskLogReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSTaskLogReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSTaskLogReq_descriptor_;
  metadata.reflection = CSTaskLogReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSTaskLogRsp::kTasksFieldNumber;
#endif  // !_MSC_VER

CSTaskLogRsp::CSTaskLogRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSTaskLogRsp::InitAsDefaultInstance() {
}

CSTaskLogRsp::CSTaskLogRsp(const CSTaskLogRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSTaskLogRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSTaskLogRsp::~CSTaskLogRsp() {
  SharedDtor();
}

void CSTaskLogRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSTaskLogRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSTaskLogRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSTaskLogRsp_descriptor_;
}

const CSTaskLogRsp& CSTaskLogRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSTaskLogRsp* CSTaskLogRsp::default_instance_ = NULL;

CSTaskLogRsp* CSTaskLogRsp::New() const {
  return new CSTaskLogRsp;
}

void CSTaskLogRsp::Clear() {
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSTaskLogRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TaskInfo tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSTaskLogRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TaskInfo tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSTaskLogRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TaskInfo tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSTaskLogRsp::ByteSize() const {
  int total_size = 0;

  // repeated .TaskInfo tasks = 1;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSTaskLogRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSTaskLogRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSTaskLogRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSTaskLogRsp::MergeFrom(const CSTaskLogRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSTaskLogRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTaskLogRsp::CopyFrom(const CSTaskLogRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTaskLogRsp::IsInitialized() const {

  for (int i = 0; i < tasks_size(); i++) {
    if (!this->tasks(i).IsInitialized()) return false;
  }
  return true;
}

void CSTaskLogRsp::Swap(CSTaskLogRsp* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSTaskLogRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSTaskLogRsp_descriptor_;
  metadata.reflection = CSTaskLogRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSAttributesSetReq::kKeyFieldNumber;
const int CSAttributesSetReq::kValueFieldNumber;
#endif  // !_MSC_VER

CSAttributesSetReq::CSAttributesSetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSAttributesSetReq::InitAsDefaultInstance() {
}

CSAttributesSetReq::CSAttributesSetReq(const CSAttributesSetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSAttributesSetReq::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAttributesSetReq::~CSAttributesSetReq() {
  SharedDtor();
}

void CSAttributesSetReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSAttributesSetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSAttributesSetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSAttributesSetReq_descriptor_;
}

const CSAttributesSetReq& CSAttributesSetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSAttributesSetReq* CSAttributesSetReq::default_instance_ = NULL;

CSAttributesSetReq* CSAttributesSetReq::New() const {
  return new CSAttributesSetReq;
}

void CSAttributesSetReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSAttributesSetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAttributesSetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSAttributesSetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSAttributesSetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAttributesSetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSAttributesSetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSAttributesSetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSAttributesSetReq::MergeFrom(const CSAttributesSetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSAttributesSetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAttributesSetReq::CopyFrom(const CSAttributesSetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAttributesSetReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSAttributesSetReq::Swap(CSAttributesSetReq* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSAttributesSetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSAttributesSetReq_descriptor_;
  metadata.reflection = CSAttributesSetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSAttributesReq::kKeysFieldNumber;
#endif  // !_MSC_VER

CSAttributesReq::CSAttributesReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSAttributesReq::InitAsDefaultInstance() {
}

CSAttributesReq::CSAttributesReq(const CSAttributesReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSAttributesReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAttributesReq::~CSAttributesReq() {
  SharedDtor();
}

void CSAttributesReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSAttributesReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSAttributesReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSAttributesReq_descriptor_;
}

const CSAttributesReq& CSAttributesReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSAttributesReq* CSAttributesReq::default_instance_ = NULL;

CSAttributesReq* CSAttributesReq::New() const {
  return new CSAttributesReq;
}

void CSAttributesReq::Clear() {
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSAttributesReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 keys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_keys())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_keys())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_keys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAttributesReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->keys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSAttributesReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->keys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSAttributesReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 keys = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->keys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->keys(i));
    }
    total_size += 1 * this->keys_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAttributesReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSAttributesReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSAttributesReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSAttributesReq::MergeFrom(const CSAttributesReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSAttributesReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAttributesReq::CopyFrom(const CSAttributesReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAttributesReq::IsInitialized() const {

  return true;
}

void CSAttributesReq::Swap(CSAttributesReq* other) {
  if (other != this) {
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSAttributesReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSAttributesReq_descriptor_;
  metadata.reflection = CSAttributesReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSAttributesRsp_KeyValue::kKeyFieldNumber;
const int CSAttributesRsp_KeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

CSAttributesRsp_KeyValue::CSAttributesRsp_KeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSAttributesRsp_KeyValue::InitAsDefaultInstance() {
}

CSAttributesRsp_KeyValue::CSAttributesRsp_KeyValue(const CSAttributesRsp_KeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSAttributesRsp_KeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAttributesRsp_KeyValue::~CSAttributesRsp_KeyValue() {
  SharedDtor();
}

void CSAttributesRsp_KeyValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSAttributesRsp_KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSAttributesRsp_KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSAttributesRsp_KeyValue_descriptor_;
}

const CSAttributesRsp_KeyValue& CSAttributesRsp_KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSAttributesRsp_KeyValue* CSAttributesRsp_KeyValue::default_instance_ = NULL;

CSAttributesRsp_KeyValue* CSAttributesRsp_KeyValue::New() const {
  return new CSAttributesRsp_KeyValue;
}

void CSAttributesRsp_KeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSAttributesRsp_KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAttributesRsp_KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSAttributesRsp_KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSAttributesRsp_KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAttributesRsp_KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSAttributesRsp_KeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSAttributesRsp_KeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSAttributesRsp_KeyValue::MergeFrom(const CSAttributesRsp_KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSAttributesRsp_KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAttributesRsp_KeyValue::CopyFrom(const CSAttributesRsp_KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAttributesRsp_KeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSAttributesRsp_KeyValue::Swap(CSAttributesRsp_KeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSAttributesRsp_KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSAttributesRsp_KeyValue_descriptor_;
  metadata.reflection = CSAttributesRsp_KeyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSAttributesRsp::kValuesFieldNumber;
#endif  // !_MSC_VER

CSAttributesRsp::CSAttributesRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSAttributesRsp::InitAsDefaultInstance() {
}

CSAttributesRsp::CSAttributesRsp(const CSAttributesRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSAttributesRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAttributesRsp::~CSAttributesRsp() {
  SharedDtor();
}

void CSAttributesRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSAttributesRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSAttributesRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSAttributesRsp_descriptor_;
}

const CSAttributesRsp& CSAttributesRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSAttributesRsp* CSAttributesRsp::default_instance_ = NULL;

CSAttributesRsp* CSAttributesRsp::New() const {
  return new CSAttributesRsp;
}

void CSAttributesRsp::Clear() {
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSAttributesRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSAttributesRsp.KeyValue values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAttributesRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSAttributesRsp.KeyValue values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSAttributesRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSAttributesRsp.KeyValue values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSAttributesRsp::ByteSize() const {
  int total_size = 0;

  // repeated .CSAttributesRsp.KeyValue values = 1;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAttributesRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSAttributesRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSAttributesRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSAttributesRsp::MergeFrom(const CSAttributesRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSAttributesRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAttributesRsp::CopyFrom(const CSAttributesRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAttributesRsp::IsInitialized() const {

  for (int i = 0; i < values_size(); i++) {
    if (!this->values(i).IsInitialized()) return false;
  }
  return true;
}

void CSAttributesRsp::Swap(CSAttributesRsp* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSAttributesRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSAttributesRsp_descriptor_;
  metadata.reflection = CSAttributesRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOnceSetReq::kIndexFieldNumber;
#endif  // !_MSC_VER

CSOnceSetReq::CSOnceSetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOnceSetReq::InitAsDefaultInstance() {
}

CSOnceSetReq::CSOnceSetReq(const CSOnceSetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOnceSetReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOnceSetReq::~CSOnceSetReq() {
  SharedDtor();
}

void CSOnceSetReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOnceSetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOnceSetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOnceSetReq_descriptor_;
}

const CSOnceSetReq& CSOnceSetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSOnceSetReq* CSOnceSetReq::default_instance_ = NULL;

CSOnceSetReq* CSOnceSetReq::New() const {
  return new CSOnceSetReq;
}

void CSOnceSetReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOnceSetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOnceSetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOnceSetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOnceSetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOnceSetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOnceSetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOnceSetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOnceSetReq::MergeFrom(const CSOnceSetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOnceSetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOnceSetReq::CopyFrom(const CSOnceSetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOnceSetReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSOnceSetReq::Swap(CSOnceSetReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOnceSetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOnceSetReq_descriptor_;
  metadata.reflection = CSOnceSetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOnceReq::kIndexsFieldNumber;
#endif  // !_MSC_VER

CSOnceReq::CSOnceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOnceReq::InitAsDefaultInstance() {
}

CSOnceReq::CSOnceReq(const CSOnceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOnceReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOnceReq::~CSOnceReq() {
  SharedDtor();
}

void CSOnceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOnceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOnceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOnceReq_descriptor_;
}

const CSOnceReq& CSOnceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSOnceReq* CSOnceReq::default_instance_ = NULL;

CSOnceReq* CSOnceReq::New() const {
  return new CSOnceReq;
}

void CSOnceReq::Clear() {
  indexs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOnceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 indexs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_indexs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_indexs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_indexs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_indexs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOnceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 indexs = 1;
  for (int i = 0; i < this->indexs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->indexs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOnceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 indexs = 1;
  for (int i = 0; i < this->indexs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->indexs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOnceReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 indexs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->indexs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->indexs(i));
    }
    total_size += 1 * this->indexs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOnceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOnceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOnceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOnceReq::MergeFrom(const CSOnceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  indexs_.MergeFrom(from.indexs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOnceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOnceReq::CopyFrom(const CSOnceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOnceReq::IsInitialized() const {

  return true;
}

void CSOnceReq::Swap(CSOnceReq* other) {
  if (other != this) {
    indexs_.Swap(&other->indexs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOnceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOnceReq_descriptor_;
  metadata.reflection = CSOnceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOnceRsp_Once::kIndexFieldNumber;
const int CSOnceRsp_Once::kIsSetFieldNumber;
#endif  // !_MSC_VER

CSOnceRsp_Once::CSOnceRsp_Once()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOnceRsp_Once::InitAsDefaultInstance() {
}

CSOnceRsp_Once::CSOnceRsp_Once(const CSOnceRsp_Once& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOnceRsp_Once::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  is_set_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOnceRsp_Once::~CSOnceRsp_Once() {
  SharedDtor();
}

void CSOnceRsp_Once::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOnceRsp_Once::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOnceRsp_Once::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOnceRsp_Once_descriptor_;
}

const CSOnceRsp_Once& CSOnceRsp_Once::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSOnceRsp_Once* CSOnceRsp_Once::default_instance_ = NULL;

CSOnceRsp_Once* CSOnceRsp_Once::New() const {
  return new CSOnceRsp_Once;
}

void CSOnceRsp_Once::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    is_set_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOnceRsp_Once::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_set;
        break;
      }

      // required bool is_set = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_set_)));
          set_has_is_set();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOnceRsp_Once::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // required bool is_set = 2;
  if (has_is_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_set(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOnceRsp_Once::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // required bool is_set = 2;
  if (has_is_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_set(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOnceRsp_Once::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required bool is_set = 2;
    if (has_is_set()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOnceRsp_Once::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOnceRsp_Once* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOnceRsp_Once*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOnceRsp_Once::MergeFrom(const CSOnceRsp_Once& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_is_set()) {
      set_is_set(from.is_set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOnceRsp_Once::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOnceRsp_Once::CopyFrom(const CSOnceRsp_Once& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOnceRsp_Once::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSOnceRsp_Once::Swap(CSOnceRsp_Once* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(is_set_, other->is_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOnceRsp_Once::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOnceRsp_Once_descriptor_;
  metadata.reflection = CSOnceRsp_Once_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSOnceRsp::kValuesFieldNumber;
#endif  // !_MSC_VER

CSOnceRsp::CSOnceRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOnceRsp::InitAsDefaultInstance() {
}

CSOnceRsp::CSOnceRsp(const CSOnceRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOnceRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOnceRsp::~CSOnceRsp() {
  SharedDtor();
}

void CSOnceRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOnceRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOnceRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOnceRsp_descriptor_;
}

const CSOnceRsp& CSOnceRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSOnceRsp* CSOnceRsp::default_instance_ = NULL;

CSOnceRsp* CSOnceRsp::New() const {
  return new CSOnceRsp;
}

void CSOnceRsp::Clear() {
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOnceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSOnceRsp.Once values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOnceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSOnceRsp.Once values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOnceRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSOnceRsp.Once values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOnceRsp::ByteSize() const {
  int total_size = 0;

  // repeated .CSOnceRsp.Once values = 1;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOnceRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOnceRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOnceRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOnceRsp::MergeFrom(const CSOnceRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOnceRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOnceRsp::CopyFrom(const CSOnceRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOnceRsp::IsInitialized() const {

  for (int i = 0; i < values_size(); i++) {
    if (!this->values(i).IsInitialized()) return false;
  }
  return true;
}

void CSOnceRsp::Swap(CSOnceRsp* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOnceRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOnceRsp_descriptor_;
  metadata.reflection = CSOnceRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSTrainInfoReq::CSTrainInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSTrainInfoReq::InitAsDefaultInstance() {
}

CSTrainInfoReq::CSTrainInfoReq(const CSTrainInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSTrainInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSTrainInfoReq::~CSTrainInfoReq() {
  SharedDtor();
}

void CSTrainInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSTrainInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSTrainInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSTrainInfoReq_descriptor_;
}

const CSTrainInfoReq& CSTrainInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSTrainInfoReq* CSTrainInfoReq::default_instance_ = NULL;

CSTrainInfoReq* CSTrainInfoReq::New() const {
  return new CSTrainInfoReq;
}

void CSTrainInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSTrainInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSTrainInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSTrainInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSTrainInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSTrainInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSTrainInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSTrainInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSTrainInfoReq::MergeFrom(const CSTrainInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSTrainInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTrainInfoReq::CopyFrom(const CSTrainInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTrainInfoReq::IsInitialized() const {

  return true;
}

void CSTrainInfoReq::Swap(CSTrainInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSTrainInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSTrainInfoReq_descriptor_;
  metadata.reflection = CSTrainInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSTrainInfoRsp::kPotentialFieldNumber;
const int CSTrainInfoRsp::kCourageFieldNumber;
const int CSTrainInfoRsp::kCharmFieldNumber;
const int CSTrainInfoRsp::kTrickFieldNumber;
#endif  // !_MSC_VER

CSTrainInfoRsp::CSTrainInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSTrainInfoRsp::InitAsDefaultInstance() {
}

CSTrainInfoRsp::CSTrainInfoRsp(const CSTrainInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSTrainInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  potential_ = 0u;
  courage_ = 0u;
  charm_ = 0u;
  trick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSTrainInfoRsp::~CSTrainInfoRsp() {
  SharedDtor();
}

void CSTrainInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSTrainInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSTrainInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSTrainInfoRsp_descriptor_;
}

const CSTrainInfoRsp& CSTrainInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSTrainInfoRsp* CSTrainInfoRsp::default_instance_ = NULL;

CSTrainInfoRsp* CSTrainInfoRsp::New() const {
  return new CSTrainInfoRsp;
}

void CSTrainInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    potential_ = 0u;
    courage_ = 0u;
    charm_ = 0u;
    trick_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSTrainInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 potential = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &potential_)));
          set_has_potential();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_courage;
        break;
      }

      // required uint32 courage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_courage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &courage_)));
          set_has_courage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charm;
        break;
      }

      // required uint32 charm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charm_)));
          set_has_charm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_trick;
        break;
      }

      // required uint32 trick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trick_)));
          set_has_trick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSTrainInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 potential = 1;
  if (has_potential()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->potential(), output);
  }

  // required uint32 courage = 2;
  if (has_courage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->courage(), output);
  }

  // required uint32 charm = 3;
  if (has_charm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charm(), output);
  }

  // required uint32 trick = 4;
  if (has_trick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->trick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSTrainInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 potential = 1;
  if (has_potential()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->potential(), target);
  }

  // required uint32 courage = 2;
  if (has_courage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->courage(), target);
  }

  // required uint32 charm = 3;
  if (has_charm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->charm(), target);
  }

  // required uint32 trick = 4;
  if (has_trick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->trick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSTrainInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 potential = 1;
    if (has_potential()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->potential());
    }

    // required uint32 courage = 2;
    if (has_courage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->courage());
    }

    // required uint32 charm = 3;
    if (has_charm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charm());
    }

    // required uint32 trick = 4;
    if (has_trick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSTrainInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSTrainInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSTrainInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSTrainInfoRsp::MergeFrom(const CSTrainInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_potential()) {
      set_potential(from.potential());
    }
    if (from.has_courage()) {
      set_courage(from.courage());
    }
    if (from.has_charm()) {
      set_charm(from.charm());
    }
    if (from.has_trick()) {
      set_trick(from.trick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSTrainInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTrainInfoRsp::CopyFrom(const CSTrainInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTrainInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSTrainInfoRsp::Swap(CSTrainInfoRsp* other) {
  if (other != this) {
    std::swap(potential_, other->potential_);
    std::swap(courage_, other->courage_);
    std::swap(charm_, other->charm_);
    std::swap(trick_, other->trick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSTrainInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSTrainInfoRsp_descriptor_;
  metadata.reflection = CSTrainInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSTrainReq::kTypeFieldNumber;
#endif  // !_MSC_VER

CSTrainReq::CSTrainReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSTrainReq::InitAsDefaultInstance() {
}

CSTrainReq::CSTrainReq(const CSTrainReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSTrainReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSTrainReq::~CSTrainReq() {
  SharedDtor();
}

void CSTrainReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSTrainReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSTrainReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSTrainReq_descriptor_;
}

const CSTrainReq& CSTrainReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSTrainReq* CSTrainReq::default_instance_ = NULL;

CSTrainReq* CSTrainReq::New() const {
  return new CSTrainReq;
}

void CSTrainReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSTrainReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSTrainReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSTrainReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSTrainReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSTrainReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSTrainReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSTrainReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSTrainReq::MergeFrom(const CSTrainReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSTrainReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTrainReq::CopyFrom(const CSTrainReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTrainReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSTrainReq::Swap(CSTrainReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSTrainReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSTrainReq_descriptor_;
  metadata.reflection = CSTrainReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSTrainRsp::kCourageFieldNumber;
const int CSTrainRsp::kCharmFieldNumber;
const int CSTrainRsp::kTrickFieldNumber;
const int CSTrainRsp::kSuccFieldNumber;
#endif  // !_MSC_VER

CSTrainRsp::CSTrainRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSTrainRsp::InitAsDefaultInstance() {
}

CSTrainRsp::CSTrainRsp(const CSTrainRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSTrainRsp::SharedCtor() {
  _cached_size_ = 0;
  courage_ = 0;
  charm_ = 0;
  trick_ = 0;
  succ_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSTrainRsp::~CSTrainRsp() {
  SharedDtor();
}

void CSTrainRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSTrainRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSTrainRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSTrainRsp_descriptor_;
}

const CSTrainRsp& CSTrainRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSTrainRsp* CSTrainRsp::default_instance_ = NULL;

CSTrainRsp* CSTrainRsp::New() const {
  return new CSTrainRsp;
}

void CSTrainRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    courage_ = 0;
    charm_ = 0;
    trick_ = 0;
    succ_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSTrainRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 courage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &courage_)));
          set_has_courage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charm;
        break;
      }

      // required int32 charm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charm_)));
          set_has_charm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_trick;
        break;
      }

      // required int32 trick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trick_)));
          set_has_trick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_succ;
        break;
      }

      // required bool succ = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSTrainRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 courage = 1;
  if (has_courage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->courage(), output);
  }

  // required int32 charm = 2;
  if (has_charm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->charm(), output);
  }

  // required int32 trick = 3;
  if (has_trick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->trick(), output);
  }

  // required bool succ = 4;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->succ(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSTrainRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 courage = 1;
  if (has_courage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->courage(), target);
  }

  // required int32 charm = 2;
  if (has_charm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->charm(), target);
  }

  // required int32 trick = 3;
  if (has_trick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->trick(), target);
  }

  // required bool succ = 4;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->succ(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSTrainRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 courage = 1;
    if (has_courage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->courage());
    }

    // required int32 charm = 2;
    if (has_charm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charm());
    }

    // required int32 trick = 3;
    if (has_trick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trick());
    }

    // required bool succ = 4;
    if (has_succ()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSTrainRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSTrainRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSTrainRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSTrainRsp::MergeFrom(const CSTrainRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_courage()) {
      set_courage(from.courage());
    }
    if (from.has_charm()) {
      set_charm(from.charm());
    }
    if (from.has_trick()) {
      set_trick(from.trick());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSTrainRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTrainRsp::CopyFrom(const CSTrainRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTrainRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSTrainRsp::Swap(CSTrainRsp* other) {
  if (other != this) {
    std::swap(courage_, other->courage_);
    std::swap(charm_, other->charm_);
    std::swap(trick_, other->trick_);
    std::swap(succ_, other->succ_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSTrainRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSTrainRsp_descriptor_;
  metadata.reflection = CSTrainRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSTrainDetermineReq::CSTrainDetermineReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSTrainDetermineReq::InitAsDefaultInstance() {
}

CSTrainDetermineReq::CSTrainDetermineReq(const CSTrainDetermineReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSTrainDetermineReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSTrainDetermineReq::~CSTrainDetermineReq() {
  SharedDtor();
}

void CSTrainDetermineReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSTrainDetermineReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSTrainDetermineReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSTrainDetermineReq_descriptor_;
}

const CSTrainDetermineReq& CSTrainDetermineReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSTrainDetermineReq* CSTrainDetermineReq::default_instance_ = NULL;

CSTrainDetermineReq* CSTrainDetermineReq::New() const {
  return new CSTrainDetermineReq;
}

void CSTrainDetermineReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSTrainDetermineReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSTrainDetermineReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSTrainDetermineReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSTrainDetermineReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSTrainDetermineReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSTrainDetermineReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSTrainDetermineReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSTrainDetermineReq::MergeFrom(const CSTrainDetermineReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSTrainDetermineReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTrainDetermineReq::CopyFrom(const CSTrainDetermineReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTrainDetermineReq::IsInitialized() const {

  return true;
}

void CSTrainDetermineReq::Swap(CSTrainDetermineReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSTrainDetermineReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSTrainDetermineReq_descriptor_;
  metadata.reflection = CSTrainDetermineReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSTrainDetermineRsp::CSTrainDetermineRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSTrainDetermineRsp::InitAsDefaultInstance() {
}

CSTrainDetermineRsp::CSTrainDetermineRsp(const CSTrainDetermineRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSTrainDetermineRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSTrainDetermineRsp::~CSTrainDetermineRsp() {
  SharedDtor();
}

void CSTrainDetermineRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSTrainDetermineRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSTrainDetermineRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSTrainDetermineRsp_descriptor_;
}

const CSTrainDetermineRsp& CSTrainDetermineRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSTrainDetermineRsp* CSTrainDetermineRsp::default_instance_ = NULL;

CSTrainDetermineRsp* CSTrainDetermineRsp::New() const {
  return new CSTrainDetermineRsp;
}

void CSTrainDetermineRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSTrainDetermineRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSTrainDetermineRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSTrainDetermineRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSTrainDetermineRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSTrainDetermineRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSTrainDetermineRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSTrainDetermineRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSTrainDetermineRsp::MergeFrom(const CSTrainDetermineRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSTrainDetermineRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTrainDetermineRsp::CopyFrom(const CSTrainDetermineRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTrainDetermineRsp::IsInitialized() const {

  return true;
}

void CSTrainDetermineRsp::Swap(CSTrainDetermineRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSTrainDetermineRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSTrainDetermineRsp_descriptor_;
  metadata.reflection = CSTrainDetermineRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSExploreReq::kOptionFieldNumber;
#endif  // !_MSC_VER

CSExploreReq::CSExploreReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSExploreReq::InitAsDefaultInstance() {
}

CSExploreReq::CSExploreReq(const CSExploreReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSExploreReq::SharedCtor() {
  _cached_size_ = 0;
  option_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSExploreReq::~CSExploreReq() {
  SharedDtor();
}

void CSExploreReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSExploreReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSExploreReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSExploreReq_descriptor_;
}

const CSExploreReq& CSExploreReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSExploreReq* CSExploreReq::default_instance_ = NULL;

CSExploreReq* CSExploreReq::New() const {
  return new CSExploreReq;
}

void CSExploreReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    option_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSExploreReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 option = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &option_)));
          set_has_option();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSExploreReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 option = 1;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->option(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSExploreReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 option = 1;
  if (has_option()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->option(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSExploreReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 option = 1;
    if (has_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->option());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSExploreReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSExploreReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSExploreReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSExploreReq::MergeFrom(const CSExploreReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_option()) {
      set_option(from.option());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSExploreReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSExploreReq::CopyFrom(const CSExploreReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSExploreReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSExploreReq::Swap(CSExploreReq* other) {
  if (other != this) {
    std::swap(option_, other->option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSExploreReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSExploreReq_descriptor_;
  metadata.reflection = CSExploreReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSExploreRsp::kOptionFieldNumber;
const int CSExploreRsp::kMapIdFieldNumber;
#endif  // !_MSC_VER

CSExploreRsp::CSExploreRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSExploreRsp::InitAsDefaultInstance() {
}

CSExploreRsp::CSExploreRsp(const CSExploreRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSExploreRsp::SharedCtor() {
  _cached_size_ = 0;
  option_ = 0u;
  map_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSExploreRsp::~CSExploreRsp() {
  SharedDtor();
}

void CSExploreRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSExploreRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSExploreRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSExploreRsp_descriptor_;
}

const CSExploreRsp& CSExploreRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSExploreRsp* CSExploreRsp::default_instance_ = NULL;

CSExploreRsp* CSExploreRsp::New() const {
  return new CSExploreRsp;
}

void CSExploreRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    option_ = 0u;
    map_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSExploreRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 option = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &option_)));
          set_has_option();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_id;
        break;
      }

      // required uint32 map_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSExploreRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 option = 1;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->option(), output);
  }

  // required uint32 map_id = 2;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->map_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSExploreRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 option = 1;
  if (has_option()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->option(), target);
  }

  // required uint32 map_id = 2;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->map_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSExploreRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 option = 1;
    if (has_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->option());
    }

    // required uint32 map_id = 2;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSExploreRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSExploreRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSExploreRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSExploreRsp::MergeFrom(const CSExploreRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_option()) {
      set_option(from.option());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSExploreRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSExploreRsp::CopyFrom(const CSExploreRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSExploreRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSExploreRsp::Swap(CSExploreRsp* other) {
  if (other != this) {
    std::swap(option_, other->option_);
    std::swap(map_id_, other->map_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSExploreRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSExploreRsp_descriptor_;
  metadata.reflection = CSExploreRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSExploreDetermineReq::kOptionFieldNumber;
#endif  // !_MSC_VER

CSExploreDetermineReq::CSExploreDetermineReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSExploreDetermineReq::InitAsDefaultInstance() {
}

CSExploreDetermineReq::CSExploreDetermineReq(const CSExploreDetermineReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSExploreDetermineReq::SharedCtor() {
  _cached_size_ = 0;
  option_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSExploreDetermineReq::~CSExploreDetermineReq() {
  SharedDtor();
}

void CSExploreDetermineReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSExploreDetermineReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSExploreDetermineReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSExploreDetermineReq_descriptor_;
}

const CSExploreDetermineReq& CSExploreDetermineReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSExploreDetermineReq* CSExploreDetermineReq::default_instance_ = NULL;

CSExploreDetermineReq* CSExploreDetermineReq::New() const {
  return new CSExploreDetermineReq;
}

void CSExploreDetermineReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    option_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSExploreDetermineReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 option = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &option_)));
          set_has_option();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSExploreDetermineReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 option = 1;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->option(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSExploreDetermineReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 option = 1;
  if (has_option()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->option(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSExploreDetermineReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 option = 1;
    if (has_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->option());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSExploreDetermineReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSExploreDetermineReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSExploreDetermineReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSExploreDetermineReq::MergeFrom(const CSExploreDetermineReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_option()) {
      set_option(from.option());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSExploreDetermineReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSExploreDetermineReq::CopyFrom(const CSExploreDetermineReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSExploreDetermineReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSExploreDetermineReq::Swap(CSExploreDetermineReq* other) {
  if (other != this) {
    std::swap(option_, other->option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSExploreDetermineReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSExploreDetermineReq_descriptor_;
  metadata.reflection = CSExploreDetermineReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSExploreDetermineRsp::kMapIdFieldNumber;
const int CSExploreDetermineRsp::kRewardsFieldNumber;
#endif  // !_MSC_VER

CSExploreDetermineRsp::CSExploreDetermineRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSExploreDetermineRsp::InitAsDefaultInstance() {
  rewards_ = const_cast< ::CSReward*>(&::CSReward::default_instance());
}

CSExploreDetermineRsp::CSExploreDetermineRsp(const CSExploreDetermineRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSExploreDetermineRsp::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  rewards_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSExploreDetermineRsp::~CSExploreDetermineRsp() {
  SharedDtor();
}

void CSExploreDetermineRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rewards_;
  }
}

void CSExploreDetermineRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSExploreDetermineRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSExploreDetermineRsp_descriptor_;
}

const CSExploreDetermineRsp& CSExploreDetermineRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSExploreDetermineRsp* CSExploreDetermineRsp::default_instance_ = NULL;

CSExploreDetermineRsp* CSExploreDetermineRsp::New() const {
  return new CSExploreDetermineRsp;
}

void CSExploreDetermineRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
    if (has_rewards()) {
      if (rewards_ != NULL) rewards_->::CSReward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSExploreDetermineRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        break;
      }

      // optional .CSReward rewards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSExploreDetermineRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }

  // optional .CSReward rewards = 2;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewards(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSExploreDetermineRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 map_id = 1;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->map_id(), target);
  }

  // optional .CSReward rewards = 2;
  if (has_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewards(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSExploreDetermineRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional .CSReward rewards = 2;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewards());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSExploreDetermineRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSExploreDetermineRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSExploreDetermineRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSExploreDetermineRsp::MergeFrom(const CSExploreDetermineRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_rewards()) {
      mutable_rewards()->::CSReward::MergeFrom(from.rewards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSExploreDetermineRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSExploreDetermineRsp::CopyFrom(const CSExploreDetermineRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSExploreDetermineRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rewards()) {
    if (!this->rewards().IsInitialized()) return false;
  }
  return true;
}

void CSExploreDetermineRsp::Swap(CSExploreDetermineRsp* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(rewards_, other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSExploreDetermineRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSExploreDetermineRsp_descriptor_;
  metadata.reflection = CSExploreDetermineRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSQueryDowerReq::CSQueryDowerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSQueryDowerReq::InitAsDefaultInstance() {
}

CSQueryDowerReq::CSQueryDowerReq(const CSQueryDowerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSQueryDowerReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQueryDowerReq::~CSQueryDowerReq() {
  SharedDtor();
}

void CSQueryDowerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSQueryDowerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSQueryDowerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSQueryDowerReq_descriptor_;
}

const CSQueryDowerReq& CSQueryDowerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSQueryDowerReq* CSQueryDowerReq::default_instance_ = NULL;

CSQueryDowerReq* CSQueryDowerReq::New() const {
  return new CSQueryDowerReq;
}

void CSQueryDowerReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSQueryDowerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSQueryDowerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSQueryDowerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSQueryDowerReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQueryDowerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSQueryDowerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSQueryDowerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSQueryDowerReq::MergeFrom(const CSQueryDowerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSQueryDowerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSQueryDowerReq::CopyFrom(const CSQueryDowerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryDowerReq::IsInitialized() const {

  return true;
}

void CSQueryDowerReq::Swap(CSQueryDowerReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSQueryDowerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSQueryDowerReq_descriptor_;
  metadata.reflection = CSQueryDowerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSQueryDowerRsp_Dower::kIdFieldNumber;
const int CSQueryDowerRsp_Dower::kLevelFieldNumber;
const int CSQueryDowerRsp_Dower::kMaxLevelFieldNumber;
const int CSQueryDowerRsp_Dower::kPlusFieldNumber;
const int CSQueryDowerRsp_Dower::kEachPlusFieldNumber;
#endif  // !_MSC_VER

CSQueryDowerRsp_Dower::CSQueryDowerRsp_Dower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSQueryDowerRsp_Dower::InitAsDefaultInstance() {
}

CSQueryDowerRsp_Dower::CSQueryDowerRsp_Dower(const CSQueryDowerRsp_Dower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSQueryDowerRsp_Dower::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  max_level_ = 0u;
  plus_ = 0u;
  each_plus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQueryDowerRsp_Dower::~CSQueryDowerRsp_Dower() {
  SharedDtor();
}

void CSQueryDowerRsp_Dower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSQueryDowerRsp_Dower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSQueryDowerRsp_Dower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSQueryDowerRsp_Dower_descriptor_;
}

const CSQueryDowerRsp_Dower& CSQueryDowerRsp_Dower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSQueryDowerRsp_Dower* CSQueryDowerRsp_Dower::default_instance_ = NULL;

CSQueryDowerRsp_Dower* CSQueryDowerRsp_Dower::New() const {
  return new CSQueryDowerRsp_Dower;
}

void CSQueryDowerRsp_Dower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    level_ = 0u;
    max_level_ = 0u;
    plus_ = 0u;
    each_plus_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSQueryDowerRsp_Dower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_level;
        break;
      }

      // required uint32 max_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_level_)));
          set_has_max_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_plus;
        break;
      }

      // required uint32 plus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plus_)));
          set_has_plus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_each_plus;
        break;
      }

      // required uint32 each_plus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_each_plus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &each_plus_)));
          set_has_each_plus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQueryDowerRsp_Dower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 max_level = 3;
  if (has_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_level(), output);
  }

  // required uint32 plus = 4;
  if (has_plus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->plus(), output);
  }

  // required uint32 each_plus = 5;
  if (has_each_plus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->each_plus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSQueryDowerRsp_Dower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 max_level = 3;
  if (has_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_level(), target);
  }

  // required uint32 plus = 4;
  if (has_plus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->plus(), target);
  }

  // required uint32 each_plus = 5;
  if (has_each_plus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->each_plus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSQueryDowerRsp_Dower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 max_level = 3;
    if (has_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_level());
    }

    // required uint32 plus = 4;
    if (has_plus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plus());
    }

    // required uint32 each_plus = 5;
    if (has_each_plus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->each_plus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQueryDowerRsp_Dower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSQueryDowerRsp_Dower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSQueryDowerRsp_Dower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSQueryDowerRsp_Dower::MergeFrom(const CSQueryDowerRsp_Dower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_max_level()) {
      set_max_level(from.max_level());
    }
    if (from.has_plus()) {
      set_plus(from.plus());
    }
    if (from.has_each_plus()) {
      set_each_plus(from.each_plus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSQueryDowerRsp_Dower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSQueryDowerRsp_Dower::CopyFrom(const CSQueryDowerRsp_Dower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryDowerRsp_Dower::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CSQueryDowerRsp_Dower::Swap(CSQueryDowerRsp_Dower* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(max_level_, other->max_level_);
    std::swap(plus_, other->plus_);
    std::swap(each_plus_, other->each_plus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSQueryDowerRsp_Dower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSQueryDowerRsp_Dower_descriptor_;
  metadata.reflection = CSQueryDowerRsp_Dower_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSQueryDowerRsp::kDowerFieldNumber;
const int CSQueryDowerRsp::kTimeoutFieldNumber;
#endif  // !_MSC_VER

CSQueryDowerRsp::CSQueryDowerRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSQueryDowerRsp::InitAsDefaultInstance() {
}

CSQueryDowerRsp::CSQueryDowerRsp(const CSQueryDowerRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSQueryDowerRsp::SharedCtor() {
  _cached_size_ = 0;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQueryDowerRsp::~CSQueryDowerRsp() {
  SharedDtor();
}

void CSQueryDowerRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSQueryDowerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSQueryDowerRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSQueryDowerRsp_descriptor_;
}

const CSQueryDowerRsp& CSQueryDowerRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSQueryDowerRsp* CSQueryDowerRsp::default_instance_ = NULL;

CSQueryDowerRsp* CSQueryDowerRsp::New() const {
  return new CSQueryDowerRsp;
}

void CSQueryDowerRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    timeout_ = 0u;
  }
  dower_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSQueryDowerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSQueryDowerRsp.Dower dower = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dower()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dower;
        if (input->ExpectTag(16)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQueryDowerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSQueryDowerRsp.Dower dower = 1;
  for (int i = 0; i < this->dower_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dower(i), output);
  }

  // optional uint32 timeout = 2;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSQueryDowerRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSQueryDowerRsp.Dower dower = 1;
  for (int i = 0; i < this->dower_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dower(i), target);
  }

  // optional uint32 timeout = 2;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSQueryDowerRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 timeout = 2;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  // repeated .CSQueryDowerRsp.Dower dower = 1;
  total_size += 1 * this->dower_size();
  for (int i = 0; i < this->dower_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dower(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQueryDowerRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSQueryDowerRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSQueryDowerRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSQueryDowerRsp::MergeFrom(const CSQueryDowerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  dower_.MergeFrom(from.dower_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSQueryDowerRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSQueryDowerRsp::CopyFrom(const CSQueryDowerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryDowerRsp::IsInitialized() const {

  for (int i = 0; i < dower_size(); i++) {
    if (!this->dower(i).IsInitialized()) return false;
  }
  return true;
}

void CSQueryDowerRsp::Swap(CSQueryDowerRsp* other) {
  if (other != this) {
    dower_.Swap(&other->dower_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSQueryDowerRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSQueryDowerRsp_descriptor_;
  metadata.reflection = CSQueryDowerRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDowerInfoReq::kIdFieldNumber;
const int CSDowerInfoReq::kLevelFieldNumber;
#endif  // !_MSC_VER

CSDowerInfoReq::CSDowerInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDowerInfoReq::InitAsDefaultInstance() {
}

CSDowerInfoReq::CSDowerInfoReq(const CSDowerInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDowerInfoReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDowerInfoReq::~CSDowerInfoReq() {
  SharedDtor();
}

void CSDowerInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSDowerInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDowerInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDowerInfoReq_descriptor_;
}

const CSDowerInfoReq& CSDowerInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSDowerInfoReq* CSDowerInfoReq::default_instance_ = NULL;

CSDowerInfoReq* CSDowerInfoReq::New() const {
  return new CSDowerInfoReq;
}

void CSDowerInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDowerInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDowerInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDowerInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDowerInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDowerInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDowerInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDowerInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDowerInfoReq::MergeFrom(const CSDowerInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDowerInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDowerInfoReq::CopyFrom(const CSDowerInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDowerInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSDowerInfoReq::Swap(CSDowerInfoReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDowerInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDowerInfoReq_descriptor_;
  metadata.reflection = CSDowerInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDowerInfoRsp::kIdFieldNumber;
const int CSDowerInfoRsp::kLevelFieldNumber;
const int CSDowerInfoRsp::kNextExploitFieldNumber;
const int CSDowerInfoRsp::kNextTimeFieldNumber;
const int CSDowerInfoRsp::kDiffPhysicalAttackFieldNumber;
const int CSDowerInfoRsp::kDiffMagicAttackFieldNumber;
const int CSDowerInfoRsp::kDiffSkillAttackFieldNumber;
const int CSDowerInfoRsp::kDiffPhysicalDefenceFieldNumber;
const int CSDowerInfoRsp::kDiffMagicDefenceFieldNumber;
const int CSDowerInfoRsp::kDiffSkillDefenceFieldNumber;
const int CSDowerInfoRsp::kDiffHpFieldNumber;
const int CSDowerInfoRsp::kPlusFieldNumber;
#endif  // !_MSC_VER

CSDowerInfoRsp::CSDowerInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDowerInfoRsp::InitAsDefaultInstance() {
}

CSDowerInfoRsp::CSDowerInfoRsp(const CSDowerInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDowerInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  next_exploit_ = 0u;
  next_time_ = 0u;
  diff_physical_attack_ = 0u;
  diff_magic_attack_ = 0u;
  diff_skill_attack_ = 0u;
  diff_physical_defence_ = 0u;
  diff_magic_defence_ = 0u;
  diff_skill_defence_ = 0u;
  diff_hp_ = 0u;
  plus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDowerInfoRsp::~CSDowerInfoRsp() {
  SharedDtor();
}

void CSDowerInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSDowerInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDowerInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDowerInfoRsp_descriptor_;
}

const CSDowerInfoRsp& CSDowerInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSDowerInfoRsp* CSDowerInfoRsp::default_instance_ = NULL;

CSDowerInfoRsp* CSDowerInfoRsp::New() const {
  return new CSDowerInfoRsp;
}

void CSDowerInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    level_ = 0u;
    next_exploit_ = 0u;
    next_time_ = 0u;
    diff_physical_attack_ = 0u;
    diff_magic_attack_ = 0u;
    diff_skill_attack_ = 0u;
    diff_physical_defence_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    diff_magic_defence_ = 0u;
    diff_skill_defence_ = 0u;
    diff_hp_ = 0u;
    plus_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDowerInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_next_exploit;
        break;
      }

      // required uint32 next_exploit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_exploit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_exploit_)));
          set_has_next_exploit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_next_time;
        break;
      }

      // required uint32 next_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_time_)));
          set_has_next_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_diff_physical_attack;
        break;
      }

      // required uint32 diff_physical_attack = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diff_physical_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diff_physical_attack_)));
          set_has_diff_physical_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_diff_magic_attack;
        break;
      }

      // required uint32 diff_magic_attack = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diff_magic_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diff_magic_attack_)));
          set_has_diff_magic_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_diff_skill_attack;
        break;
      }

      // required uint32 diff_skill_attack = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diff_skill_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diff_skill_attack_)));
          set_has_diff_skill_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_diff_physical_defence;
        break;
      }

      // required uint32 diff_physical_defence = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diff_physical_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diff_physical_defence_)));
          set_has_diff_physical_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_diff_magic_defence;
        break;
      }

      // required uint32 diff_magic_defence = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diff_magic_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diff_magic_defence_)));
          set_has_diff_magic_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_diff_skill_defence;
        break;
      }

      // required uint32 diff_skill_defence = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diff_skill_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diff_skill_defence_)));
          set_has_diff_skill_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_diff_hp;
        break;
      }

      // required uint32 diff_hp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diff_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diff_hp_)));
          set_has_diff_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_plus;
        break;
      }

      // required uint32 plus = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plus_)));
          set_has_plus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDowerInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 next_exploit = 3;
  if (has_next_exploit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->next_exploit(), output);
  }

  // required uint32 next_time = 4;
  if (has_next_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->next_time(), output);
  }

  // required uint32 diff_physical_attack = 5;
  if (has_diff_physical_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->diff_physical_attack(), output);
  }

  // required uint32 diff_magic_attack = 6;
  if (has_diff_magic_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->diff_magic_attack(), output);
  }

  // required uint32 diff_skill_attack = 7;
  if (has_diff_skill_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->diff_skill_attack(), output);
  }

  // required uint32 diff_physical_defence = 8;
  if (has_diff_physical_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->diff_physical_defence(), output);
  }

  // required uint32 diff_magic_defence = 9;
  if (has_diff_magic_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->diff_magic_defence(), output);
  }

  // required uint32 diff_skill_defence = 10;
  if (has_diff_skill_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->diff_skill_defence(), output);
  }

  // required uint32 diff_hp = 11;
  if (has_diff_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->diff_hp(), output);
  }

  // required uint32 plus = 12;
  if (has_plus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->plus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDowerInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 next_exploit = 3;
  if (has_next_exploit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->next_exploit(), target);
  }

  // required uint32 next_time = 4;
  if (has_next_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->next_time(), target);
  }

  // required uint32 diff_physical_attack = 5;
  if (has_diff_physical_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->diff_physical_attack(), target);
  }

  // required uint32 diff_magic_attack = 6;
  if (has_diff_magic_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->diff_magic_attack(), target);
  }

  // required uint32 diff_skill_attack = 7;
  if (has_diff_skill_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->diff_skill_attack(), target);
  }

  // required uint32 diff_physical_defence = 8;
  if (has_diff_physical_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->diff_physical_defence(), target);
  }

  // required uint32 diff_magic_defence = 9;
  if (has_diff_magic_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->diff_magic_defence(), target);
  }

  // required uint32 diff_skill_defence = 10;
  if (has_diff_skill_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->diff_skill_defence(), target);
  }

  // required uint32 diff_hp = 11;
  if (has_diff_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->diff_hp(), target);
  }

  // required uint32 plus = 12;
  if (has_plus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->plus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDowerInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 next_exploit = 3;
    if (has_next_exploit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_exploit());
    }

    // required uint32 next_time = 4;
    if (has_next_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_time());
    }

    // required uint32 diff_physical_attack = 5;
    if (has_diff_physical_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diff_physical_attack());
    }

    // required uint32 diff_magic_attack = 6;
    if (has_diff_magic_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diff_magic_attack());
    }

    // required uint32 diff_skill_attack = 7;
    if (has_diff_skill_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diff_skill_attack());
    }

    // required uint32 diff_physical_defence = 8;
    if (has_diff_physical_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diff_physical_defence());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 diff_magic_defence = 9;
    if (has_diff_magic_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diff_magic_defence());
    }

    // required uint32 diff_skill_defence = 10;
    if (has_diff_skill_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diff_skill_defence());
    }

    // required uint32 diff_hp = 11;
    if (has_diff_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diff_hp());
    }

    // required uint32 plus = 12;
    if (has_plus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDowerInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDowerInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDowerInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDowerInfoRsp::MergeFrom(const CSDowerInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_next_exploit()) {
      set_next_exploit(from.next_exploit());
    }
    if (from.has_next_time()) {
      set_next_time(from.next_time());
    }
    if (from.has_diff_physical_attack()) {
      set_diff_physical_attack(from.diff_physical_attack());
    }
    if (from.has_diff_magic_attack()) {
      set_diff_magic_attack(from.diff_magic_attack());
    }
    if (from.has_diff_skill_attack()) {
      set_diff_skill_attack(from.diff_skill_attack());
    }
    if (from.has_diff_physical_defence()) {
      set_diff_physical_defence(from.diff_physical_defence());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_diff_magic_defence()) {
      set_diff_magic_defence(from.diff_magic_defence());
    }
    if (from.has_diff_skill_defence()) {
      set_diff_skill_defence(from.diff_skill_defence());
    }
    if (from.has_diff_hp()) {
      set_diff_hp(from.diff_hp());
    }
    if (from.has_plus()) {
      set_plus(from.plus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDowerInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDowerInfoRsp::CopyFrom(const CSDowerInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDowerInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void CSDowerInfoRsp::Swap(CSDowerInfoRsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(next_exploit_, other->next_exploit_);
    std::swap(next_time_, other->next_time_);
    std::swap(diff_physical_attack_, other->diff_physical_attack_);
    std::swap(diff_magic_attack_, other->diff_magic_attack_);
    std::swap(diff_skill_attack_, other->diff_skill_attack_);
    std::swap(diff_physical_defence_, other->diff_physical_defence_);
    std::swap(diff_magic_defence_, other->diff_magic_defence_);
    std::swap(diff_skill_defence_, other->diff_skill_defence_);
    std::swap(diff_hp_, other->diff_hp_);
    std::swap(plus_, other->plus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDowerInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDowerInfoRsp_descriptor_;
  metadata.reflection = CSDowerInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDowerReq::kIdFieldNumber;
#endif  // !_MSC_VER

CSDowerReq::CSDowerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDowerReq::InitAsDefaultInstance() {
}

CSDowerReq::CSDowerReq(const CSDowerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDowerReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDowerReq::~CSDowerReq() {
  SharedDtor();
}

void CSDowerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSDowerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDowerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDowerReq_descriptor_;
}

const CSDowerReq& CSDowerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSDowerReq* CSDowerReq::default_instance_ = NULL;

CSDowerReq* CSDowerReq::New() const {
  return new CSDowerReq;
}

void CSDowerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDowerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDowerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDowerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDowerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDowerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDowerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDowerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDowerReq::MergeFrom(const CSDowerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDowerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDowerReq::CopyFrom(const CSDowerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDowerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSDowerReq::Swap(CSDowerReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDowerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDowerReq_descriptor_;
  metadata.reflection = CSDowerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDowerRsp::kTimeoutFieldNumber;
const int CSDowerRsp::kLevelFieldNumber;
const int CSDowerRsp::kPlusFieldNumber;
const int CSDowerRsp::kNextExploitFieldNumber;
#endif  // !_MSC_VER

CSDowerRsp::CSDowerRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDowerRsp::InitAsDefaultInstance() {
}

CSDowerRsp::CSDowerRsp(const CSDowerRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDowerRsp::SharedCtor() {
  _cached_size_ = 0;
  timeout_ = 0u;
  level_ = 0u;
  plus_ = 0u;
  next_exploit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDowerRsp::~CSDowerRsp() {
  SharedDtor();
}

void CSDowerRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSDowerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDowerRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDowerRsp_descriptor_;
}

const CSDowerRsp& CSDowerRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSDowerRsp* CSDowerRsp::default_instance_ = NULL;

CSDowerRsp* CSDowerRsp::New() const {
  return new CSDowerRsp;
}

void CSDowerRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timeout_ = 0u;
    level_ = 0u;
    plus_ = 0u;
    next_exploit_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDowerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 timeout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_plus;
        break;
      }

      // required uint32 plus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plus_)));
          set_has_plus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_next_exploit;
        break;
      }

      // required uint32 next_exploit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_exploit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_exploit_)));
          set_has_next_exploit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDowerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 timeout = 1;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timeout(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 plus = 3;
  if (has_plus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->plus(), output);
  }

  // required uint32 next_exploit = 4;
  if (has_next_exploit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->next_exploit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDowerRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 timeout = 1;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timeout(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 plus = 3;
  if (has_plus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->plus(), target);
  }

  // required uint32 next_exploit = 4;
  if (has_next_exploit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->next_exploit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDowerRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 timeout = 1;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 plus = 3;
    if (has_plus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plus());
    }

    // required uint32 next_exploit = 4;
    if (has_next_exploit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_exploit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDowerRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDowerRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDowerRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDowerRsp::MergeFrom(const CSDowerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_plus()) {
      set_plus(from.plus());
    }
    if (from.has_next_exploit()) {
      set_next_exploit(from.next_exploit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDowerRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDowerRsp::CopyFrom(const CSDowerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDowerRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSDowerRsp::Swap(CSDowerRsp* other) {
  if (other != this) {
    std::swap(timeout_, other->timeout_);
    std::swap(level_, other->level_);
    std::swap(plus_, other->plus_);
    std::swap(next_exploit_, other->next_exploit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDowerRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDowerRsp_descriptor_;
  metadata.reflection = CSDowerRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSExchangeParameterReq::kIdFieldNumber;
const int CSExchangeParameterReq::kParamFieldNumber;
#endif  // !_MSC_VER

CSExchangeParameterReq::CSExchangeParameterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSExchangeParameterReq::InitAsDefaultInstance() {
}

CSExchangeParameterReq::CSExchangeParameterReq(const CSExchangeParameterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSExchangeParameterReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSExchangeParameterReq::~CSExchangeParameterReq() {
  SharedDtor();
}

void CSExchangeParameterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSExchangeParameterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSExchangeParameterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSExchangeParameterReq_descriptor_;
}

const CSExchangeParameterReq& CSExchangeParameterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSExchangeParameterReq* CSExchangeParameterReq::default_instance_ = NULL;

CSExchangeParameterReq* CSExchangeParameterReq::New() const {
  return new CSExchangeParameterReq;
}

void CSExchangeParameterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    param_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSExchangeParameterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional uint32 param = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSExchangeParameterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 param = 2 [default = 0];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSExchangeParameterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 param = 2 [default = 0];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSExchangeParameterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 param = 2 [default = 0];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSExchangeParameterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSExchangeParameterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSExchangeParameterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSExchangeParameterReq::MergeFrom(const CSExchangeParameterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSExchangeParameterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSExchangeParameterReq::CopyFrom(const CSExchangeParameterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSExchangeParameterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSExchangeParameterReq::Swap(CSExchangeParameterReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSExchangeParameterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSExchangeParameterReq_descriptor_;
  metadata.reflection = CSExchangeParameterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSExchangeParameterRsp::kSuccFieldNumber;
const int CSExchangeParameterRsp::kIdFieldNumber;
const int CSExchangeParameterRsp::kParamFieldNumber;
#endif  // !_MSC_VER

CSExchangeParameterRsp::CSExchangeParameterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSExchangeParameterRsp::InitAsDefaultInstance() {
}

CSExchangeParameterRsp::CSExchangeParameterRsp(const CSExchangeParameterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSExchangeParameterRsp::SharedCtor() {
  _cached_size_ = 0;
  succ_ = false;
  id_ = 0u;
  param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSExchangeParameterRsp::~CSExchangeParameterRsp() {
  SharedDtor();
}

void CSExchangeParameterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSExchangeParameterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSExchangeParameterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSExchangeParameterRsp_descriptor_;
}

const CSExchangeParameterRsp& CSExchangeParameterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSExchangeParameterRsp* CSExchangeParameterRsp::default_instance_ = NULL;

CSExchangeParameterRsp* CSExchangeParameterRsp::New() const {
  return new CSExchangeParameterRsp;
}

void CSExchangeParameterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    succ_ = false;
    id_ = 0u;
    param_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSExchangeParameterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool succ = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param;
        break;
      }

      // optional uint32 param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSExchangeParameterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool succ = 1;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succ(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSExchangeParameterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool succ = 1;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succ(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 param = 3;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSExchangeParameterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool succ = 1;
    if (has_succ()) {
      total_size += 1 + 1;
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSExchangeParameterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSExchangeParameterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSExchangeParameterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSExchangeParameterRsp::MergeFrom(const CSExchangeParameterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succ()) {
      set_succ(from.succ());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSExchangeParameterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSExchangeParameterRsp::CopyFrom(const CSExchangeParameterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSExchangeParameterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSExchangeParameterRsp::Swap(CSExchangeParameterRsp* other) {
  if (other != this) {
    std::swap(succ_, other->succ_);
    std::swap(id_, other->id_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSExchangeParameterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSExchangeParameterRsp_descriptor_;
  metadata.reflection = CSExchangeParameterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopItemInfo_Item::kItemIdFieldNumber;
const int ShopItemInfo_Item::kItemNumFieldNumber;
#endif  // !_MSC_VER

ShopItemInfo_Item::ShopItemInfo_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShopItemInfo_Item::InitAsDefaultInstance() {
}

ShopItemInfo_Item::ShopItemInfo_Item(const ShopItemInfo_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShopItemInfo_Item::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  item_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopItemInfo_Item::~ShopItemInfo_Item() {
  SharedDtor();
}

void ShopItemInfo_Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopItemInfo_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopItemInfo_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopItemInfo_Item_descriptor_;
}

const ShopItemInfo_Item& ShopItemInfo_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

ShopItemInfo_Item* ShopItemInfo_Item::default_instance_ = NULL;

ShopItemInfo_Item* ShopItemInfo_Item::New() const {
  return new ShopItemInfo_Item;
}

void ShopItemInfo_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    item_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopItemInfo_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }

      // required uint32 item_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShopItemInfo_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // required uint32 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShopItemInfo_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // required uint32 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShopItemInfo_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // required uint32 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopItemInfo_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopItemInfo_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopItemInfo_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopItemInfo_Item::MergeFrom(const ShopItemInfo_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopItemInfo_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopItemInfo_Item::CopyFrom(const ShopItemInfo_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopItemInfo_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ShopItemInfo_Item::Swap(ShopItemInfo_Item* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopItemInfo_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopItemInfo_Item_descriptor_;
  metadata.reflection = ShopItemInfo_Item_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ShopItemInfo::kIndexFieldNumber;
const int ShopItemInfo::kFromItemFieldNumber;
const int ShopItemInfo::kToItemFieldNumber;
const int ShopItemInfo::kIsBuyFieldNumber;
#endif  // !_MSC_VER

ShopItemInfo::ShopItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShopItemInfo::InitAsDefaultInstance() {
  from_item_ = const_cast< ::ShopItemInfo_Item*>(&::ShopItemInfo_Item::default_instance());
  to_item_ = const_cast< ::ShopItemInfo_Item*>(&::ShopItemInfo_Item::default_instance());
}

ShopItemInfo::ShopItemInfo(const ShopItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShopItemInfo::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  from_item_ = NULL;
  to_item_ = NULL;
  is_buy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopItemInfo::~ShopItemInfo() {
  SharedDtor();
}

void ShopItemInfo::SharedDtor() {
  if (this != default_instance_) {
    delete from_item_;
    delete to_item_;
  }
}

void ShopItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopItemInfo_descriptor_;
}

const ShopItemInfo& ShopItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

ShopItemInfo* ShopItemInfo::default_instance_ = NULL;

ShopItemInfo* ShopItemInfo::New() const {
  return new ShopItemInfo;
}

void ShopItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    if (has_from_item()) {
      if (from_item_ != NULL) from_item_->::ShopItemInfo_Item::Clear();
    }
    if (has_to_item()) {
      if (to_item_ != NULL) to_item_->::ShopItemInfo_Item::Clear();
    }
    is_buy_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_from_item;
        break;
      }

      // required .ShopItemInfo.Item from_item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_to_item;
        break;
      }

      // required .ShopItemInfo.Item to_item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_buy;
        break;
      }

      // required bool is_buy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_buy_)));
          set_has_is_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShopItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // required .ShopItemInfo.Item from_item = 2;
  if (has_from_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->from_item(), output);
  }

  // required .ShopItemInfo.Item to_item = 3;
  if (has_to_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->to_item(), output);
  }

  // required bool is_buy = 4;
  if (has_is_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_buy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShopItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // required .ShopItemInfo.Item from_item = 2;
  if (has_from_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->from_item(), target);
  }

  // required .ShopItemInfo.Item to_item = 3;
  if (has_to_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->to_item(), target);
  }

  // required bool is_buy = 4;
  if (has_is_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_buy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShopItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required .ShopItemInfo.Item from_item = 2;
    if (has_from_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from_item());
    }

    // required .ShopItemInfo.Item to_item = 3;
    if (has_to_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to_item());
    }

    // required bool is_buy = 4;
    if (has_is_buy()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopItemInfo::MergeFrom(const ShopItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_from_item()) {
      mutable_from_item()->::ShopItemInfo_Item::MergeFrom(from.from_item());
    }
    if (from.has_to_item()) {
      mutable_to_item()->::ShopItemInfo_Item::MergeFrom(from.to_item());
    }
    if (from.has_is_buy()) {
      set_is_buy(from.is_buy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopItemInfo::CopyFrom(const ShopItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_from_item()) {
    if (!this->from_item().IsInitialized()) return false;
  }
  if (has_to_item()) {
    if (!this->to_item().IsInitialized()) return false;
  }
  return true;
}

void ShopItemInfo::Swap(ShopItemInfo* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(from_item_, other->from_item_);
    std::swap(to_item_, other->to_item_);
    std::swap(is_buy_, other->is_buy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopItemInfo_descriptor_;
  metadata.reflection = ShopItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSGetShopItemsReq::CSGetShopItemsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetShopItemsReq::InitAsDefaultInstance() {
}

CSGetShopItemsReq::CSGetShopItemsReq(const CSGetShopItemsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetShopItemsReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetShopItemsReq::~CSGetShopItemsReq() {
  SharedDtor();
}

void CSGetShopItemsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetShopItemsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetShopItemsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetShopItemsReq_descriptor_;
}

const CSGetShopItemsReq& CSGetShopItemsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSGetShopItemsReq* CSGetShopItemsReq::default_instance_ = NULL;

CSGetShopItemsReq* CSGetShopItemsReq::New() const {
  return new CSGetShopItemsReq;
}

void CSGetShopItemsReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetShopItemsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSGetShopItemsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetShopItemsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetShopItemsReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetShopItemsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetShopItemsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetShopItemsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetShopItemsReq::MergeFrom(const CSGetShopItemsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetShopItemsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetShopItemsReq::CopyFrom(const CSGetShopItemsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetShopItemsReq::IsInitialized() const {

  return true;
}

void CSGetShopItemsReq::Swap(CSGetShopItemsReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetShopItemsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetShopItemsReq_descriptor_;
  metadata.reflection = CSGetShopItemsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetShopItemsRsp::kItemsFieldNumber;
#endif  // !_MSC_VER

CSGetShopItemsRsp::CSGetShopItemsRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetShopItemsRsp::InitAsDefaultInstance() {
}

CSGetShopItemsRsp::CSGetShopItemsRsp(const CSGetShopItemsRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetShopItemsRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetShopItemsRsp::~CSGetShopItemsRsp() {
  SharedDtor();
}

void CSGetShopItemsRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetShopItemsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetShopItemsRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetShopItemsRsp_descriptor_;
}

const CSGetShopItemsRsp& CSGetShopItemsRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSGetShopItemsRsp* CSGetShopItemsRsp::default_instance_ = NULL;

CSGetShopItemsRsp* CSGetShopItemsRsp::New() const {
  return new CSGetShopItemsRsp;
}

void CSGetShopItemsRsp::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetShopItemsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ShopItemInfo items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetShopItemsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ShopItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetShopItemsRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ShopItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetShopItemsRsp::ByteSize() const {
  int total_size = 0;

  // repeated .ShopItemInfo items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetShopItemsRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetShopItemsRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetShopItemsRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetShopItemsRsp::MergeFrom(const CSGetShopItemsRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetShopItemsRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetShopItemsRsp::CopyFrom(const CSGetShopItemsRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetShopItemsRsp::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void CSGetShopItemsRsp::Swap(CSGetShopItemsRsp* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetShopItemsRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetShopItemsRsp_descriptor_;
  metadata.reflection = CSGetShopItemsRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBuyShopItemReq::kIndexFieldNumber;
#endif  // !_MSC_VER

CSBuyShopItemReq::CSBuyShopItemReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBuyShopItemReq::InitAsDefaultInstance() {
}

CSBuyShopItemReq::CSBuyShopItemReq(const CSBuyShopItemReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBuyShopItemReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBuyShopItemReq::~CSBuyShopItemReq() {
  SharedDtor();
}

void CSBuyShopItemReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBuyShopItemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBuyShopItemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBuyShopItemReq_descriptor_;
}

const CSBuyShopItemReq& CSBuyShopItemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSBuyShopItemReq* CSBuyShopItemReq::default_instance_ = NULL;

CSBuyShopItemReq* CSBuyShopItemReq::New() const {
  return new CSBuyShopItemReq;
}

void CSBuyShopItemReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBuyShopItemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBuyShopItemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBuyShopItemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBuyShopItemReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBuyShopItemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBuyShopItemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBuyShopItemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBuyShopItemReq::MergeFrom(const CSBuyShopItemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBuyShopItemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBuyShopItemReq::CopyFrom(const CSBuyShopItemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyShopItemReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSBuyShopItemReq::Swap(CSBuyShopItemReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBuyShopItemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBuyShopItemReq_descriptor_;
  metadata.reflection = CSBuyShopItemReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBuyShopItemRsp::kIndexFieldNumber;
const int CSBuyShopItemRsp::kSuccFieldNumber;
#endif  // !_MSC_VER

CSBuyShopItemRsp::CSBuyShopItemRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBuyShopItemRsp::InitAsDefaultInstance() {
}

CSBuyShopItemRsp::CSBuyShopItemRsp(const CSBuyShopItemRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBuyShopItemRsp::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  succ_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBuyShopItemRsp::~CSBuyShopItemRsp() {
  SharedDtor();
}

void CSBuyShopItemRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBuyShopItemRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBuyShopItemRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBuyShopItemRsp_descriptor_;
}

const CSBuyShopItemRsp& CSBuyShopItemRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSBuyShopItemRsp* CSBuyShopItemRsp::default_instance_ = NULL;

CSBuyShopItemRsp* CSBuyShopItemRsp::New() const {
  return new CSBuyShopItemRsp;
}

void CSBuyShopItemRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    succ_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBuyShopItemRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_succ;
        break;
      }

      // required bool succ = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBuyShopItemRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // required bool succ = 2;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->succ(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBuyShopItemRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // required bool succ = 2;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->succ(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBuyShopItemRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required bool succ = 2;
    if (has_succ()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBuyShopItemRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBuyShopItemRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBuyShopItemRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBuyShopItemRsp::MergeFrom(const CSBuyShopItemRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBuyShopItemRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBuyShopItemRsp::CopyFrom(const CSBuyShopItemRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyShopItemRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSBuyShopItemRsp::Swap(CSBuyShopItemRsp* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(succ_, other->succ_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBuyShopItemRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBuyShopItemRsp_descriptor_;
  metadata.reflection = CSBuyShopItemRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetUserItemReq::kUseridFieldNumber;
#endif  // !_MSC_VER

CSGetUserItemReq::CSGetUserItemReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetUserItemReq::InitAsDefaultInstance() {
}

CSGetUserItemReq::CSGetUserItemReq(const CSGetUserItemReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetUserItemReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetUserItemReq::~CSGetUserItemReq() {
  SharedDtor();
}

void CSGetUserItemReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetUserItemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetUserItemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetUserItemReq_descriptor_;
}

const CSGetUserItemReq& CSGetUserItemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSGetUserItemReq* CSGetUserItemReq::default_instance_ = NULL;

CSGetUserItemReq* CSGetUserItemReq::New() const {
  return new CSGetUserItemReq;
}

void CSGetUserItemReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetUserItemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetUserItemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetUserItemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetUserItemReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetUserItemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetUserItemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetUserItemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetUserItemReq::MergeFrom(const CSGetUserItemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetUserItemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetUserItemReq::CopyFrom(const CSGetUserItemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetUserItemReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSGetUserItemReq::Swap(CSGetUserItemReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetUserItemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetUserItemReq_descriptor_;
  metadata.reflection = CSGetUserItemReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetUserItemRsp::kUseridFieldNumber;
const int CSGetUserItemRsp::kItemsFieldNumber;
#endif  // !_MSC_VER

CSGetUserItemRsp::CSGetUserItemRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetUserItemRsp::InitAsDefaultInstance() {
}

CSGetUserItemRsp::CSGetUserItemRsp(const CSGetUserItemRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetUserItemRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetUserItemRsp::~CSGetUserItemRsp() {
  SharedDtor();
}

void CSGetUserItemRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetUserItemRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetUserItemRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetUserItemRsp_descriptor_;
}

const CSGetUserItemRsp& CSGetUserItemRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSGetUserItemRsp* CSGetUserItemRsp::default_instance_ = NULL;

CSGetUserItemRsp* CSGetUserItemRsp::New() const {
  return new CSGetUserItemRsp;
}

void CSGetUserItemRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetUserItemRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .CSItemInfo items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetUserItemRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // repeated .CSItemInfo items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetUserItemRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // repeated .CSItemInfo items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetUserItemRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

  }
  // repeated .CSItemInfo items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetUserItemRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetUserItemRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetUserItemRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetUserItemRsp::MergeFrom(const CSGetUserItemRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetUserItemRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetUserItemRsp::CopyFrom(const CSGetUserItemRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetUserItemRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void CSGetUserItemRsp::Swap(CSGetUserItemRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetUserItemRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetUserItemRsp_descriptor_;
  metadata.reflection = CSGetUserItemRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetUserAttributesReq::kUseridFieldNumber;
#endif  // !_MSC_VER

CSGetUserAttributesReq::CSGetUserAttributesReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetUserAttributesReq::InitAsDefaultInstance() {
}

CSGetUserAttributesReq::CSGetUserAttributesReq(const CSGetUserAttributesReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetUserAttributesReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetUserAttributesReq::~CSGetUserAttributesReq() {
  SharedDtor();
}

void CSGetUserAttributesReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetUserAttributesReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetUserAttributesReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetUserAttributesReq_descriptor_;
}

const CSGetUserAttributesReq& CSGetUserAttributesReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSGetUserAttributesReq* CSGetUserAttributesReq::default_instance_ = NULL;

CSGetUserAttributesReq* CSGetUserAttributesReq::New() const {
  return new CSGetUserAttributesReq;
}

void CSGetUserAttributesReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetUserAttributesReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetUserAttributesReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetUserAttributesReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetUserAttributesReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetUserAttributesReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetUserAttributesReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetUserAttributesReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetUserAttributesReq::MergeFrom(const CSGetUserAttributesReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetUserAttributesReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetUserAttributesReq::CopyFrom(const CSGetUserAttributesReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetUserAttributesReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSGetUserAttributesReq::Swap(CSGetUserAttributesReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetUserAttributesReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetUserAttributesReq_descriptor_;
  metadata.reflection = CSGetUserAttributesReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetUserAttributesRsp::kUseridFieldNumber;
const int CSGetUserAttributesRsp::kAttributesFieldNumber;
#endif  // !_MSC_VER

CSGetUserAttributesRsp::CSGetUserAttributesRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGetUserAttributesRsp::InitAsDefaultInstance() {
  attributes_ = const_cast< ::CSAttributesRsp*>(&::CSAttributesRsp::default_instance());
}

CSGetUserAttributesRsp::CSGetUserAttributesRsp(const CSGetUserAttributesRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetUserAttributesRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  attributes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetUserAttributesRsp::~CSGetUserAttributesRsp() {
  SharedDtor();
}

void CSGetUserAttributesRsp::SharedDtor() {
  if (this != default_instance_) {
    delete attributes_;
  }
}

void CSGetUserAttributesRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetUserAttributesRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetUserAttributesRsp_descriptor_;
}

const CSGetUserAttributesRsp& CSGetUserAttributesRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSGetUserAttributesRsp* CSGetUserAttributesRsp::default_instance_ = NULL;

CSGetUserAttributesRsp* CSGetUserAttributesRsp::New() const {
  return new CSGetUserAttributesRsp;
}

void CSGetUserAttributesRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    if (has_attributes()) {
      if (attributes_ != NULL) attributes_->::CSAttributesRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetUserAttributesRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attributes;
        break;
      }

      // required .CSAttributesRsp attributes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetUserAttributesRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // required .CSAttributesRsp attributes = 2;
  if (has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attributes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGetUserAttributesRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // required .CSAttributesRsp attributes = 2;
  if (has_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attributes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGetUserAttributesRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // required .CSAttributesRsp attributes = 2;
    if (has_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetUserAttributesRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetUserAttributesRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetUserAttributesRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetUserAttributesRsp::MergeFrom(const CSGetUserAttributesRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_attributes()) {
      mutable_attributes()->::CSAttributesRsp::MergeFrom(from.attributes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetUserAttributesRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetUserAttributesRsp::CopyFrom(const CSGetUserAttributesRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetUserAttributesRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_attributes()) {
    if (!this->attributes().IsInitialized()) return false;
  }
  return true;
}

void CSGetUserAttributesRsp::Swap(CSGetUserAttributesRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(attributes_, other->attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetUserAttributesRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetUserAttributesRsp_descriptor_;
  metadata.reflection = CSGetUserAttributesRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSNotifyMoneyConfInfoRsp::kPayFieldNumber;
const int CSNotifyMoneyConfInfoRsp::kDiamondFieldNumber;
const int CSNotifyMoneyConfInfoRsp::kExploreFieldNumber;
const int CSNotifyMoneyConfInfoRsp::kTrainFieldNumber;
#endif  // !_MSC_VER

CSNotifyMoneyConfInfoRsp::CSNotifyMoneyConfInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSNotifyMoneyConfInfoRsp::InitAsDefaultInstance() {
}

CSNotifyMoneyConfInfoRsp::CSNotifyMoneyConfInfoRsp(const CSNotifyMoneyConfInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSNotifyMoneyConfInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  pay_ = 0u;
  diamond_ = 0u;
  explore_ = 0u;
  train_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSNotifyMoneyConfInfoRsp::~CSNotifyMoneyConfInfoRsp() {
  SharedDtor();
}

void CSNotifyMoneyConfInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSNotifyMoneyConfInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSNotifyMoneyConfInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSNotifyMoneyConfInfoRsp_descriptor_;
}

const CSNotifyMoneyConfInfoRsp& CSNotifyMoneyConfInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fcore_2eproto();
  return *default_instance_;
}

CSNotifyMoneyConfInfoRsp* CSNotifyMoneyConfInfoRsp::default_instance_ = NULL;

CSNotifyMoneyConfInfoRsp* CSNotifyMoneyConfInfoRsp::New() const {
  return new CSNotifyMoneyConfInfoRsp;
}

void CSNotifyMoneyConfInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pay_ = 0u;
    diamond_ = 0u;
    explore_ = 0u;
    train_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSNotifyMoneyConfInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pay_)));
          set_has_pay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_diamond;
        break;
      }

      // required uint32 diamond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_explore;
        break;
      }

      // required uint32 explore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_explore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &explore_)));
          set_has_explore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_train;
        break;
      }

      // required uint32 train = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &train_)));
          set_has_train();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSNotifyMoneyConfInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pay = 1;
  if (has_pay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pay(), output);
  }

  // required uint32 diamond = 2;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->diamond(), output);
  }

  // required uint32 explore = 3;
  if (has_explore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->explore(), output);
  }

  // required uint32 train = 4;
  if (has_train()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->train(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSNotifyMoneyConfInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pay = 1;
  if (has_pay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pay(), target);
  }

  // required uint32 diamond = 2;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->diamond(), target);
  }

  // required uint32 explore = 3;
  if (has_explore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->explore(), target);
  }

  // required uint32 train = 4;
  if (has_train()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->train(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSNotifyMoneyConfInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pay = 1;
    if (has_pay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pay());
    }

    // required uint32 diamond = 2;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // required uint32 explore = 3;
    if (has_explore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->explore());
    }

    // required uint32 train = 4;
    if (has_train()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->train());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSNotifyMoneyConfInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSNotifyMoneyConfInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSNotifyMoneyConfInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSNotifyMoneyConfInfoRsp::MergeFrom(const CSNotifyMoneyConfInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pay()) {
      set_pay(from.pay());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_explore()) {
      set_explore(from.explore());
    }
    if (from.has_train()) {
      set_train(from.train());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSNotifyMoneyConfInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSNotifyMoneyConfInfoRsp::CopyFrom(const CSNotifyMoneyConfInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNotifyMoneyConfInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSNotifyMoneyConfInfoRsp::Swap(CSNotifyMoneyConfInfoRsp* other) {
  if (other != this) {
    std::swap(pay_, other->pay_);
    std::swap(diamond_, other->diamond_);
    std::swap(explore_, other->explore_);
    std::swap(train_, other->train_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSNotifyMoneyConfInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSNotifyMoneyConfInfoRsp_descriptor_;
  metadata.reflection = CSNotifyMoneyConfInfoRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
