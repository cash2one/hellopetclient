// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_battle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs_battle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CSPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleMoveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleMoveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleMoveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleMoveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterMoveValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterMoveValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterMoveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterMoveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleCreateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleCreateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleCreateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleCreateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleMonsterCreateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleMonsterCreateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleUserJoinRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleUserJoinRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleUserLeaveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleUserLeaveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleLoadCompleteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleLoadCompleteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleLoadCompleteRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleLoadCompleteRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleLeaveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleLeaveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleLeaveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleLeaveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleTimeoutRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleTimeoutRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattlePlayerDelRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattlePlayerDelRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttackMonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttackMonsterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSAttackMonsterBackInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSAttackMonsterBackInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterAttackInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterAttackInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterEffectInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterEffectInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterAttackRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterAttackRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterEffectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterEffectRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterHitRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterHitRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterHitRsp_UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterHitRsp_UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSkillBeginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSkillBeginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSkillBeginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSkillBeginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerAttackReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerAttackReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerAttackRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerAttackRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttackPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttackPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerHitPlayerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerHitPlayerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerHitPlayerRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerHitPlayerRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerHPRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerHPRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterBloodRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterBloodRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterDieRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterDieRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSABMonsterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSABMonsterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSABMonsterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSABMonsterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSABMonsterRsp_MonInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSABMonsterRsp_MonInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSAutoBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSAutoBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSAutoBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSAutoBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSABRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSABRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCancelAutoBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCancelAutoBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCancelAutoBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCancelAutoBattleRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_5fbattle_2eproto() {
  protobuf_AddDesc_cs_5fbattle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs_battle.proto");
  GOOGLE_CHECK(file != NULL);
  CSPoint_descriptor_ = file->message_type(0);
  static const int CSPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPoint, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPoint, ypos_),
  };
  CSPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPoint_descriptor_,
      CSPoint::default_instance_,
      CSPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPoint));
  CSBattleMoveReq_descriptor_ = file->message_type(1);
  static const int CSBattleMoveReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveReq, direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveReq, time_),
  };
  CSBattleMoveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleMoveReq_descriptor_,
      CSBattleMoveReq::default_instance_,
      CSBattleMoveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleMoveReq));
  CSBattleMoveRsp_descriptor_ = file->message_type(2);
  static const int CSBattleMoveRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveRsp, direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveRsp, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveRsp, time_),
  };
  CSBattleMoveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleMoveRsp_descriptor_,
      CSBattleMoveRsp::default_instance_,
      CSBattleMoveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleMoveRsp));
  MonsterMoveValue_descriptor_ = file->message_type(3);
  static const int MonsterMoveValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterMoveValue, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterMoveValue, direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterMoveValue, paths_),
  };
  MonsterMoveValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterMoveValue_descriptor_,
      MonsterMoveValue::default_instance_,
      MonsterMoveValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterMoveValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterMoveValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterMoveValue));
  CSMonsterMoveRsp_descriptor_ = file->message_type(4);
  static const int CSMonsterMoveRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterMoveRsp, moves_),
  };
  CSMonsterMoveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterMoveRsp_descriptor_,
      CSMonsterMoveRsp::default_instance_,
      CSMonsterMoveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterMoveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterMoveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterMoveRsp));
  CSBattleCreateReq_descriptor_ = file->message_type(5);
  static const int CSBattleCreateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateReq, battle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateReq, map_id_),
  };
  CSBattleCreateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleCreateReq_descriptor_,
      CSBattleCreateReq::default_instance_,
      CSBattleCreateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleCreateReq));
  MonsterBattleInfo_descriptor_ = file->message_type(6);
  static const int MonsterBattleInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, physical_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, magic_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, skill_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, physical_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, magic_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, skill_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, health_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, accurate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, wreck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, parry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, critical_strike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, tenacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, slay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, proficiency_),
  };
  MonsterBattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterBattleInfo_descriptor_,
      MonsterBattleInfo::default_instance_,
      MonsterBattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterBattleInfo));
  MonsterInfo_descriptor_ = file->message_type(7);
  static const int MonsterInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, moves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, battle_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, elite_),
  };
  MonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterInfo_descriptor_,
      MonsterInfo::default_instance_,
      MonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterInfo));
  CSBattleCreateRsp_descriptor_ = file->message_type(8);
  static const int CSBattleCreateRsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, monsterinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, battle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, portal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, portal_map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, monsterbirth_),
  };
  CSBattleCreateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleCreateRsp_descriptor_,
      CSBattleCreateRsp::default_instance_,
      CSBattleCreateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleCreateRsp));
  CSBattleMonsterCreateRsp_descriptor_ = file->message_type(9);
  static const int CSBattleMonsterCreateRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMonsterCreateRsp, monsterinfo_),
  };
  CSBattleMonsterCreateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleMonsterCreateRsp_descriptor_,
      CSBattleMonsterCreateRsp::default_instance_,
      CSBattleMonsterCreateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMonsterCreateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMonsterCreateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleMonsterCreateRsp));
  CSBattleUserJoinRsp_descriptor_ = file->message_type(10);
  static const int CSBattleUserJoinRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserJoinRsp, userinfo_),
  };
  CSBattleUserJoinRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleUserJoinRsp_descriptor_,
      CSBattleUserJoinRsp::default_instance_,
      CSBattleUserJoinRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserJoinRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserJoinRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleUserJoinRsp));
  CSBattleUserLeaveRsp_descriptor_ = file->message_type(11);
  static const int CSBattleUserLeaveRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserLeaveRsp, userid_),
  };
  CSBattleUserLeaveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleUserLeaveRsp_descriptor_,
      CSBattleUserLeaveRsp::default_instance_,
      CSBattleUserLeaveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserLeaveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserLeaveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleUserLeaveRsp));
  CSBattleLoadCompleteReq_descriptor_ = file->message_type(12);
  static const int CSBattleLoadCompleteReq_offsets_[1] = {
  };
  CSBattleLoadCompleteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleLoadCompleteReq_descriptor_,
      CSBattleLoadCompleteReq::default_instance_,
      CSBattleLoadCompleteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLoadCompleteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLoadCompleteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleLoadCompleteReq));
  CSBattleLoadCompleteRsp_descriptor_ = file->message_type(13);
  static const int CSBattleLoadCompleteRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLoadCompleteRsp, timeout_),
  };
  CSBattleLoadCompleteRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleLoadCompleteRsp_descriptor_,
      CSBattleLoadCompleteRsp::default_instance_,
      CSBattleLoadCompleteRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLoadCompleteRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLoadCompleteRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleLoadCompleteRsp));
  CSBattleLeaveReq_descriptor_ = file->message_type(14);
  static const int CSBattleLeaveReq_offsets_[1] = {
  };
  CSBattleLeaveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleLeaveReq_descriptor_,
      CSBattleLeaveReq::default_instance_,
      CSBattleLeaveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleLeaveReq));
  CSBattleLeaveRsp_descriptor_ = file->message_type(15);
  static const int CSBattleLeaveRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveRsp, initiative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveRsp, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveRsp, rewards_),
  };
  CSBattleLeaveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleLeaveRsp_descriptor_,
      CSBattleLeaveRsp::default_instance_,
      CSBattleLeaveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleLeaveRsp));
  CSBattleTimeoutRsp_descriptor_ = file->message_type(16);
  static const int CSBattleTimeoutRsp_offsets_[1] = {
  };
  CSBattleTimeoutRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleTimeoutRsp_descriptor_,
      CSBattleTimeoutRsp::default_instance_,
      CSBattleTimeoutRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleTimeoutRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleTimeoutRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleTimeoutRsp));
  CSBattlePlayerDelRsp_descriptor_ = file->message_type(17);
  static const int CSBattlePlayerDelRsp_offsets_[1] = {
  };
  CSBattlePlayerDelRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattlePlayerDelRsp_descriptor_,
      CSBattlePlayerDelRsp::default_instance_,
      CSBattlePlayerDelRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerDelRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerDelRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattlePlayerDelRsp));
  AttackMonsterInfo_descriptor_ = file->message_type(18);
  static const int AttackMonsterInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, start_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, status_),
  };
  AttackMonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttackMonsterInfo_descriptor_,
      AttackMonsterInfo::default_instance_,
      AttackMonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttackMonsterInfo));
  CSAttackMonsterBackInfo_descriptor_ = file->message_type(19);
  static const int CSAttackMonsterBackInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttackMonsterBackInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttackMonsterBackInfo, monster_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttackMonsterBackInfo, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttackMonsterBackInfo, elite_),
  };
  CSAttackMonsterBackInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSAttackMonsterBackInfo_descriptor_,
      CSAttackMonsterBackInfo::default_instance_,
      CSAttackMonsterBackInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttackMonsterBackInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAttackMonsterBackInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSAttackMonsterBackInfo));
  CSMonsterAttackInfo_descriptor_ = file->message_type(20);
  static const int CSMonsterAttackInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, effect_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, start_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, end_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, skill_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, delay_time_),
  };
  CSMonsterAttackInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterAttackInfo_descriptor_,
      CSMonsterAttackInfo::default_instance_,
      CSMonsterAttackInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterAttackInfo));
  CSMonsterEffectInfo_descriptor_ = file->message_type(21);
  static const int CSMonsterEffectInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, effect_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, start_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, end_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, skill_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, delay_time_),
  };
  CSMonsterEffectInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterEffectInfo_descriptor_,
      CSMonsterEffectInfo::default_instance_,
      CSMonsterEffectInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterEffectInfo));
  CSMonsterAttackRsp_descriptor_ = file->message_type(22);
  static const int CSMonsterAttackRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackRsp, attacks_),
  };
  CSMonsterAttackRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterAttackRsp_descriptor_,
      CSMonsterAttackRsp::default_instance_,
      CSMonsterAttackRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterAttackRsp));
  CSMonsterEffectRsp_descriptor_ = file->message_type(23);
  static const int CSMonsterEffectRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectRsp, effects_),
  };
  CSMonsterEffectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterEffectRsp_descriptor_,
      CSMonsterEffectRsp::default_instance_,
      CSMonsterEffectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterEffectRsp));
  CSMonsterHitRsp_descriptor_ = file->message_type(24);
  static const int CSMonsterHitRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp, users_),
  };
  CSMonsterHitRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterHitRsp_descriptor_,
      CSMonsterHitRsp::default_instance_,
      CSMonsterHitRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterHitRsp));
  CSMonsterHitRsp_UserInfo_descriptor_ = CSMonsterHitRsp_descriptor_->nested_type(0);
  static const int CSMonsterHitRsp_UserInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp_UserInfo, hurt_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp_UserInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp_UserInfo, blood_),
  };
  CSMonsterHitRsp_UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterHitRsp_UserInfo_descriptor_,
      CSMonsterHitRsp_UserInfo::default_instance_,
      CSMonsterHitRsp_UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp_UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp_UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterHitRsp_UserInfo));
  CSSkillBeginReq_descriptor_ = file->message_type(25);
  static const int CSSkillBeginReq_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, start_dir_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, start_dir_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, target_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, direct_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, direct_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, aim_),
  };
  CSSkillBeginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSkillBeginReq_descriptor_,
      CSSkillBeginReq::default_instance_,
      CSSkillBeginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSkillBeginReq));
  CSSkillBeginRsp_descriptor_ = file->message_type(26);
  static const int CSSkillBeginRsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, start_dir_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, start_dir_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, target_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, direct_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, direct_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, aim_),
  };
  CSSkillBeginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSkillBeginRsp_descriptor_,
      CSSkillBeginRsp::default_instance_,
      CSSkillBeginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSkillBeginRsp));
  CSPlayerAttackReq_descriptor_ = file->message_type(27);
  static const int CSPlayerAttackReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, start_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, start_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, end_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, end_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, monsters_),
  };
  CSPlayerAttackReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerAttackReq_descriptor_,
      CSPlayerAttackReq::default_instance_,
      CSPlayerAttackReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerAttackReq));
  CSPlayerAttackRsp_descriptor_ = file->message_type(28);
  static const int CSPlayerAttackRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, start_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, start_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, end_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, end_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, monsters_),
  };
  CSPlayerAttackRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerAttackRsp_descriptor_,
      CSPlayerAttackRsp::default_instance_,
      CSPlayerAttackRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerAttackRsp));
  AttackPlayerInfo_descriptor_ = file->message_type(29);
  static const int AttackPlayerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPlayerInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPlayerInfo, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPlayerInfo, hurt_type_),
  };
  AttackPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttackPlayerInfo_descriptor_,
      AttackPlayerInfo::default_instance_,
      AttackPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttackPlayerInfo));
  CSPlayerHitPlayerReq_descriptor_ = file->message_type(30);
  static const int CSPlayerHitPlayerReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, start_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, start_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, end_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, end_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, users_),
  };
  CSPlayerHitPlayerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerHitPlayerReq_descriptor_,
      CSPlayerHitPlayerReq::default_instance_,
      CSPlayerHitPlayerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerHitPlayerReq));
  CSPlayerHitPlayerRsp_descriptor_ = file->message_type(31);
  static const int CSPlayerHitPlayerRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, start_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, start_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, end_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, end_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, users_),
  };
  CSPlayerHitPlayerRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerHitPlayerRsp_descriptor_,
      CSPlayerHitPlayerRsp::default_instance_,
      CSPlayerHitPlayerRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerHitPlayerRsp));
  CSPlayerHPRsp_descriptor_ = file->message_type(32);
  static const int CSPlayerHPRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPRsp, blood_),
  };
  CSPlayerHPRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerHPRsp_descriptor_,
      CSPlayerHPRsp::default_instance_,
      CSPlayerHPRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerHPRsp));
  CSMonsterBloodRsp_descriptor_ = file->message_type(33);
  static const int CSMonsterBloodRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBloodRsp, monsters_),
  };
  CSMonsterBloodRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterBloodRsp_descriptor_,
      CSMonsterBloodRsp::default_instance_,
      CSMonsterBloodRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBloodRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBloodRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterBloodRsp));
  CSMonsterDieRsp_descriptor_ = file->message_type(34);
  static const int CSMonsterDieRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterDieRsp, monsters_),
  };
  CSMonsterDieRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterDieRsp_descriptor_,
      CSMonsterDieRsp::default_instance_,
      CSMonsterDieRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterDieRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterDieRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterDieRsp));
  CSABMonsterReq_descriptor_ = file->message_type(35);
  static const int CSABMonsterReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSABMonsterReq, instance_id_),
  };
  CSABMonsterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSABMonsterReq_descriptor_,
      CSABMonsterReq::default_instance_,
      CSABMonsterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSABMonsterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSABMonsterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSABMonsterReq));
  CSABMonsterRsp_descriptor_ = file->message_type(36);
  static const int CSABMonsterRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSABMonsterRsp, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSABMonsterRsp, mon_infos_),
  };
  CSABMonsterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSABMonsterRsp_descriptor_,
      CSABMonsterRsp::default_instance_,
      CSABMonsterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSABMonsterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSABMonsterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSABMonsterRsp));
  CSABMonsterRsp_MonInfo_descriptor_ = CSABMonsterRsp_descriptor_->nested_type(0);
  static const int CSABMonsterRsp_MonInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSABMonsterRsp_MonInfo, mon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSABMonsterRsp_MonInfo, mon_num_),
  };
  CSABMonsterRsp_MonInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSABMonsterRsp_MonInfo_descriptor_,
      CSABMonsterRsp_MonInfo::default_instance_,
      CSABMonsterRsp_MonInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSABMonsterRsp_MonInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSABMonsterRsp_MonInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSABMonsterRsp_MonInfo));
  CSAutoBattleReq_descriptor_ = file->message_type(37);
  static const int CSAutoBattleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAutoBattleReq, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAutoBattleReq, turn_num_),
  };
  CSAutoBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSAutoBattleReq_descriptor_,
      CSAutoBattleReq::default_instance_,
      CSAutoBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAutoBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAutoBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSAutoBattleReq));
  CSAutoBattleRsp_descriptor_ = file->message_type(38);
  static const int CSAutoBattleRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAutoBattleRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAutoBattleRsp, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAutoBattleRsp, instance_id_),
  };
  CSAutoBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSAutoBattleRsp_descriptor_,
      CSAutoBattleRsp::default_instance_,
      CSAutoBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAutoBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAutoBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSAutoBattleRsp));
  CSABRewardRsp_descriptor_ = file->message_type(39);
  static const int CSABRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSABRewardRsp, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSABRewardRsp, rewards_),
  };
  CSABRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSABRewardRsp_descriptor_,
      CSABRewardRsp::default_instance_,
      CSABRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSABRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSABRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSABRewardRsp));
  CSCancelAutoBattleReq_descriptor_ = file->message_type(40);
  static const int CSCancelAutoBattleReq_offsets_[1] = {
  };
  CSCancelAutoBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCancelAutoBattleReq_descriptor_,
      CSCancelAutoBattleReq::default_instance_,
      CSCancelAutoBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCancelAutoBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCancelAutoBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCancelAutoBattleReq));
  CSCancelAutoBattleRsp_descriptor_ = file->message_type(41);
  static const int CSCancelAutoBattleRsp_offsets_[1] = {
  };
  CSCancelAutoBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCancelAutoBattleRsp_descriptor_,
      CSCancelAutoBattleRsp::default_instance_,
      CSCancelAutoBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCancelAutoBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCancelAutoBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCancelAutoBattleRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_5fbattle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPoint_descriptor_, &CSPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleMoveReq_descriptor_, &CSBattleMoveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleMoveRsp_descriptor_, &CSBattleMoveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterMoveValue_descriptor_, &MonsterMoveValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterMoveRsp_descriptor_, &CSMonsterMoveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleCreateReq_descriptor_, &CSBattleCreateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterBattleInfo_descriptor_, &MonsterBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterInfo_descriptor_, &MonsterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleCreateRsp_descriptor_, &CSBattleCreateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleMonsterCreateRsp_descriptor_, &CSBattleMonsterCreateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleUserJoinRsp_descriptor_, &CSBattleUserJoinRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleUserLeaveRsp_descriptor_, &CSBattleUserLeaveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleLoadCompleteReq_descriptor_, &CSBattleLoadCompleteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleLoadCompleteRsp_descriptor_, &CSBattleLoadCompleteRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleLeaveReq_descriptor_, &CSBattleLeaveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleLeaveRsp_descriptor_, &CSBattleLeaveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleTimeoutRsp_descriptor_, &CSBattleTimeoutRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattlePlayerDelRsp_descriptor_, &CSBattlePlayerDelRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttackMonsterInfo_descriptor_, &AttackMonsterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSAttackMonsterBackInfo_descriptor_, &CSAttackMonsterBackInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterAttackInfo_descriptor_, &CSMonsterAttackInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterEffectInfo_descriptor_, &CSMonsterEffectInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterAttackRsp_descriptor_, &CSMonsterAttackRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterEffectRsp_descriptor_, &CSMonsterEffectRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterHitRsp_descriptor_, &CSMonsterHitRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterHitRsp_UserInfo_descriptor_, &CSMonsterHitRsp_UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSkillBeginReq_descriptor_, &CSSkillBeginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSkillBeginRsp_descriptor_, &CSSkillBeginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerAttackReq_descriptor_, &CSPlayerAttackReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerAttackRsp_descriptor_, &CSPlayerAttackRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttackPlayerInfo_descriptor_, &AttackPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerHitPlayerReq_descriptor_, &CSPlayerHitPlayerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerHitPlayerRsp_descriptor_, &CSPlayerHitPlayerRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerHPRsp_descriptor_, &CSPlayerHPRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterBloodRsp_descriptor_, &CSMonsterBloodRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterDieRsp_descriptor_, &CSMonsterDieRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSABMonsterReq_descriptor_, &CSABMonsterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSABMonsterRsp_descriptor_, &CSABMonsterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSABMonsterRsp_MonInfo_descriptor_, &CSABMonsterRsp_MonInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSAutoBattleReq_descriptor_, &CSAutoBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSAutoBattleRsp_descriptor_, &CSAutoBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSABRewardRsp_descriptor_, &CSABRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCancelAutoBattleReq_descriptor_, &CSCancelAutoBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCancelAutoBattleRsp_descriptor_, &CSCancelAutoBattleRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_5fbattle_2eproto() {
  delete CSPoint::default_instance_;
  delete CSPoint_reflection_;
  delete CSBattleMoveReq::default_instance_;
  delete CSBattleMoveReq_reflection_;
  delete CSBattleMoveRsp::default_instance_;
  delete CSBattleMoveRsp_reflection_;
  delete MonsterMoveValue::default_instance_;
  delete MonsterMoveValue_reflection_;
  delete CSMonsterMoveRsp::default_instance_;
  delete CSMonsterMoveRsp_reflection_;
  delete CSBattleCreateReq::default_instance_;
  delete CSBattleCreateReq_reflection_;
  delete MonsterBattleInfo::default_instance_;
  delete MonsterBattleInfo_reflection_;
  delete MonsterInfo::default_instance_;
  delete MonsterInfo_reflection_;
  delete CSBattleCreateRsp::default_instance_;
  delete CSBattleCreateRsp_reflection_;
  delete CSBattleMonsterCreateRsp::default_instance_;
  delete CSBattleMonsterCreateRsp_reflection_;
  delete CSBattleUserJoinRsp::default_instance_;
  delete CSBattleUserJoinRsp_reflection_;
  delete CSBattleUserLeaveRsp::default_instance_;
  delete CSBattleUserLeaveRsp_reflection_;
  delete CSBattleLoadCompleteReq::default_instance_;
  delete CSBattleLoadCompleteReq_reflection_;
  delete CSBattleLoadCompleteRsp::default_instance_;
  delete CSBattleLoadCompleteRsp_reflection_;
  delete CSBattleLeaveReq::default_instance_;
  delete CSBattleLeaveReq_reflection_;
  delete CSBattleLeaveRsp::default_instance_;
  delete CSBattleLeaveRsp_reflection_;
  delete CSBattleTimeoutRsp::default_instance_;
  delete CSBattleTimeoutRsp_reflection_;
  delete CSBattlePlayerDelRsp::default_instance_;
  delete CSBattlePlayerDelRsp_reflection_;
  delete AttackMonsterInfo::default_instance_;
  delete AttackMonsterInfo_reflection_;
  delete CSAttackMonsterBackInfo::default_instance_;
  delete CSAttackMonsterBackInfo_reflection_;
  delete CSMonsterAttackInfo::default_instance_;
  delete CSMonsterAttackInfo_reflection_;
  delete CSMonsterEffectInfo::default_instance_;
  delete CSMonsterEffectInfo_reflection_;
  delete CSMonsterAttackRsp::default_instance_;
  delete CSMonsterAttackRsp_reflection_;
  delete CSMonsterEffectRsp::default_instance_;
  delete CSMonsterEffectRsp_reflection_;
  delete CSMonsterHitRsp::default_instance_;
  delete CSMonsterHitRsp_reflection_;
  delete CSMonsterHitRsp_UserInfo::default_instance_;
  delete CSMonsterHitRsp_UserInfo_reflection_;
  delete CSSkillBeginReq::default_instance_;
  delete CSSkillBeginReq_reflection_;
  delete CSSkillBeginRsp::default_instance_;
  delete CSSkillBeginRsp_reflection_;
  delete CSPlayerAttackReq::default_instance_;
  delete CSPlayerAttackReq_reflection_;
  delete CSPlayerAttackRsp::default_instance_;
  delete CSPlayerAttackRsp_reflection_;
  delete AttackPlayerInfo::default_instance_;
  delete AttackPlayerInfo_reflection_;
  delete CSPlayerHitPlayerReq::default_instance_;
  delete CSPlayerHitPlayerReq_reflection_;
  delete CSPlayerHitPlayerRsp::default_instance_;
  delete CSPlayerHitPlayerRsp_reflection_;
  delete CSPlayerHPRsp::default_instance_;
  delete CSPlayerHPRsp_reflection_;
  delete CSMonsterBloodRsp::default_instance_;
  delete CSMonsterBloodRsp_reflection_;
  delete CSMonsterDieRsp::default_instance_;
  delete CSMonsterDieRsp_reflection_;
  delete CSABMonsterReq::default_instance_;
  delete CSABMonsterReq_reflection_;
  delete CSABMonsterRsp::default_instance_;
  delete CSABMonsterRsp_reflection_;
  delete CSABMonsterRsp_MonInfo::default_instance_;
  delete CSABMonsterRsp_MonInfo_reflection_;
  delete CSAutoBattleReq::default_instance_;
  delete CSAutoBattleReq_reflection_;
  delete CSAutoBattleRsp::default_instance_;
  delete CSAutoBattleRsp_reflection_;
  delete CSABRewardRsp::default_instance_;
  delete CSABRewardRsp_reflection_;
  delete CSCancelAutoBattleReq::default_instance_;
  delete CSCancelAutoBattleReq_reflection_;
  delete CSCancelAutoBattleRsp::default_instance_;
  delete CSCancelAutoBattleRsp_reflection_;
}

void protobuf_AddDesc_cs_5fbattle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_cs_5fcore_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017cs_battle.proto\032\rcs_core.proto\"%\n\007CSPo"
    "int\022\014\n\004xpos\030\001 \002(\005\022\014\n\004ypos\030\002 \002(\005\"\\\n\017CSBat"
    "tleMoveReq\022\n\n\002id\030\001 \002(\r\022\030\n\006direct\030\002 \002(\0132\010"
    ".CSPoint\022\025\n\003pos\030\003 \002(\0132\010.CSPoint\022\014\n\004time\030"
    "\004 \002(\r\"\\\n\017CSBattleMoveRsp\022\n\n\002id\030\001 \002(\r\022\030\n\006"
    "direct\030\002 \002(\0132\010.CSPoint\022\025\n\003pos\030\003 \002(\0132\010.CS"
    "Point\022\014\n\004time\030\004 \002(\r\"Q\n\020MonsterMoveValue\022"
    "\n\n\002id\030\001 \002(\r\022\030\n\006direct\030\002 \002(\0132\010.CSPoint\022\027\n"
    "\005paths\030\003 \003(\0132\010.CSPoint\"4\n\020CSMonsterMoveR"
    "sp\022 \n\005moves\030\001 \003(\0132\021.MonsterMoveValue\"6\n\021"
    "CSBattleCreateReq\022\021\n\tbattle_id\030\001 \002(\r\022\016\n\006"
    "map_id\030\002 \002(\r\"\303\002\n\021MonsterBattleInfo\022\027\n\017ph"
    "ysical_attack\030\001 \002(\r\022\024\n\014magic_attack\030\002 \002("
    "\r\022\024\n\014skill_attack\030\003 \002(\r\022\030\n\020physical_defe"
    "nce\030\004 \002(\r\022\025\n\rmagic_defence\030\005 \002(\r\022\025\n\rskil"
    "l_defence\030\006 \002(\r\022\024\n\014health_point\030\007 \002(\r\022\020\n"
    "\010accurate\030\010 \002(\r\022\r\n\005dodge\030\t \002(\r\022\r\n\005wreck\030"
    "\n \002(\r\022\r\n\005parry\030\013 \002(\r\022\027\n\017critical_strike\030"
    "\014 \002(\r\022\020\n\010tenacity\030\r \002(\r\022\014\n\004slay\030\016 \002(\r\022\023\n"
    "\013proficiency\030\017 \002(\r\"\362\001\n\013MonsterInfo\022\n\n\002id"
    "\030\001 \002(\r\022\017\n\007type_id\030\002 \002(\r\022\r\n\005level\030\003 \002(\r\022\r"
    "\n\005blood\030\004 \002(\r\022\027\n\005point\030\005 \002(\0132\010.CSPoint\022\030"
    "\n\006direct\030\006 \002(\0132\010.CSPoint\022\r\n\005speed\030\007 \002(\r\022"
    "\014\n\004boss\030\010 \002(\010\022 \n\005moves\030\t \002(\0132\021.MonsterMo"
    "veValue\022\'\n\013battle_info\030\n \001(\0132\022.MonsterBa"
    "ttleInfo\022\r\n\005elite\030\013 \002(\010\"\335\001\n\021CSBattleCrea"
    "teRsp\022!\n\013monsterinfo\030\001 \003(\0132\014.MonsterInfo"
    "\022 \n\010userinfo\030\002 \003(\0132\016.BasicUserInfo\022\021\n\tba"
    "ttle_id\030\003 \002(\r\022\016\n\006map_id\030\004 \002(\r\022\030\n\006portal\030"
    "\005 \002(\0132\010.CSPoint\022\025\n\rportal_map_id\030\006 \002(\r\022\017"
    "\n\007timeout\030\007 \001(\r\022\036\n\014monsterbirth\030\010 \003(\0132\010."
    "CSPoint\"=\n\030CSBattleMonsterCreateRsp\022!\n\013m"
    "onsterinfo\030\001 \003(\0132\014.MonsterInfo\"7\n\023CSBatt"
    "leUserJoinRsp\022 \n\010userinfo\030\001 \003(\0132\016.BasicU"
    "serInfo\"&\n\024CSBattleUserLeaveRsp\022\016\n\006useri"
    "d\030\001 \002(\r\"\031\n\027CSBattleLoadCompleteReq\"*\n\027CS"
    "BattleLoadCompleteRsp\022\017\n\007timeout\030\001 \002(\010\"\022"
    "\n\020CSBattleLeaveReq\"P\n\020CSBattleLeaveRsp\022\022"
    "\n\ninitiative\030\001 \002(\010\022\014\n\004star\030\002 \001(\r\022\032\n\007rewa"
    "rds\030\003 \001(\0132\t.CSReward\"\024\n\022CSBattleTimeoutR"
    "sp\"\026\n\024CSBattlePlayerDelRsp\"\214\001\n\021AttackMon"
    "sterInfo\022\n\n\002id\030\001 \002(\r\022\033\n\tstart_pos\030\002 \002(\0132"
    "\010.CSPoint\022\025\n\003pos\030\003 \002(\0132\010.CSPoint\022\030\n\006dire"
    "ct\030\004 \002(\0132\010.CSPoint\022\r\n\005blood\030\005 \002(\r\022\016\n\006sta"
    "tus\030\006 \002(\r\"Y\n\027CSAttackMonsterBackInfo\022\n\n\002"
    "id\030\001 \002(\r\022\024\n\014monster_type\030\002 \002(\r\022\r\n\005blood\030"
    "\003 \002(\r\022\r\n\005elite\030\004 \002(\010\"\367\001\n\023CSMonsterAttack"
    "Info\022\n\n\002id\030\001 \002(\r\022\025\n\003pos\030\002 \002(\0132\010.CSPoint\022"
    "\030\n\006direct\030\003 \002(\0132\010.CSPoint\022\021\n\taction_id\030\004"
    " \002(\r\022\014\n\004type\030\005 \002(\r\022\016\n\006userid\030\006 \002(\r\022\021\n\tef"
    "fect_id\030\007 \001(\r\022\033\n\tstart_pos\030\010 \001(\0132\010.CSPoi"
    "nt\022\031\n\007end_pos\030\t \001(\0132\010.CSPoint\022\023\n\013skill_s"
    "peed\030\n \001(\r\022\022\n\ndelay_time\030\013 \001(\r\"\211\001\n\023CSMon"
    "sterEffectInfo\022\021\n\teffect_id\030\001 \001(\r\022\033\n\tsta"
    "rt_pos\030\002 \001(\0132\010.CSPoint\022\031\n\007end_pos\030\003 \001(\0132"
    "\010.CSPoint\022\023\n\013skill_speed\030\004 \001(\r\022\022\n\ndelay_"
    "time\030\005 \001(\r\";\n\022CSMonsterAttackRsp\022%\n\007atta"
    "cks\030\001 \003(\0132\024.CSMonsterAttackInfo\";\n\022CSMon"
    "sterEffectRsp\022%\n\007effects\030\001 \003(\0132\024.CSMonst"
    "erEffectInfo\"y\n\017CSMonsterHitRsp\022(\n\005users"
    "\030\003 \003(\0132\031.CSMonsterHitRsp.UserInfo\032<\n\010Use"
    "rInfo\022\021\n\thurt_type\030\002 \002(\r\022\016\n\006userid\030\003 \002(\r"
    "\022\r\n\005blood\030\004 \002(\r\"\304\001\n\017CSSkillBeginReq\022\016\n\006u"
    "serid\030\001 \002(\r\022\021\n\taction_id\030\002 \002(\r\022\025\n\003pos\030\003 "
    "\002(\0132\010.CSPoint\022\023\n\013start_dir_x\030\004 \002(\002\022\023\n\013st"
    "art_dir_y\030\005 \002(\002\022\034\n\ntarget_pos\030\006 \002(\0132\010.CS"
    "Point\022\020\n\010direct_x\030\007 \002(\002\022\020\n\010direct_y\030\010 \002("
    "\002\022\013\n\003aim\030\t \002(\010\"\304\001\n\017CSSkillBeginRsp\022\016\n\006us"
    "erid\030\001 \002(\r\022\021\n\taction_id\030\002 \002(\r\022\025\n\003pos\030\003 \002"
    "(\0132\010.CSPoint\022\023\n\013start_dir_x\030\004 \002(\002\022\023\n\013sta"
    "rt_dir_y\030\005 \002(\002\022\034\n\ntarget_pos\030\006 \002(\0132\010.CSP"
    "oint\022\020\n\010direct_x\030\007 \002(\002\022\020\n\010direct_y\030\010 \002(\002"
    "\022\013\n\003aim\030\t \002(\010\"\322\001\n\021CSPlayerAttackReq\022\016\n\006u"
    "serid\030\001 \002(\r\022\033\n\tstart_pos\030\002 \002(\0132\010.CSPoint"
    "\022\036\n\014start_direct\030\003 \002(\0132\010.CSPoint\022\031\n\007end_"
    "pos\030\004 \002(\0132\010.CSPoint\022\034\n\nend_direct\030\005 \002(\0132"
    "\010.CSPoint\022\021\n\taction_id\030\006 \002(\r\022$\n\010monsters"
    "\030\007 \003(\0132\022.AttackMonsterInfo\"\322\001\n\021CSPlayerA"
    "ttackRsp\022\016\n\006userid\030\001 \002(\r\022\033\n\tstart_pos\030\002 "
    "\002(\0132\010.CSPoint\022\036\n\014start_direct\030\003 \002(\0132\010.CS"
    "Point\022\031\n\007end_pos\030\004 \002(\0132\010.CSPoint\022\034\n\nend_"
    "direct\030\005 \002(\0132\010.CSPoint\022\021\n\taction_id\030\006 \002("
    "\r\022$\n\010monsters\030\007 \003(\0132\022.AttackMonsterInfo\""
    "D\n\020AttackPlayerInfo\022\016\n\006userid\030\001 \002(\r\022\r\n\005b"
    "lood\030\002 \002(\r\022\021\n\thurt_type\030\003 \002(\r\"\321\001\n\024CSPlay"
    "erHitPlayerReq\022\016\n\006userid\030\001 \002(\r\022\033\n\tstart_"
    "pos\030\002 \002(\0132\010.CSPoint\022\036\n\014start_direct\030\003 \002("
    "\0132\010.CSPoint\022\031\n\007end_pos\030\004 \002(\0132\010.CSPoint\022\034"
    "\n\nend_direct\030\005 \002(\0132\010.CSPoint\022\021\n\taction_i"
    "d\030\006 \002(\r\022 \n\005users\030\007 \003(\0132\021.AttackPlayerInf"
    "o\"\321\001\n\024CSPlayerHitPlayerRsp\022\016\n\006userid\030\001 \002"
    "(\r\022\033\n\tstart_pos\030\002 \002(\0132\010.CSPoint\022\036\n\014start"
    "_direct\030\003 \002(\0132\010.CSPoint\022\031\n\007end_pos\030\004 \002(\013"
    "2\010.CSPoint\022\034\n\nend_direct\030\005 \002(\0132\010.CSPoint"
    "\022\021\n\taction_id\030\006 \002(\r\022 \n\005users\030\007 \003(\0132\021.Att"
    "ackPlayerInfo\".\n\rCSPlayerHPRsp\022\016\n\006userid"
    "\030\001 \002(\r\022\r\n\005blood\030\002 \002(\r\"\?\n\021CSMonsterBloodR"
    "sp\022*\n\010monsters\030\001 \003(\0132\030.CSAttackMonsterBa"
    "ckInfo\"#\n\017CSMonsterDieRsp\022\020\n\010monsters\030\001 "
    "\003(\r\"%\n\016CSABMonsterReq\022\023\n\013instance_id\030\001 \002"
    "(\r\"}\n\016CSABMonsterRsp\022\023\n\013instance_id\030\001 \002("
    "\r\022*\n\tmon_infos\030\002 \003(\0132\027.CSABMonsterRsp.Mo"
    "nInfo\032*\n\007MonInfo\022\016\n\006mon_id\030\001 \002(\r\022\017\n\007mon_"
    "num\030\002 \002(\r\"8\n\017CSAutoBattleReq\022\023\n\013instance"
    "_id\030\001 \002(\r\022\020\n\010turn_num\030\002 \002(\r\"\?\n\017CSAutoBat"
    "tleRsp\022\013\n\003ret\030\001 \002(\r\022\n\n\002cd\030\002 \002(\r\022\023\n\013insta"
    "nce_id\030\003 \002(\r\"@\n\rCSABRewardRsp\022\023\n\013instanc"
    "e_id\030\001 \002(\r\022\032\n\007rewards\030\002 \002(\0132\t.CSReward\"\027"
    "\n\025CSCancelAutoBattleReq\"\027\n\025CSCancelAutoB"
    "attleRsp", 4368);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs_battle.proto", &protobuf_RegisterTypes);
  CSPoint::default_instance_ = new CSPoint();
  CSBattleMoveReq::default_instance_ = new CSBattleMoveReq();
  CSBattleMoveRsp::default_instance_ = new CSBattleMoveRsp();
  MonsterMoveValue::default_instance_ = new MonsterMoveValue();
  CSMonsterMoveRsp::default_instance_ = new CSMonsterMoveRsp();
  CSBattleCreateReq::default_instance_ = new CSBattleCreateReq();
  MonsterBattleInfo::default_instance_ = new MonsterBattleInfo();
  MonsterInfo::default_instance_ = new MonsterInfo();
  CSBattleCreateRsp::default_instance_ = new CSBattleCreateRsp();
  CSBattleMonsterCreateRsp::default_instance_ = new CSBattleMonsterCreateRsp();
  CSBattleUserJoinRsp::default_instance_ = new CSBattleUserJoinRsp();
  CSBattleUserLeaveRsp::default_instance_ = new CSBattleUserLeaveRsp();
  CSBattleLoadCompleteReq::default_instance_ = new CSBattleLoadCompleteReq();
  CSBattleLoadCompleteRsp::default_instance_ = new CSBattleLoadCompleteRsp();
  CSBattleLeaveReq::default_instance_ = new CSBattleLeaveReq();
  CSBattleLeaveRsp::default_instance_ = new CSBattleLeaveRsp();
  CSBattleTimeoutRsp::default_instance_ = new CSBattleTimeoutRsp();
  CSBattlePlayerDelRsp::default_instance_ = new CSBattlePlayerDelRsp();
  AttackMonsterInfo::default_instance_ = new AttackMonsterInfo();
  CSAttackMonsterBackInfo::default_instance_ = new CSAttackMonsterBackInfo();
  CSMonsterAttackInfo::default_instance_ = new CSMonsterAttackInfo();
  CSMonsterEffectInfo::default_instance_ = new CSMonsterEffectInfo();
  CSMonsterAttackRsp::default_instance_ = new CSMonsterAttackRsp();
  CSMonsterEffectRsp::default_instance_ = new CSMonsterEffectRsp();
  CSMonsterHitRsp::default_instance_ = new CSMonsterHitRsp();
  CSMonsterHitRsp_UserInfo::default_instance_ = new CSMonsterHitRsp_UserInfo();
  CSSkillBeginReq::default_instance_ = new CSSkillBeginReq();
  CSSkillBeginRsp::default_instance_ = new CSSkillBeginRsp();
  CSPlayerAttackReq::default_instance_ = new CSPlayerAttackReq();
  CSPlayerAttackRsp::default_instance_ = new CSPlayerAttackRsp();
  AttackPlayerInfo::default_instance_ = new AttackPlayerInfo();
  CSPlayerHitPlayerReq::default_instance_ = new CSPlayerHitPlayerReq();
  CSPlayerHitPlayerRsp::default_instance_ = new CSPlayerHitPlayerRsp();
  CSPlayerHPRsp::default_instance_ = new CSPlayerHPRsp();
  CSMonsterBloodRsp::default_instance_ = new CSMonsterBloodRsp();
  CSMonsterDieRsp::default_instance_ = new CSMonsterDieRsp();
  CSABMonsterReq::default_instance_ = new CSABMonsterReq();
  CSABMonsterRsp::default_instance_ = new CSABMonsterRsp();
  CSABMonsterRsp_MonInfo::default_instance_ = new CSABMonsterRsp_MonInfo();
  CSAutoBattleReq::default_instance_ = new CSAutoBattleReq();
  CSAutoBattleRsp::default_instance_ = new CSAutoBattleRsp();
  CSABRewardRsp::default_instance_ = new CSABRewardRsp();
  CSCancelAutoBattleReq::default_instance_ = new CSCancelAutoBattleReq();
  CSCancelAutoBattleRsp::default_instance_ = new CSCancelAutoBattleRsp();
  CSPoint::default_instance_->InitAsDefaultInstance();
  CSBattleMoveReq::default_instance_->InitAsDefaultInstance();
  CSBattleMoveRsp::default_instance_->InitAsDefaultInstance();
  MonsterMoveValue::default_instance_->InitAsDefaultInstance();
  CSMonsterMoveRsp::default_instance_->InitAsDefaultInstance();
  CSBattleCreateReq::default_instance_->InitAsDefaultInstance();
  MonsterBattleInfo::default_instance_->InitAsDefaultInstance();
  MonsterInfo::default_instance_->InitAsDefaultInstance();
  CSBattleCreateRsp::default_instance_->InitAsDefaultInstance();
  CSBattleMonsterCreateRsp::default_instance_->InitAsDefaultInstance();
  CSBattleUserJoinRsp::default_instance_->InitAsDefaultInstance();
  CSBattleUserLeaveRsp::default_instance_->InitAsDefaultInstance();
  CSBattleLoadCompleteReq::default_instance_->InitAsDefaultInstance();
  CSBattleLoadCompleteRsp::default_instance_->InitAsDefaultInstance();
  CSBattleLeaveReq::default_instance_->InitAsDefaultInstance();
  CSBattleLeaveRsp::default_instance_->InitAsDefaultInstance();
  CSBattleTimeoutRsp::default_instance_->InitAsDefaultInstance();
  CSBattlePlayerDelRsp::default_instance_->InitAsDefaultInstance();
  AttackMonsterInfo::default_instance_->InitAsDefaultInstance();
  CSAttackMonsterBackInfo::default_instance_->InitAsDefaultInstance();
  CSMonsterAttackInfo::default_instance_->InitAsDefaultInstance();
  CSMonsterEffectInfo::default_instance_->InitAsDefaultInstance();
  CSMonsterAttackRsp::default_instance_->InitAsDefaultInstance();
  CSMonsterEffectRsp::default_instance_->InitAsDefaultInstance();
  CSMonsterHitRsp::default_instance_->InitAsDefaultInstance();
  CSMonsterHitRsp_UserInfo::default_instance_->InitAsDefaultInstance();
  CSSkillBeginReq::default_instance_->InitAsDefaultInstance();
  CSSkillBeginRsp::default_instance_->InitAsDefaultInstance();
  CSPlayerAttackReq::default_instance_->InitAsDefaultInstance();
  CSPlayerAttackRsp::default_instance_->InitAsDefaultInstance();
  AttackPlayerInfo::default_instance_->InitAsDefaultInstance();
  CSPlayerHitPlayerReq::default_instance_->InitAsDefaultInstance();
  CSPlayerHitPlayerRsp::default_instance_->InitAsDefaultInstance();
  CSPlayerHPRsp::default_instance_->InitAsDefaultInstance();
  CSMonsterBloodRsp::default_instance_->InitAsDefaultInstance();
  CSMonsterDieRsp::default_instance_->InitAsDefaultInstance();
  CSABMonsterReq::default_instance_->InitAsDefaultInstance();
  CSABMonsterRsp::default_instance_->InitAsDefaultInstance();
  CSABMonsterRsp_MonInfo::default_instance_->InitAsDefaultInstance();
  CSAutoBattleReq::default_instance_->InitAsDefaultInstance();
  CSAutoBattleRsp::default_instance_->InitAsDefaultInstance();
  CSABRewardRsp::default_instance_->InitAsDefaultInstance();
  CSCancelAutoBattleReq::default_instance_->InitAsDefaultInstance();
  CSCancelAutoBattleRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_5fbattle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_5fbattle_2eproto {
  StaticDescriptorInitializer_cs_5fbattle_2eproto() {
    protobuf_AddDesc_cs_5fbattle_2eproto();
  }
} static_descriptor_initializer_cs_5fbattle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CSPoint::kXposFieldNumber;
const int CSPoint::kYposFieldNumber;
#endif  // !_MSC_VER

CSPoint::CSPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPoint::InitAsDefaultInstance() {
}

CSPoint::CSPoint(const CSPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPoint::SharedCtor() {
  _cached_size_ = 0;
  xpos_ = 0;
  ypos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPoint::~CSPoint() {
  SharedDtor();
}

void CSPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPoint_descriptor_;
}

const CSPoint& CSPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSPoint* CSPoint::default_instance_ = NULL;

CSPoint* CSPoint::New() const {
  return new CSPoint;
}

void CSPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    xpos_ = 0;
    ypos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 xpos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ypos;
        break;
      }

      // required int32 ypos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 xpos = 1;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->xpos(), output);
  }

  // required int32 ypos = 2;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ypos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 xpos = 1;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->xpos(), target);
  }

  // required int32 ypos = 2;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ypos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 xpos = 1;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpos());
    }

    // required int32 ypos = 2;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ypos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPoint::MergeFrom(const CSPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPoint::CopyFrom(const CSPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSPoint::Swap(CSPoint* other) {
  if (other != this) {
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPoint_descriptor_;
  metadata.reflection = CSPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleMoveReq::kIdFieldNumber;
const int CSBattleMoveReq::kDirectFieldNumber;
const int CSBattleMoveReq::kPosFieldNumber;
const int CSBattleMoveReq::kTimeFieldNumber;
#endif  // !_MSC_VER

CSBattleMoveReq::CSBattleMoveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleMoveReq::InitAsDefaultInstance() {
  direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSBattleMoveReq::CSBattleMoveReq(const CSBattleMoveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleMoveReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  direct_ = NULL;
  pos_ = NULL;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleMoveReq::~CSBattleMoveReq() {
  SharedDtor();
}

void CSBattleMoveReq::SharedDtor() {
  if (this != default_instance_) {
    delete direct_;
    delete pos_;
  }
}

void CSBattleMoveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleMoveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleMoveReq_descriptor_;
}

const CSBattleMoveReq& CSBattleMoveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSBattleMoveReq* CSBattleMoveReq::default_instance_ = NULL;

CSBattleMoveReq* CSBattleMoveReq::New() const {
  return new CSBattleMoveReq;
}

void CSBattleMoveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_direct()) {
      if (direct_ != NULL) direct_->::CSPoint::Clear();
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleMoveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_direct;
        break;
      }

      // required .CSPoint direct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // required .CSPoint pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // required uint32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleMoveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .CSPoint direct = 2;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->direct(), output);
  }

  // required .CSPoint pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // required uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleMoveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .CSPoint direct = 2;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->direct(), target);
  }

  // required .CSPoint pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // required uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleMoveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .CSPoint direct = 2;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direct());
    }

    // required .CSPoint pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleMoveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleMoveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleMoveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleMoveReq::MergeFrom(const CSBattleMoveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_direct()) {
      mutable_direct()->::CSPoint::MergeFrom(from.direct());
    }
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleMoveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleMoveReq::CopyFrom(const CSBattleMoveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleMoveReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_direct()) {
    if (!this->direct().IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void CSBattleMoveReq::Swap(CSBattleMoveReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(direct_, other->direct_);
    std::swap(pos_, other->pos_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleMoveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleMoveReq_descriptor_;
  metadata.reflection = CSBattleMoveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleMoveRsp::kIdFieldNumber;
const int CSBattleMoveRsp::kDirectFieldNumber;
const int CSBattleMoveRsp::kPosFieldNumber;
const int CSBattleMoveRsp::kTimeFieldNumber;
#endif  // !_MSC_VER

CSBattleMoveRsp::CSBattleMoveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleMoveRsp::InitAsDefaultInstance() {
  direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSBattleMoveRsp::CSBattleMoveRsp(const CSBattleMoveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleMoveRsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  direct_ = NULL;
  pos_ = NULL;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleMoveRsp::~CSBattleMoveRsp() {
  SharedDtor();
}

void CSBattleMoveRsp::SharedDtor() {
  if (this != default_instance_) {
    delete direct_;
    delete pos_;
  }
}

void CSBattleMoveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleMoveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleMoveRsp_descriptor_;
}

const CSBattleMoveRsp& CSBattleMoveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSBattleMoveRsp* CSBattleMoveRsp::default_instance_ = NULL;

CSBattleMoveRsp* CSBattleMoveRsp::New() const {
  return new CSBattleMoveRsp;
}

void CSBattleMoveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_direct()) {
      if (direct_ != NULL) direct_->::CSPoint::Clear();
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleMoveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_direct;
        break;
      }

      // required .CSPoint direct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // required .CSPoint pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // required uint32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleMoveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .CSPoint direct = 2;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->direct(), output);
  }

  // required .CSPoint pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // required uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleMoveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .CSPoint direct = 2;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->direct(), target);
  }

  // required .CSPoint pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // required uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleMoveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .CSPoint direct = 2;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direct());
    }

    // required .CSPoint pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleMoveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleMoveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleMoveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleMoveRsp::MergeFrom(const CSBattleMoveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_direct()) {
      mutable_direct()->::CSPoint::MergeFrom(from.direct());
    }
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleMoveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleMoveRsp::CopyFrom(const CSBattleMoveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleMoveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_direct()) {
    if (!this->direct().IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void CSBattleMoveRsp::Swap(CSBattleMoveRsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(direct_, other->direct_);
    std::swap(pos_, other->pos_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleMoveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleMoveRsp_descriptor_;
  metadata.reflection = CSBattleMoveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterMoveValue::kIdFieldNumber;
const int MonsterMoveValue::kDirectFieldNumber;
const int MonsterMoveValue::kPathsFieldNumber;
#endif  // !_MSC_VER

MonsterMoveValue::MonsterMoveValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterMoveValue::InitAsDefaultInstance() {
  direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

MonsterMoveValue::MonsterMoveValue(const MonsterMoveValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterMoveValue::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  direct_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterMoveValue::~MonsterMoveValue() {
  SharedDtor();
}

void MonsterMoveValue::SharedDtor() {
  if (this != default_instance_) {
    delete direct_;
  }
}

void MonsterMoveValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterMoveValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterMoveValue_descriptor_;
}

const MonsterMoveValue& MonsterMoveValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

MonsterMoveValue* MonsterMoveValue::default_instance_ = NULL;

MonsterMoveValue* MonsterMoveValue::New() const {
  return new MonsterMoveValue;
}

void MonsterMoveValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_direct()) {
      if (direct_ != NULL) direct_->::CSPoint::Clear();
    }
  }
  paths_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterMoveValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_direct;
        break;
      }

      // required .CSPoint direct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_paths;
        break;
      }

      // repeated .CSPoint paths = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_paths()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_paths;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterMoveValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .CSPoint direct = 2;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->direct(), output);
  }

  // repeated .CSPoint paths = 3;
  for (int i = 0; i < this->paths_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->paths(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterMoveValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .CSPoint direct = 2;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->direct(), target);
  }

  // repeated .CSPoint paths = 3;
  for (int i = 0; i < this->paths_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->paths(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterMoveValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .CSPoint direct = 2;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direct());
    }

  }
  // repeated .CSPoint paths = 3;
  total_size += 1 * this->paths_size();
  for (int i = 0; i < this->paths_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paths(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterMoveValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterMoveValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterMoveValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterMoveValue::MergeFrom(const MonsterMoveValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  paths_.MergeFrom(from.paths_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_direct()) {
      mutable_direct()->::CSPoint::MergeFrom(from.direct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterMoveValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterMoveValue::CopyFrom(const MonsterMoveValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterMoveValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_direct()) {
    if (!this->direct().IsInitialized()) return false;
  }
  for (int i = 0; i < paths_size(); i++) {
    if (!this->paths(i).IsInitialized()) return false;
  }
  return true;
}

void MonsterMoveValue::Swap(MonsterMoveValue* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(direct_, other->direct_);
    paths_.Swap(&other->paths_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterMoveValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterMoveValue_descriptor_;
  metadata.reflection = MonsterMoveValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterMoveRsp::kMovesFieldNumber;
#endif  // !_MSC_VER

CSMonsterMoveRsp::CSMonsterMoveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterMoveRsp::InitAsDefaultInstance() {
}

CSMonsterMoveRsp::CSMonsterMoveRsp(const CSMonsterMoveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterMoveRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterMoveRsp::~CSMonsterMoveRsp() {
  SharedDtor();
}

void CSMonsterMoveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterMoveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterMoveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterMoveRsp_descriptor_;
}

const CSMonsterMoveRsp& CSMonsterMoveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSMonsterMoveRsp* CSMonsterMoveRsp::default_instance_ = NULL;

CSMonsterMoveRsp* CSMonsterMoveRsp::New() const {
  return new CSMonsterMoveRsp;
}

void CSMonsterMoveRsp::Clear() {
  moves_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterMoveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MonsterMoveValue moves = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_moves()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_moves;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterMoveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MonsterMoveValue moves = 1;
  for (int i = 0; i < this->moves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->moves(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterMoveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MonsterMoveValue moves = 1;
  for (int i = 0; i < this->moves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->moves(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterMoveRsp::ByteSize() const {
  int total_size = 0;

  // repeated .MonsterMoveValue moves = 1;
  total_size += 1 * this->moves_size();
  for (int i = 0; i < this->moves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->moves(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterMoveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterMoveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterMoveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterMoveRsp::MergeFrom(const CSMonsterMoveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  moves_.MergeFrom(from.moves_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterMoveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterMoveRsp::CopyFrom(const CSMonsterMoveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterMoveRsp::IsInitialized() const {

  for (int i = 0; i < moves_size(); i++) {
    if (!this->moves(i).IsInitialized()) return false;
  }
  return true;
}

void CSMonsterMoveRsp::Swap(CSMonsterMoveRsp* other) {
  if (other != this) {
    moves_.Swap(&other->moves_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterMoveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterMoveRsp_descriptor_;
  metadata.reflection = CSMonsterMoveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleCreateReq::kBattleIdFieldNumber;
const int CSBattleCreateReq::kMapIdFieldNumber;
#endif  // !_MSC_VER

CSBattleCreateReq::CSBattleCreateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleCreateReq::InitAsDefaultInstance() {
}

CSBattleCreateReq::CSBattleCreateReq(const CSBattleCreateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleCreateReq::SharedCtor() {
  _cached_size_ = 0;
  battle_id_ = 0u;
  map_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleCreateReq::~CSBattleCreateReq() {
  SharedDtor();
}

void CSBattleCreateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleCreateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleCreateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleCreateReq_descriptor_;
}

const CSBattleCreateReq& CSBattleCreateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSBattleCreateReq* CSBattleCreateReq::default_instance_ = NULL;

CSBattleCreateReq* CSBattleCreateReq::New() const {
  return new CSBattleCreateReq;
}

void CSBattleCreateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_id_ = 0u;
    map_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleCreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 battle_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_id_)));
          set_has_battle_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_id;
        break;
      }

      // required uint32 map_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleCreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 battle_id = 1;
  if (has_battle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->battle_id(), output);
  }

  // required uint32 map_id = 2;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->map_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleCreateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 battle_id = 1;
  if (has_battle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->battle_id(), target);
  }

  // required uint32 map_id = 2;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->map_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleCreateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 battle_id = 1;
    if (has_battle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_id());
    }

    // required uint32 map_id = 2;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleCreateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleCreateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleCreateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleCreateReq::MergeFrom(const CSBattleCreateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_id()) {
      set_battle_id(from.battle_id());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleCreateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleCreateReq::CopyFrom(const CSBattleCreateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleCreateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSBattleCreateReq::Swap(CSBattleCreateReq* other) {
  if (other != this) {
    std::swap(battle_id_, other->battle_id_);
    std::swap(map_id_, other->map_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleCreateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleCreateReq_descriptor_;
  metadata.reflection = CSBattleCreateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterBattleInfo::kPhysicalAttackFieldNumber;
const int MonsterBattleInfo::kMagicAttackFieldNumber;
const int MonsterBattleInfo::kSkillAttackFieldNumber;
const int MonsterBattleInfo::kPhysicalDefenceFieldNumber;
const int MonsterBattleInfo::kMagicDefenceFieldNumber;
const int MonsterBattleInfo::kSkillDefenceFieldNumber;
const int MonsterBattleInfo::kHealthPointFieldNumber;
const int MonsterBattleInfo::kAccurateFieldNumber;
const int MonsterBattleInfo::kDodgeFieldNumber;
const int MonsterBattleInfo::kWreckFieldNumber;
const int MonsterBattleInfo::kParryFieldNumber;
const int MonsterBattleInfo::kCriticalStrikeFieldNumber;
const int MonsterBattleInfo::kTenacityFieldNumber;
const int MonsterBattleInfo::kSlayFieldNumber;
const int MonsterBattleInfo::kProficiencyFieldNumber;
#endif  // !_MSC_VER

MonsterBattleInfo::MonsterBattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterBattleInfo::InitAsDefaultInstance() {
}

MonsterBattleInfo::MonsterBattleInfo(const MonsterBattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterBattleInfo::SharedCtor() {
  _cached_size_ = 0;
  physical_attack_ = 0u;
  magic_attack_ = 0u;
  skill_attack_ = 0u;
  physical_defence_ = 0u;
  magic_defence_ = 0u;
  skill_defence_ = 0u;
  health_point_ = 0u;
  accurate_ = 0u;
  dodge_ = 0u;
  wreck_ = 0u;
  parry_ = 0u;
  critical_strike_ = 0u;
  tenacity_ = 0u;
  slay_ = 0u;
  proficiency_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterBattleInfo::~MonsterBattleInfo() {
  SharedDtor();
}

void MonsterBattleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonsterBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterBattleInfo_descriptor_;
}

const MonsterBattleInfo& MonsterBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

MonsterBattleInfo* MonsterBattleInfo::default_instance_ = NULL;

MonsterBattleInfo* MonsterBattleInfo::New() const {
  return new MonsterBattleInfo;
}

void MonsterBattleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    physical_attack_ = 0u;
    magic_attack_ = 0u;
    skill_attack_ = 0u;
    physical_defence_ = 0u;
    magic_defence_ = 0u;
    skill_defence_ = 0u;
    health_point_ = 0u;
    accurate_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dodge_ = 0u;
    wreck_ = 0u;
    parry_ = 0u;
    critical_strike_ = 0u;
    tenacity_ = 0u;
    slay_ = 0u;
    proficiency_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 physical_attack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physical_attack_)));
          set_has_physical_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_magic_attack;
        break;
      }

      // required uint32 magic_attack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_attack_)));
          set_has_magic_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_attack;
        break;
      }

      // required uint32 skill_attack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_attack_)));
          set_has_skill_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_physical_defence;
        break;
      }

      // required uint32 physical_defence = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physical_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physical_defence_)));
          set_has_physical_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_magic_defence;
        break;
      }

      // required uint32 magic_defence = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_defence_)));
          set_has_magic_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_skill_defence;
        break;
      }

      // required uint32 skill_defence = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_defence_)));
          set_has_skill_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_health_point;
        break;
      }

      // required uint32 health_point = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_point_)));
          set_has_health_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_accurate;
        break;
      }

      // required uint32 accurate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accurate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accurate_)));
          set_has_accurate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dodge;
        break;
      }

      // required uint32 dodge = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_wreck;
        break;
      }

      // required uint32 wreck = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wreck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wreck_)));
          set_has_wreck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_parry;
        break;
      }

      // required uint32 parry = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parry_)));
          set_has_parry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_critical_strike;
        break;
      }

      // required uint32 critical_strike = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critical_strike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critical_strike_)));
          set_has_critical_strike();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tenacity;
        break;
      }

      // required uint32 tenacity = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tenacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tenacity_)));
          set_has_tenacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_slay;
        break;
      }

      // required uint32 slay = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slay_)));
          set_has_slay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_proficiency;
        break;
      }

      // required uint32 proficiency = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proficiency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proficiency_)));
          set_has_proficiency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 physical_attack = 1;
  if (has_physical_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->physical_attack(), output);
  }

  // required uint32 magic_attack = 2;
  if (has_magic_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->magic_attack(), output);
  }

  // required uint32 skill_attack = 3;
  if (has_skill_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_attack(), output);
  }

  // required uint32 physical_defence = 4;
  if (has_physical_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->physical_defence(), output);
  }

  // required uint32 magic_defence = 5;
  if (has_magic_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->magic_defence(), output);
  }

  // required uint32 skill_defence = 6;
  if (has_skill_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->skill_defence(), output);
  }

  // required uint32 health_point = 7;
  if (has_health_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->health_point(), output);
  }

  // required uint32 accurate = 8;
  if (has_accurate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->accurate(), output);
  }

  // required uint32 dodge = 9;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->dodge(), output);
  }

  // required uint32 wreck = 10;
  if (has_wreck()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->wreck(), output);
  }

  // required uint32 parry = 11;
  if (has_parry()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->parry(), output);
  }

  // required uint32 critical_strike = 12;
  if (has_critical_strike()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->critical_strike(), output);
  }

  // required uint32 tenacity = 13;
  if (has_tenacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->tenacity(), output);
  }

  // required uint32 slay = 14;
  if (has_slay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->slay(), output);
  }

  // required uint32 proficiency = 15;
  if (has_proficiency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->proficiency(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterBattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 physical_attack = 1;
  if (has_physical_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->physical_attack(), target);
  }

  // required uint32 magic_attack = 2;
  if (has_magic_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->magic_attack(), target);
  }

  // required uint32 skill_attack = 3;
  if (has_skill_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_attack(), target);
  }

  // required uint32 physical_defence = 4;
  if (has_physical_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->physical_defence(), target);
  }

  // required uint32 magic_defence = 5;
  if (has_magic_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->magic_defence(), target);
  }

  // required uint32 skill_defence = 6;
  if (has_skill_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->skill_defence(), target);
  }

  // required uint32 health_point = 7;
  if (has_health_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->health_point(), target);
  }

  // required uint32 accurate = 8;
  if (has_accurate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->accurate(), target);
  }

  // required uint32 dodge = 9;
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->dodge(), target);
  }

  // required uint32 wreck = 10;
  if (has_wreck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->wreck(), target);
  }

  // required uint32 parry = 11;
  if (has_parry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->parry(), target);
  }

  // required uint32 critical_strike = 12;
  if (has_critical_strike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->critical_strike(), target);
  }

  // required uint32 tenacity = 13;
  if (has_tenacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->tenacity(), target);
  }

  // required uint32 slay = 14;
  if (has_slay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->slay(), target);
  }

  // required uint32 proficiency = 15;
  if (has_proficiency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->proficiency(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterBattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 physical_attack = 1;
    if (has_physical_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physical_attack());
    }

    // required uint32 magic_attack = 2;
    if (has_magic_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic_attack());
    }

    // required uint32 skill_attack = 3;
    if (has_skill_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_attack());
    }

    // required uint32 physical_defence = 4;
    if (has_physical_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physical_defence());
    }

    // required uint32 magic_defence = 5;
    if (has_magic_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic_defence());
    }

    // required uint32 skill_defence = 6;
    if (has_skill_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_defence());
    }

    // required uint32 health_point = 7;
    if (has_health_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health_point());
    }

    // required uint32 accurate = 8;
    if (has_accurate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accurate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 dodge = 9;
    if (has_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge());
    }

    // required uint32 wreck = 10;
    if (has_wreck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wreck());
    }

    // required uint32 parry = 11;
    if (has_parry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parry());
    }

    // required uint32 critical_strike = 12;
    if (has_critical_strike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critical_strike());
    }

    // required uint32 tenacity = 13;
    if (has_tenacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tenacity());
    }

    // required uint32 slay = 14;
    if (has_slay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slay());
    }

    // required uint32 proficiency = 15;
    if (has_proficiency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proficiency());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterBattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterBattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterBattleInfo::MergeFrom(const MonsterBattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_physical_attack()) {
      set_physical_attack(from.physical_attack());
    }
    if (from.has_magic_attack()) {
      set_magic_attack(from.magic_attack());
    }
    if (from.has_skill_attack()) {
      set_skill_attack(from.skill_attack());
    }
    if (from.has_physical_defence()) {
      set_physical_defence(from.physical_defence());
    }
    if (from.has_magic_defence()) {
      set_magic_defence(from.magic_defence());
    }
    if (from.has_skill_defence()) {
      set_skill_defence(from.skill_defence());
    }
    if (from.has_health_point()) {
      set_health_point(from.health_point());
    }
    if (from.has_accurate()) {
      set_accurate(from.accurate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
    if (from.has_wreck()) {
      set_wreck(from.wreck());
    }
    if (from.has_parry()) {
      set_parry(from.parry());
    }
    if (from.has_critical_strike()) {
      set_critical_strike(from.critical_strike());
    }
    if (from.has_tenacity()) {
      set_tenacity(from.tenacity());
    }
    if (from.has_slay()) {
      set_slay(from.slay());
    }
    if (from.has_proficiency()) {
      set_proficiency(from.proficiency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterBattleInfo::CopyFrom(const MonsterBattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterBattleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;

  return true;
}

void MonsterBattleInfo::Swap(MonsterBattleInfo* other) {
  if (other != this) {
    std::swap(physical_attack_, other->physical_attack_);
    std::swap(magic_attack_, other->magic_attack_);
    std::swap(skill_attack_, other->skill_attack_);
    std::swap(physical_defence_, other->physical_defence_);
    std::swap(magic_defence_, other->magic_defence_);
    std::swap(skill_defence_, other->skill_defence_);
    std::swap(health_point_, other->health_point_);
    std::swap(accurate_, other->accurate_);
    std::swap(dodge_, other->dodge_);
    std::swap(wreck_, other->wreck_);
    std::swap(parry_, other->parry_);
    std::swap(critical_strike_, other->critical_strike_);
    std::swap(tenacity_, other->tenacity_);
    std::swap(slay_, other->slay_);
    std::swap(proficiency_, other->proficiency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterBattleInfo_descriptor_;
  metadata.reflection = MonsterBattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterInfo::kIdFieldNumber;
const int MonsterInfo::kTypeIdFieldNumber;
const int MonsterInfo::kLevelFieldNumber;
const int MonsterInfo::kBloodFieldNumber;
const int MonsterInfo::kPointFieldNumber;
const int MonsterInfo::kDirectFieldNumber;
const int MonsterInfo::kSpeedFieldNumber;
const int MonsterInfo::kBossFieldNumber;
const int MonsterInfo::kMovesFieldNumber;
const int MonsterInfo::kBattleInfoFieldNumber;
const int MonsterInfo::kEliteFieldNumber;
#endif  // !_MSC_VER

MonsterInfo::MonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterInfo::InitAsDefaultInstance() {
  point_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  moves_ = const_cast< ::MonsterMoveValue*>(&::MonsterMoveValue::default_instance());
  battle_info_ = const_cast< ::MonsterBattleInfo*>(&::MonsterBattleInfo::default_instance());
}

MonsterInfo::MonsterInfo(const MonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_id_ = 0u;
  level_ = 0u;
  blood_ = 0u;
  point_ = NULL;
  direct_ = NULL;
  speed_ = 0u;
  boss_ = false;
  moves_ = NULL;
  battle_info_ = NULL;
  elite_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterInfo::~MonsterInfo() {
  SharedDtor();
}

void MonsterInfo::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
    delete direct_;
    delete moves_;
    delete battle_info_;
  }
}

void MonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterInfo_descriptor_;
}

const MonsterInfo& MonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

MonsterInfo* MonsterInfo::default_instance_ = NULL;

MonsterInfo* MonsterInfo::New() const {
  return new MonsterInfo;
}

void MonsterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_id_ = 0u;
    level_ = 0u;
    blood_ = 0u;
    if (has_point()) {
      if (point_ != NULL) point_->::CSPoint::Clear();
    }
    if (has_direct()) {
      if (direct_ != NULL) direct_->::CSPoint::Clear();
    }
    speed_ = 0u;
    boss_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_moves()) {
      if (moves_ != NULL) moves_->::MonsterMoveValue::Clear();
    }
    if (has_battle_info()) {
      if (battle_info_ != NULL) battle_info_->::MonsterBattleInfo::Clear();
    }
    elite_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type_id;
        break;
      }

      // required uint32 type_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_blood;
        break;
      }

      // required uint32 blood = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_point;
        break;
      }

      // required .CSPoint point = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_direct;
        break;
      }

      // required .CSPoint direct = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_speed;
        break;
      }

      // required uint32 speed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_boss;
        break;
      }

      // required bool boss = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boss_)));
          set_has_boss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_moves;
        break;
      }

      // required .MonsterMoveValue moves = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_moves()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_battle_info;
        break;
      }

      // optional .MonsterBattleInfo battle_info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_elite;
        break;
      }

      // required bool elite = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &elite_)));
          set_has_elite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 type_id = 2;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type_id(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint32 blood = 4;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->blood(), output);
  }

  // required .CSPoint point = 5;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->point(), output);
  }

  // required .CSPoint direct = 6;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->direct(), output);
  }

  // required uint32 speed = 7;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->speed(), output);
  }

  // required bool boss = 8;
  if (has_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->boss(), output);
  }

  // required .MonsterMoveValue moves = 9;
  if (has_moves()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->moves(), output);
  }

  // optional .MonsterBattleInfo battle_info = 10;
  if (has_battle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->battle_info(), output);
  }

  // required bool elite = 11;
  if (has_elite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->elite(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 type_id = 2;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type_id(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required uint32 blood = 4;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->blood(), target);
  }

  // required .CSPoint point = 5;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->point(), target);
  }

  // required .CSPoint direct = 6;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->direct(), target);
  }

  // required uint32 speed = 7;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->speed(), target);
  }

  // required bool boss = 8;
  if (has_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->boss(), target);
  }

  // required .MonsterMoveValue moves = 9;
  if (has_moves()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->moves(), target);
  }

  // optional .MonsterBattleInfo battle_info = 10;
  if (has_battle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->battle_info(), target);
  }

  // required bool elite = 11;
  if (has_elite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->elite(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 type_id = 2;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type_id());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 blood = 4;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }

    // required .CSPoint point = 5;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

    // required .CSPoint direct = 6;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direct());
    }

    // required uint32 speed = 7;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

    // required bool boss = 8;
    if (has_boss()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .MonsterMoveValue moves = 9;
    if (has_moves()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->moves());
    }

    // optional .MonsterBattleInfo battle_info = 10;
    if (has_battle_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_info());
    }

    // required bool elite = 11;
    if (has_elite()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterInfo::MergeFrom(const MonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_point()) {
      mutable_point()->::CSPoint::MergeFrom(from.point());
    }
    if (from.has_direct()) {
      mutable_direct()->::CSPoint::MergeFrom(from.direct());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_boss()) {
      set_boss(from.boss());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_moves()) {
      mutable_moves()->::MonsterMoveValue::MergeFrom(from.moves());
    }
    if (from.has_battle_info()) {
      mutable_battle_info()->::MonsterBattleInfo::MergeFrom(from.battle_info());
    }
    if (from.has_elite()) {
      set_elite(from.elite());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterInfo::CopyFrom(const MonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000005ff) != 0x000005ff) return false;

  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  if (has_direct()) {
    if (!this->direct().IsInitialized()) return false;
  }
  if (has_moves()) {
    if (!this->moves().IsInitialized()) return false;
  }
  if (has_battle_info()) {
    if (!this->battle_info().IsInitialized()) return false;
  }
  return true;
}

void MonsterInfo::Swap(MonsterInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_id_, other->type_id_);
    std::swap(level_, other->level_);
    std::swap(blood_, other->blood_);
    std::swap(point_, other->point_);
    std::swap(direct_, other->direct_);
    std::swap(speed_, other->speed_);
    std::swap(boss_, other->boss_);
    std::swap(moves_, other->moves_);
    std::swap(battle_info_, other->battle_info_);
    std::swap(elite_, other->elite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterInfo_descriptor_;
  metadata.reflection = MonsterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleCreateRsp::kMonsterinfoFieldNumber;
const int CSBattleCreateRsp::kUserinfoFieldNumber;
const int CSBattleCreateRsp::kBattleIdFieldNumber;
const int CSBattleCreateRsp::kMapIdFieldNumber;
const int CSBattleCreateRsp::kPortalFieldNumber;
const int CSBattleCreateRsp::kPortalMapIdFieldNumber;
const int CSBattleCreateRsp::kTimeoutFieldNumber;
const int CSBattleCreateRsp::kMonsterbirthFieldNumber;
#endif  // !_MSC_VER

CSBattleCreateRsp::CSBattleCreateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleCreateRsp::InitAsDefaultInstance() {
  portal_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSBattleCreateRsp::CSBattleCreateRsp(const CSBattleCreateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleCreateRsp::SharedCtor() {
  _cached_size_ = 0;
  battle_id_ = 0u;
  map_id_ = 0u;
  portal_ = NULL;
  portal_map_id_ = 0u;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleCreateRsp::~CSBattleCreateRsp() {
  SharedDtor();
}

void CSBattleCreateRsp::SharedDtor() {
  if (this != default_instance_) {
    delete portal_;
  }
}

void CSBattleCreateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleCreateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleCreateRsp_descriptor_;
}

const CSBattleCreateRsp& CSBattleCreateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSBattleCreateRsp* CSBattleCreateRsp::default_instance_ = NULL;

CSBattleCreateRsp* CSBattleCreateRsp::New() const {
  return new CSBattleCreateRsp;
}

void CSBattleCreateRsp::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    battle_id_ = 0u;
    map_id_ = 0u;
    if (has_portal()) {
      if (portal_ != NULL) portal_->::CSPoint::Clear();
    }
    portal_map_id_ = 0u;
    timeout_ = 0u;
  }
  monsterinfo_.Clear();
  userinfo_.Clear();
  monsterbirth_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleCreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MonsterInfo monsterinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monsterinfo;
        if (input->ExpectTag(18)) goto parse_userinfo;
        break;
      }

      // repeated .BasicUserInfo userinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userinfo;
        if (input->ExpectTag(24)) goto parse_battle_id;
        break;
      }

      // required uint32 battle_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_id_)));
          set_has_battle_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map_id;
        break;
      }

      // required uint32 map_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_portal;
        break;
      }

      // required .CSPoint portal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_portal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_portal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_portal_map_id;
        break;
      }

      // required uint32 portal_map_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_portal_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &portal_map_id_)));
          set_has_portal_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_monsterbirth;
        break;
      }

      // repeated .CSPoint monsterbirth = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterbirth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterbirth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_monsterbirth;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleCreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MonsterInfo monsterinfo = 1;
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monsterinfo(i), output);
  }

  // repeated .BasicUserInfo userinfo = 2;
  for (int i = 0; i < this->userinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo(i), output);
  }

  // required uint32 battle_id = 3;
  if (has_battle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->battle_id(), output);
  }

  // required uint32 map_id = 4;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->map_id(), output);
  }

  // required .CSPoint portal = 5;
  if (has_portal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->portal(), output);
  }

  // required uint32 portal_map_id = 6;
  if (has_portal_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->portal_map_id(), output);
  }

  // optional uint32 timeout = 7;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->timeout(), output);
  }

  // repeated .CSPoint monsterbirth = 8;
  for (int i = 0; i < this->monsterbirth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->monsterbirth(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleCreateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MonsterInfo monsterinfo = 1;
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monsterinfo(i), target);
  }

  // repeated .BasicUserInfo userinfo = 2;
  for (int i = 0; i < this->userinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo(i), target);
  }

  // required uint32 battle_id = 3;
  if (has_battle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->battle_id(), target);
  }

  // required uint32 map_id = 4;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->map_id(), target);
  }

  // required .CSPoint portal = 5;
  if (has_portal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->portal(), target);
  }

  // required uint32 portal_map_id = 6;
  if (has_portal_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->portal_map_id(), target);
  }

  // optional uint32 timeout = 7;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->timeout(), target);
  }

  // repeated .CSPoint monsterbirth = 8;
  for (int i = 0; i < this->monsterbirth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->monsterbirth(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleCreateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required uint32 battle_id = 3;
    if (has_battle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_id());
    }

    // required uint32 map_id = 4;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // required .CSPoint portal = 5;
    if (has_portal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->portal());
    }

    // required uint32 portal_map_id = 6;
    if (has_portal_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->portal_map_id());
    }

    // optional uint32 timeout = 7;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  // repeated .MonsterInfo monsterinfo = 1;
  total_size += 1 * this->monsterinfo_size();
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterinfo(i));
  }

  // repeated .BasicUserInfo userinfo = 2;
  total_size += 1 * this->userinfo_size();
  for (int i = 0; i < this->userinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfo(i));
  }

  // repeated .CSPoint monsterbirth = 8;
  total_size += 1 * this->monsterbirth_size();
  for (int i = 0; i < this->monsterbirth_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterbirth(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleCreateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleCreateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleCreateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleCreateRsp::MergeFrom(const CSBattleCreateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterinfo_.MergeFrom(from.monsterinfo_);
  userinfo_.MergeFrom(from.userinfo_);
  monsterbirth_.MergeFrom(from.monsterbirth_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_battle_id()) {
      set_battle_id(from.battle_id());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_portal()) {
      mutable_portal()->::CSPoint::MergeFrom(from.portal());
    }
    if (from.has_portal_map_id()) {
      set_portal_map_id(from.portal_map_id());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleCreateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleCreateRsp::CopyFrom(const CSBattleCreateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleCreateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003c) != 0x0000003c) return false;

  for (int i = 0; i < monsterinfo_size(); i++) {
    if (!this->monsterinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < userinfo_size(); i++) {
    if (!this->userinfo(i).IsInitialized()) return false;
  }
  if (has_portal()) {
    if (!this->portal().IsInitialized()) return false;
  }
  for (int i = 0; i < monsterbirth_size(); i++) {
    if (!this->monsterbirth(i).IsInitialized()) return false;
  }
  return true;
}

void CSBattleCreateRsp::Swap(CSBattleCreateRsp* other) {
  if (other != this) {
    monsterinfo_.Swap(&other->monsterinfo_);
    userinfo_.Swap(&other->userinfo_);
    std::swap(battle_id_, other->battle_id_);
    std::swap(map_id_, other->map_id_);
    std::swap(portal_, other->portal_);
    std::swap(portal_map_id_, other->portal_map_id_);
    std::swap(timeout_, other->timeout_);
    monsterbirth_.Swap(&other->monsterbirth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleCreateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleCreateRsp_descriptor_;
  metadata.reflection = CSBattleCreateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleMonsterCreateRsp::kMonsterinfoFieldNumber;
#endif  // !_MSC_VER

CSBattleMonsterCreateRsp::CSBattleMonsterCreateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleMonsterCreateRsp::InitAsDefaultInstance() {
}

CSBattleMonsterCreateRsp::CSBattleMonsterCreateRsp(const CSBattleMonsterCreateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleMonsterCreateRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleMonsterCreateRsp::~CSBattleMonsterCreateRsp() {
  SharedDtor();
}

void CSBattleMonsterCreateRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleMonsterCreateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleMonsterCreateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleMonsterCreateRsp_descriptor_;
}

const CSBattleMonsterCreateRsp& CSBattleMonsterCreateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSBattleMonsterCreateRsp* CSBattleMonsterCreateRsp::default_instance_ = NULL;

CSBattleMonsterCreateRsp* CSBattleMonsterCreateRsp::New() const {
  return new CSBattleMonsterCreateRsp;
}

void CSBattleMonsterCreateRsp::Clear() {
  monsterinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleMonsterCreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MonsterInfo monsterinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monsterinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleMonsterCreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MonsterInfo monsterinfo = 1;
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monsterinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleMonsterCreateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MonsterInfo monsterinfo = 1;
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monsterinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleMonsterCreateRsp::ByteSize() const {
  int total_size = 0;

  // repeated .MonsterInfo monsterinfo = 1;
  total_size += 1 * this->monsterinfo_size();
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleMonsterCreateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleMonsterCreateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleMonsterCreateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleMonsterCreateRsp::MergeFrom(const CSBattleMonsterCreateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterinfo_.MergeFrom(from.monsterinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleMonsterCreateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleMonsterCreateRsp::CopyFrom(const CSBattleMonsterCreateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleMonsterCreateRsp::IsInitialized() const {

  for (int i = 0; i < monsterinfo_size(); i++) {
    if (!this->monsterinfo(i).IsInitialized()) return false;
  }
  return true;
}

void CSBattleMonsterCreateRsp::Swap(CSBattleMonsterCreateRsp* other) {
  if (other != this) {
    monsterinfo_.Swap(&other->monsterinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleMonsterCreateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleMonsterCreateRsp_descriptor_;
  metadata.reflection = CSBattleMonsterCreateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleUserJoinRsp::kUserinfoFieldNumber;
#endif  // !_MSC_VER

CSBattleUserJoinRsp::CSBattleUserJoinRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleUserJoinRsp::InitAsDefaultInstance() {
}

CSBattleUserJoinRsp::CSBattleUserJoinRsp(const CSBattleUserJoinRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleUserJoinRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleUserJoinRsp::~CSBattleUserJoinRsp() {
  SharedDtor();
}

void CSBattleUserJoinRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleUserJoinRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleUserJoinRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleUserJoinRsp_descriptor_;
}

const CSBattleUserJoinRsp& CSBattleUserJoinRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSBattleUserJoinRsp* CSBattleUserJoinRsp::default_instance_ = NULL;

CSBattleUserJoinRsp* CSBattleUserJoinRsp::New() const {
  return new CSBattleUserJoinRsp;
}

void CSBattleUserJoinRsp::Clear() {
  userinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleUserJoinRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BasicUserInfo userinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_userinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleUserJoinRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BasicUserInfo userinfo = 1;
  for (int i = 0; i < this->userinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleUserJoinRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .BasicUserInfo userinfo = 1;
  for (int i = 0; i < this->userinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleUserJoinRsp::ByteSize() const {
  int total_size = 0;

  // repeated .BasicUserInfo userinfo = 1;
  total_size += 1 * this->userinfo_size();
  for (int i = 0; i < this->userinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleUserJoinRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleUserJoinRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleUserJoinRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleUserJoinRsp::MergeFrom(const CSBattleUserJoinRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  userinfo_.MergeFrom(from.userinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleUserJoinRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleUserJoinRsp::CopyFrom(const CSBattleUserJoinRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleUserJoinRsp::IsInitialized() const {

  for (int i = 0; i < userinfo_size(); i++) {
    if (!this->userinfo(i).IsInitialized()) return false;
  }
  return true;
}

void CSBattleUserJoinRsp::Swap(CSBattleUserJoinRsp* other) {
  if (other != this) {
    userinfo_.Swap(&other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleUserJoinRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleUserJoinRsp_descriptor_;
  metadata.reflection = CSBattleUserJoinRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleUserLeaveRsp::kUseridFieldNumber;
#endif  // !_MSC_VER

CSBattleUserLeaveRsp::CSBattleUserLeaveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleUserLeaveRsp::InitAsDefaultInstance() {
}

CSBattleUserLeaveRsp::CSBattleUserLeaveRsp(const CSBattleUserLeaveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleUserLeaveRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleUserLeaveRsp::~CSBattleUserLeaveRsp() {
  SharedDtor();
}

void CSBattleUserLeaveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleUserLeaveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleUserLeaveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleUserLeaveRsp_descriptor_;
}

const CSBattleUserLeaveRsp& CSBattleUserLeaveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSBattleUserLeaveRsp* CSBattleUserLeaveRsp::default_instance_ = NULL;

CSBattleUserLeaveRsp* CSBattleUserLeaveRsp::New() const {
  return new CSBattleUserLeaveRsp;
}

void CSBattleUserLeaveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleUserLeaveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleUserLeaveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleUserLeaveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleUserLeaveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleUserLeaveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleUserLeaveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleUserLeaveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleUserLeaveRsp::MergeFrom(const CSBattleUserLeaveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleUserLeaveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleUserLeaveRsp::CopyFrom(const CSBattleUserLeaveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleUserLeaveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSBattleUserLeaveRsp::Swap(CSBattleUserLeaveRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleUserLeaveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleUserLeaveRsp_descriptor_;
  metadata.reflection = CSBattleUserLeaveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSBattleLoadCompleteReq::CSBattleLoadCompleteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleLoadCompleteReq::InitAsDefaultInstance() {
}

CSBattleLoadCompleteReq::CSBattleLoadCompleteReq(const CSBattleLoadCompleteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleLoadCompleteReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleLoadCompleteReq::~CSBattleLoadCompleteReq() {
  SharedDtor();
}

void CSBattleLoadCompleteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleLoadCompleteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleLoadCompleteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleLoadCompleteReq_descriptor_;
}

const CSBattleLoadCompleteReq& CSBattleLoadCompleteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSBattleLoadCompleteReq* CSBattleLoadCompleteReq::default_instance_ = NULL;

CSBattleLoadCompleteReq* CSBattleLoadCompleteReq::New() const {
  return new CSBattleLoadCompleteReq;
}

void CSBattleLoadCompleteReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleLoadCompleteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSBattleLoadCompleteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleLoadCompleteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleLoadCompleteReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleLoadCompleteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleLoadCompleteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleLoadCompleteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleLoadCompleteReq::MergeFrom(const CSBattleLoadCompleteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleLoadCompleteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleLoadCompleteReq::CopyFrom(const CSBattleLoadCompleteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleLoadCompleteReq::IsInitialized() const {

  return true;
}

void CSBattleLoadCompleteReq::Swap(CSBattleLoadCompleteReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleLoadCompleteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleLoadCompleteReq_descriptor_;
  metadata.reflection = CSBattleLoadCompleteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleLoadCompleteRsp::kTimeoutFieldNumber;
#endif  // !_MSC_VER

CSBattleLoadCompleteRsp::CSBattleLoadCompleteRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleLoadCompleteRsp::InitAsDefaultInstance() {
}

CSBattleLoadCompleteRsp::CSBattleLoadCompleteRsp(const CSBattleLoadCompleteRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleLoadCompleteRsp::SharedCtor() {
  _cached_size_ = 0;
  timeout_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleLoadCompleteRsp::~CSBattleLoadCompleteRsp() {
  SharedDtor();
}

void CSBattleLoadCompleteRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleLoadCompleteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleLoadCompleteRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleLoadCompleteRsp_descriptor_;
}

const CSBattleLoadCompleteRsp& CSBattleLoadCompleteRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSBattleLoadCompleteRsp* CSBattleLoadCompleteRsp::default_instance_ = NULL;

CSBattleLoadCompleteRsp* CSBattleLoadCompleteRsp::New() const {
  return new CSBattleLoadCompleteRsp;
}

void CSBattleLoadCompleteRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timeout_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleLoadCompleteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool timeout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleLoadCompleteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool timeout = 1;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleLoadCompleteRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool timeout = 1;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleLoadCompleteRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool timeout = 1;
    if (has_timeout()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleLoadCompleteRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleLoadCompleteRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleLoadCompleteRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleLoadCompleteRsp::MergeFrom(const CSBattleLoadCompleteRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleLoadCompleteRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleLoadCompleteRsp::CopyFrom(const CSBattleLoadCompleteRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleLoadCompleteRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSBattleLoadCompleteRsp::Swap(CSBattleLoadCompleteRsp* other) {
  if (other != this) {
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleLoadCompleteRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleLoadCompleteRsp_descriptor_;
  metadata.reflection = CSBattleLoadCompleteRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSBattleLeaveReq::CSBattleLeaveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleLeaveReq::InitAsDefaultInstance() {
}

CSBattleLeaveReq::CSBattleLeaveReq(const CSBattleLeaveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleLeaveReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleLeaveReq::~CSBattleLeaveReq() {
  SharedDtor();
}

void CSBattleLeaveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleLeaveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleLeaveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleLeaveReq_descriptor_;
}

const CSBattleLeaveReq& CSBattleLeaveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSBattleLeaveReq* CSBattleLeaveReq::default_instance_ = NULL;

CSBattleLeaveReq* CSBattleLeaveReq::New() const {
  return new CSBattleLeaveReq;
}

void CSBattleLeaveReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleLeaveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSBattleLeaveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleLeaveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleLeaveReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleLeaveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleLeaveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleLeaveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleLeaveReq::MergeFrom(const CSBattleLeaveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleLeaveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleLeaveReq::CopyFrom(const CSBattleLeaveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleLeaveReq::IsInitialized() const {

  return true;
}

void CSBattleLeaveReq::Swap(CSBattleLeaveReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleLeaveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleLeaveReq_descriptor_;
  metadata.reflection = CSBattleLeaveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleLeaveRsp::kInitiativeFieldNumber;
const int CSBattleLeaveRsp::kStarFieldNumber;
const int CSBattleLeaveRsp::kRewardsFieldNumber;
#endif  // !_MSC_VER

CSBattleLeaveRsp::CSBattleLeaveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleLeaveRsp::InitAsDefaultInstance() {
  rewards_ = const_cast< ::CSReward*>(&::CSReward::default_instance());
}

CSBattleLeaveRsp::CSBattleLeaveRsp(const CSBattleLeaveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleLeaveRsp::SharedCtor() {
  _cached_size_ = 0;
  initiative_ = false;
  star_ = 0u;
  rewards_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleLeaveRsp::~CSBattleLeaveRsp() {
  SharedDtor();
}

void CSBattleLeaveRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rewards_;
  }
}

void CSBattleLeaveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleLeaveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleLeaveRsp_descriptor_;
}

const CSBattleLeaveRsp& CSBattleLeaveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSBattleLeaveRsp* CSBattleLeaveRsp::default_instance_ = NULL;

CSBattleLeaveRsp* CSBattleLeaveRsp::New() const {
  return new CSBattleLeaveRsp;
}

void CSBattleLeaveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    initiative_ = false;
    star_ = 0u;
    if (has_rewards()) {
      if (rewards_ != NULL) rewards_->::CSReward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleLeaveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool initiative = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initiative_)));
          set_has_initiative();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional uint32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rewards;
        break;
      }

      // optional .CSReward rewards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleLeaveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool initiative = 1;
  if (has_initiative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->initiative(), output);
  }

  // optional uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  // optional .CSReward rewards = 3;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewards(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleLeaveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool initiative = 1;
  if (has_initiative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->initiative(), target);
  }

  // optional uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  // optional .CSReward rewards = 3;
  if (has_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewards(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleLeaveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool initiative = 1;
    if (has_initiative()) {
      total_size += 1 + 1;
    }

    // optional uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional .CSReward rewards = 3;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewards());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleLeaveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleLeaveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleLeaveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleLeaveRsp::MergeFrom(const CSBattleLeaveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initiative()) {
      set_initiative(from.initiative());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_rewards()) {
      mutable_rewards()->::CSReward::MergeFrom(from.rewards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleLeaveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleLeaveRsp::CopyFrom(const CSBattleLeaveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleLeaveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rewards()) {
    if (!this->rewards().IsInitialized()) return false;
  }
  return true;
}

void CSBattleLeaveRsp::Swap(CSBattleLeaveRsp* other) {
  if (other != this) {
    std::swap(initiative_, other->initiative_);
    std::swap(star_, other->star_);
    std::swap(rewards_, other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleLeaveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleLeaveRsp_descriptor_;
  metadata.reflection = CSBattleLeaveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSBattleTimeoutRsp::CSBattleTimeoutRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleTimeoutRsp::InitAsDefaultInstance() {
}

CSBattleTimeoutRsp::CSBattleTimeoutRsp(const CSBattleTimeoutRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleTimeoutRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleTimeoutRsp::~CSBattleTimeoutRsp() {
  SharedDtor();
}

void CSBattleTimeoutRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleTimeoutRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleTimeoutRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleTimeoutRsp_descriptor_;
}

const CSBattleTimeoutRsp& CSBattleTimeoutRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSBattleTimeoutRsp* CSBattleTimeoutRsp::default_instance_ = NULL;

CSBattleTimeoutRsp* CSBattleTimeoutRsp::New() const {
  return new CSBattleTimeoutRsp;
}

void CSBattleTimeoutRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleTimeoutRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSBattleTimeoutRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleTimeoutRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleTimeoutRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleTimeoutRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleTimeoutRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleTimeoutRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleTimeoutRsp::MergeFrom(const CSBattleTimeoutRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleTimeoutRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleTimeoutRsp::CopyFrom(const CSBattleTimeoutRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleTimeoutRsp::IsInitialized() const {

  return true;
}

void CSBattleTimeoutRsp::Swap(CSBattleTimeoutRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleTimeoutRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleTimeoutRsp_descriptor_;
  metadata.reflection = CSBattleTimeoutRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSBattlePlayerDelRsp::CSBattlePlayerDelRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattlePlayerDelRsp::InitAsDefaultInstance() {
}

CSBattlePlayerDelRsp::CSBattlePlayerDelRsp(const CSBattlePlayerDelRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattlePlayerDelRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattlePlayerDelRsp::~CSBattlePlayerDelRsp() {
  SharedDtor();
}

void CSBattlePlayerDelRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattlePlayerDelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattlePlayerDelRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattlePlayerDelRsp_descriptor_;
}

const CSBattlePlayerDelRsp& CSBattlePlayerDelRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSBattlePlayerDelRsp* CSBattlePlayerDelRsp::default_instance_ = NULL;

CSBattlePlayerDelRsp* CSBattlePlayerDelRsp::New() const {
  return new CSBattlePlayerDelRsp;
}

void CSBattlePlayerDelRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattlePlayerDelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSBattlePlayerDelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattlePlayerDelRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattlePlayerDelRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattlePlayerDelRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattlePlayerDelRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattlePlayerDelRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattlePlayerDelRsp::MergeFrom(const CSBattlePlayerDelRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattlePlayerDelRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattlePlayerDelRsp::CopyFrom(const CSBattlePlayerDelRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattlePlayerDelRsp::IsInitialized() const {

  return true;
}

void CSBattlePlayerDelRsp::Swap(CSBattlePlayerDelRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattlePlayerDelRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattlePlayerDelRsp_descriptor_;
  metadata.reflection = CSBattlePlayerDelRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttackMonsterInfo::kIdFieldNumber;
const int AttackMonsterInfo::kStartPosFieldNumber;
const int AttackMonsterInfo::kPosFieldNumber;
const int AttackMonsterInfo::kDirectFieldNumber;
const int AttackMonsterInfo::kBloodFieldNumber;
const int AttackMonsterInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

AttackMonsterInfo::AttackMonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttackMonsterInfo::InitAsDefaultInstance() {
  start_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

AttackMonsterInfo::AttackMonsterInfo(const AttackMonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttackMonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  start_pos_ = NULL;
  pos_ = NULL;
  direct_ = NULL;
  blood_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttackMonsterInfo::~AttackMonsterInfo() {
  SharedDtor();
}

void AttackMonsterInfo::SharedDtor() {
  if (this != default_instance_) {
    delete start_pos_;
    delete pos_;
    delete direct_;
  }
}

void AttackMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttackMonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttackMonsterInfo_descriptor_;
}

const AttackMonsterInfo& AttackMonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

AttackMonsterInfo* AttackMonsterInfo::default_instance_ = NULL;

AttackMonsterInfo* AttackMonsterInfo::New() const {
  return new AttackMonsterInfo;
}

void AttackMonsterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_start_pos()) {
      if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
    if (has_direct()) {
      if (direct_ != NULL) direct_->::CSPoint::Clear();
    }
    blood_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttackMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_start_pos;
        break;
      }

      // required .CSPoint start_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // required .CSPoint pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_direct;
        break;
      }

      // required .CSPoint direct = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_blood;
        break;
      }

      // required uint32 blood = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // required uint32 status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttackMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .CSPoint start_pos = 2;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->start_pos(), output);
  }

  // required .CSPoint pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // required .CSPoint direct = 4;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->direct(), output);
  }

  // required uint32 blood = 5;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->blood(), output);
  }

  // required uint32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttackMonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .CSPoint start_pos = 2;
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->start_pos(), target);
  }

  // required .CSPoint pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // required .CSPoint direct = 4;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->direct(), target);
  }

  // required uint32 blood = 5;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->blood(), target);
  }

  // required uint32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttackMonsterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .CSPoint start_pos = 2;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_pos());
    }

    // required .CSPoint pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required .CSPoint direct = 4;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direct());
    }

    // required uint32 blood = 5;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }

    // required uint32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttackMonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttackMonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttackMonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttackMonsterInfo::MergeFrom(const AttackMonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_start_pos()) {
      mutable_start_pos()->::CSPoint::MergeFrom(from.start_pos());
    }
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
    if (from.has_direct()) {
      mutable_direct()->::CSPoint::MergeFrom(from.direct());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttackMonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttackMonsterInfo::CopyFrom(const AttackMonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttackMonsterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_start_pos()) {
    if (!this->start_pos().IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_direct()) {
    if (!this->direct().IsInitialized()) return false;
  }
  return true;
}

void AttackMonsterInfo::Swap(AttackMonsterInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(start_pos_, other->start_pos_);
    std::swap(pos_, other->pos_);
    std::swap(direct_, other->direct_);
    std::swap(blood_, other->blood_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttackMonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttackMonsterInfo_descriptor_;
  metadata.reflection = AttackMonsterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSAttackMonsterBackInfo::kIdFieldNumber;
const int CSAttackMonsterBackInfo::kMonsterTypeFieldNumber;
const int CSAttackMonsterBackInfo::kBloodFieldNumber;
const int CSAttackMonsterBackInfo::kEliteFieldNumber;
#endif  // !_MSC_VER

CSAttackMonsterBackInfo::CSAttackMonsterBackInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSAttackMonsterBackInfo::InitAsDefaultInstance() {
}

CSAttackMonsterBackInfo::CSAttackMonsterBackInfo(const CSAttackMonsterBackInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSAttackMonsterBackInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  monster_type_ = 0u;
  blood_ = 0u;
  elite_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAttackMonsterBackInfo::~CSAttackMonsterBackInfo() {
  SharedDtor();
}

void CSAttackMonsterBackInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSAttackMonsterBackInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSAttackMonsterBackInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSAttackMonsterBackInfo_descriptor_;
}

const CSAttackMonsterBackInfo& CSAttackMonsterBackInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSAttackMonsterBackInfo* CSAttackMonsterBackInfo::default_instance_ = NULL;

CSAttackMonsterBackInfo* CSAttackMonsterBackInfo::New() const {
  return new CSAttackMonsterBackInfo;
}

void CSAttackMonsterBackInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    monster_type_ = 0u;
    blood_ = 0u;
    elite_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSAttackMonsterBackInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_monster_type;
        break;
      }

      // required uint32 monster_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_type_)));
          set_has_monster_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_blood;
        break;
      }

      // required uint32 blood = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_elite;
        break;
      }

      // required bool elite = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &elite_)));
          set_has_elite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAttackMonsterBackInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 monster_type = 2;
  if (has_monster_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->monster_type(), output);
  }

  // required uint32 blood = 3;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->blood(), output);
  }

  // required bool elite = 4;
  if (has_elite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->elite(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSAttackMonsterBackInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 monster_type = 2;
  if (has_monster_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->monster_type(), target);
  }

  // required uint32 blood = 3;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->blood(), target);
  }

  // required bool elite = 4;
  if (has_elite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->elite(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSAttackMonsterBackInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 monster_type = 2;
    if (has_monster_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_type());
    }

    // required uint32 blood = 3;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }

    // required bool elite = 4;
    if (has_elite()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAttackMonsterBackInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSAttackMonsterBackInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSAttackMonsterBackInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSAttackMonsterBackInfo::MergeFrom(const CSAttackMonsterBackInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_monster_type()) {
      set_monster_type(from.monster_type());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_elite()) {
      set_elite(from.elite());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSAttackMonsterBackInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAttackMonsterBackInfo::CopyFrom(const CSAttackMonsterBackInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAttackMonsterBackInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSAttackMonsterBackInfo::Swap(CSAttackMonsterBackInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(monster_type_, other->monster_type_);
    std::swap(blood_, other->blood_);
    std::swap(elite_, other->elite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSAttackMonsterBackInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSAttackMonsterBackInfo_descriptor_;
  metadata.reflection = CSAttackMonsterBackInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterAttackInfo::kIdFieldNumber;
const int CSMonsterAttackInfo::kPosFieldNumber;
const int CSMonsterAttackInfo::kDirectFieldNumber;
const int CSMonsterAttackInfo::kActionIdFieldNumber;
const int CSMonsterAttackInfo::kTypeFieldNumber;
const int CSMonsterAttackInfo::kUseridFieldNumber;
const int CSMonsterAttackInfo::kEffectIdFieldNumber;
const int CSMonsterAttackInfo::kStartPosFieldNumber;
const int CSMonsterAttackInfo::kEndPosFieldNumber;
const int CSMonsterAttackInfo::kSkillSpeedFieldNumber;
const int CSMonsterAttackInfo::kDelayTimeFieldNumber;
#endif  // !_MSC_VER

CSMonsterAttackInfo::CSMonsterAttackInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterAttackInfo::InitAsDefaultInstance() {
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  start_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSMonsterAttackInfo::CSMonsterAttackInfo(const CSMonsterAttackInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterAttackInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pos_ = NULL;
  direct_ = NULL;
  action_id_ = 0u;
  type_ = 0u;
  userid_ = 0u;
  effect_id_ = 0u;
  start_pos_ = NULL;
  end_pos_ = NULL;
  skill_speed_ = 0u;
  delay_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterAttackInfo::~CSMonsterAttackInfo() {
  SharedDtor();
}

void CSMonsterAttackInfo::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete direct_;
    delete start_pos_;
    delete end_pos_;
  }
}

void CSMonsterAttackInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterAttackInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterAttackInfo_descriptor_;
}

const CSMonsterAttackInfo& CSMonsterAttackInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSMonsterAttackInfo* CSMonsterAttackInfo::default_instance_ = NULL;

CSMonsterAttackInfo* CSMonsterAttackInfo::New() const {
  return new CSMonsterAttackInfo;
}

void CSMonsterAttackInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
    if (has_direct()) {
      if (direct_ != NULL) direct_->::CSPoint::Clear();
    }
    action_id_ = 0u;
    type_ = 0u;
    userid_ = 0u;
    effect_id_ = 0u;
    if (has_start_pos()) {
      if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_end_pos()) {
      if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
    }
    skill_speed_ = 0u;
    delay_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterAttackInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // required .CSPoint pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_direct;
        break;
      }

      // required .CSPoint direct = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_action_id;
        break;
      }

      // required uint32 action_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // required uint32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_userid;
        break;
      }

      // required uint32 userid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_effect_id;
        break;
      }

      // optional uint32 effect_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_id_)));
          set_has_effect_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_start_pos;
        break;
      }

      // optional .CSPoint start_pos = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_end_pos;
        break;
      }

      // optional .CSPoint end_pos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_skill_speed;
        break;
      }

      // optional uint32 skill_speed = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_speed_)));
          set_has_skill_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_delay_time;
        break;
      }

      // optional uint32 delay_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_time_)));
          set_has_delay_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterAttackInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .CSPoint pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // required .CSPoint direct = 3;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->direct(), output);
  }

  // required uint32 action_id = 4;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->action_id(), output);
  }

  // required uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  // required uint32 userid = 6;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->userid(), output);
  }

  // optional uint32 effect_id = 7;
  if (has_effect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->effect_id(), output);
  }

  // optional .CSPoint start_pos = 8;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->start_pos(), output);
  }

  // optional .CSPoint end_pos = 9;
  if (has_end_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->end_pos(), output);
  }

  // optional uint32 skill_speed = 10;
  if (has_skill_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->skill_speed(), output);
  }

  // optional uint32 delay_time = 11;
  if (has_delay_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->delay_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterAttackInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .CSPoint pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // required .CSPoint direct = 3;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->direct(), target);
  }

  // required uint32 action_id = 4;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->action_id(), target);
  }

  // required uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  // required uint32 userid = 6;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->userid(), target);
  }

  // optional uint32 effect_id = 7;
  if (has_effect_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->effect_id(), target);
  }

  // optional .CSPoint start_pos = 8;
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->start_pos(), target);
  }

  // optional .CSPoint end_pos = 9;
  if (has_end_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->end_pos(), target);
  }

  // optional uint32 skill_speed = 10;
  if (has_skill_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->skill_speed(), target);
  }

  // optional uint32 delay_time = 11;
  if (has_delay_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->delay_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterAttackInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .CSPoint pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required .CSPoint direct = 3;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direct());
    }

    // required uint32 action_id = 4;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }

    // required uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 userid = 6;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // optional uint32 effect_id = 7;
    if (has_effect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_id());
    }

    // optional .CSPoint start_pos = 8;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_pos());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CSPoint end_pos = 9;
    if (has_end_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_pos());
    }

    // optional uint32 skill_speed = 10;
    if (has_skill_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_speed());
    }

    // optional uint32 delay_time = 11;
    if (has_delay_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterAttackInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterAttackInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterAttackInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterAttackInfo::MergeFrom(const CSMonsterAttackInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
    if (from.has_direct()) {
      mutable_direct()->::CSPoint::MergeFrom(from.direct());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_effect_id()) {
      set_effect_id(from.effect_id());
    }
    if (from.has_start_pos()) {
      mutable_start_pos()->::CSPoint::MergeFrom(from.start_pos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_end_pos()) {
      mutable_end_pos()->::CSPoint::MergeFrom(from.end_pos());
    }
    if (from.has_skill_speed()) {
      set_skill_speed(from.skill_speed());
    }
    if (from.has_delay_time()) {
      set_delay_time(from.delay_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterAttackInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterAttackInfo::CopyFrom(const CSMonsterAttackInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterAttackInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_direct()) {
    if (!this->direct().IsInitialized()) return false;
  }
  if (has_start_pos()) {
    if (!this->start_pos().IsInitialized()) return false;
  }
  if (has_end_pos()) {
    if (!this->end_pos().IsInitialized()) return false;
  }
  return true;
}

void CSMonsterAttackInfo::Swap(CSMonsterAttackInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(direct_, other->direct_);
    std::swap(action_id_, other->action_id_);
    std::swap(type_, other->type_);
    std::swap(userid_, other->userid_);
    std::swap(effect_id_, other->effect_id_);
    std::swap(start_pos_, other->start_pos_);
    std::swap(end_pos_, other->end_pos_);
    std::swap(skill_speed_, other->skill_speed_);
    std::swap(delay_time_, other->delay_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterAttackInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterAttackInfo_descriptor_;
  metadata.reflection = CSMonsterAttackInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterEffectInfo::kEffectIdFieldNumber;
const int CSMonsterEffectInfo::kStartPosFieldNumber;
const int CSMonsterEffectInfo::kEndPosFieldNumber;
const int CSMonsterEffectInfo::kSkillSpeedFieldNumber;
const int CSMonsterEffectInfo::kDelayTimeFieldNumber;
#endif  // !_MSC_VER

CSMonsterEffectInfo::CSMonsterEffectInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterEffectInfo::InitAsDefaultInstance() {
  start_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSMonsterEffectInfo::CSMonsterEffectInfo(const CSMonsterEffectInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterEffectInfo::SharedCtor() {
  _cached_size_ = 0;
  effect_id_ = 0u;
  start_pos_ = NULL;
  end_pos_ = NULL;
  skill_speed_ = 0u;
  delay_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterEffectInfo::~CSMonsterEffectInfo() {
  SharedDtor();
}

void CSMonsterEffectInfo::SharedDtor() {
  if (this != default_instance_) {
    delete start_pos_;
    delete end_pos_;
  }
}

void CSMonsterEffectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterEffectInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterEffectInfo_descriptor_;
}

const CSMonsterEffectInfo& CSMonsterEffectInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSMonsterEffectInfo* CSMonsterEffectInfo::default_instance_ = NULL;

CSMonsterEffectInfo* CSMonsterEffectInfo::New() const {
  return new CSMonsterEffectInfo;
}

void CSMonsterEffectInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    effect_id_ = 0u;
    if (has_start_pos()) {
      if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
    }
    if (has_end_pos()) {
      if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
    }
    skill_speed_ = 0u;
    delay_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterEffectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 effect_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_id_)));
          set_has_effect_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_start_pos;
        break;
      }

      // optional .CSPoint start_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_end_pos;
        break;
      }

      // optional .CSPoint end_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skill_speed;
        break;
      }

      // optional uint32 skill_speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_speed_)));
          set_has_skill_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_delay_time;
        break;
      }

      // optional uint32 delay_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_time_)));
          set_has_delay_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterEffectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 effect_id = 1;
  if (has_effect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->effect_id(), output);
  }

  // optional .CSPoint start_pos = 2;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->start_pos(), output);
  }

  // optional .CSPoint end_pos = 3;
  if (has_end_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->end_pos(), output);
  }

  // optional uint32 skill_speed = 4;
  if (has_skill_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skill_speed(), output);
  }

  // optional uint32 delay_time = 5;
  if (has_delay_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->delay_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterEffectInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 effect_id = 1;
  if (has_effect_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->effect_id(), target);
  }

  // optional .CSPoint start_pos = 2;
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->start_pos(), target);
  }

  // optional .CSPoint end_pos = 3;
  if (has_end_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->end_pos(), target);
  }

  // optional uint32 skill_speed = 4;
  if (has_skill_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skill_speed(), target);
  }

  // optional uint32 delay_time = 5;
  if (has_delay_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->delay_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterEffectInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 effect_id = 1;
    if (has_effect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_id());
    }

    // optional .CSPoint start_pos = 2;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_pos());
    }

    // optional .CSPoint end_pos = 3;
    if (has_end_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_pos());
    }

    // optional uint32 skill_speed = 4;
    if (has_skill_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_speed());
    }

    // optional uint32 delay_time = 5;
    if (has_delay_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterEffectInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterEffectInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterEffectInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterEffectInfo::MergeFrom(const CSMonsterEffectInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_effect_id()) {
      set_effect_id(from.effect_id());
    }
    if (from.has_start_pos()) {
      mutable_start_pos()->::CSPoint::MergeFrom(from.start_pos());
    }
    if (from.has_end_pos()) {
      mutable_end_pos()->::CSPoint::MergeFrom(from.end_pos());
    }
    if (from.has_skill_speed()) {
      set_skill_speed(from.skill_speed());
    }
    if (from.has_delay_time()) {
      set_delay_time(from.delay_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterEffectInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterEffectInfo::CopyFrom(const CSMonsterEffectInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterEffectInfo::IsInitialized() const {

  if (has_start_pos()) {
    if (!this->start_pos().IsInitialized()) return false;
  }
  if (has_end_pos()) {
    if (!this->end_pos().IsInitialized()) return false;
  }
  return true;
}

void CSMonsterEffectInfo::Swap(CSMonsterEffectInfo* other) {
  if (other != this) {
    std::swap(effect_id_, other->effect_id_);
    std::swap(start_pos_, other->start_pos_);
    std::swap(end_pos_, other->end_pos_);
    std::swap(skill_speed_, other->skill_speed_);
    std::swap(delay_time_, other->delay_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterEffectInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterEffectInfo_descriptor_;
  metadata.reflection = CSMonsterEffectInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterAttackRsp::kAttacksFieldNumber;
#endif  // !_MSC_VER

CSMonsterAttackRsp::CSMonsterAttackRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterAttackRsp::InitAsDefaultInstance() {
}

CSMonsterAttackRsp::CSMonsterAttackRsp(const CSMonsterAttackRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterAttackRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterAttackRsp::~CSMonsterAttackRsp() {
  SharedDtor();
}

void CSMonsterAttackRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterAttackRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterAttackRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterAttackRsp_descriptor_;
}

const CSMonsterAttackRsp& CSMonsterAttackRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSMonsterAttackRsp* CSMonsterAttackRsp::default_instance_ = NULL;

CSMonsterAttackRsp* CSMonsterAttackRsp::New() const {
  return new CSMonsterAttackRsp;
}

void CSMonsterAttackRsp::Clear() {
  attacks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterAttackRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSMonsterAttackInfo attacks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attacks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attacks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attacks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterAttackRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSMonsterAttackInfo attacks = 1;
  for (int i = 0; i < this->attacks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attacks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterAttackRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSMonsterAttackInfo attacks = 1;
  for (int i = 0; i < this->attacks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attacks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterAttackRsp::ByteSize() const {
  int total_size = 0;

  // repeated .CSMonsterAttackInfo attacks = 1;
  total_size += 1 * this->attacks_size();
  for (int i = 0; i < this->attacks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attacks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterAttackRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterAttackRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterAttackRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterAttackRsp::MergeFrom(const CSMonsterAttackRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attacks_.MergeFrom(from.attacks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterAttackRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterAttackRsp::CopyFrom(const CSMonsterAttackRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterAttackRsp::IsInitialized() const {

  for (int i = 0; i < attacks_size(); i++) {
    if (!this->attacks(i).IsInitialized()) return false;
  }
  return true;
}

void CSMonsterAttackRsp::Swap(CSMonsterAttackRsp* other) {
  if (other != this) {
    attacks_.Swap(&other->attacks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterAttackRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterAttackRsp_descriptor_;
  metadata.reflection = CSMonsterAttackRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterEffectRsp::kEffectsFieldNumber;
#endif  // !_MSC_VER

CSMonsterEffectRsp::CSMonsterEffectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterEffectRsp::InitAsDefaultInstance() {
}

CSMonsterEffectRsp::CSMonsterEffectRsp(const CSMonsterEffectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterEffectRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterEffectRsp::~CSMonsterEffectRsp() {
  SharedDtor();
}

void CSMonsterEffectRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterEffectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterEffectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterEffectRsp_descriptor_;
}

const CSMonsterEffectRsp& CSMonsterEffectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSMonsterEffectRsp* CSMonsterEffectRsp::default_instance_ = NULL;

CSMonsterEffectRsp* CSMonsterEffectRsp::New() const {
  return new CSMonsterEffectRsp;
}

void CSMonsterEffectRsp::Clear() {
  effects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterEffectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSMonsterEffectInfo effects = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_effects;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterEffectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSMonsterEffectInfo effects = 1;
  for (int i = 0; i < this->effects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->effects(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterEffectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSMonsterEffectInfo effects = 1;
  for (int i = 0; i < this->effects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->effects(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterEffectRsp::ByteSize() const {
  int total_size = 0;

  // repeated .CSMonsterEffectInfo effects = 1;
  total_size += 1 * this->effects_size();
  for (int i = 0; i < this->effects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterEffectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterEffectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterEffectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterEffectRsp::MergeFrom(const CSMonsterEffectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  effects_.MergeFrom(from.effects_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterEffectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterEffectRsp::CopyFrom(const CSMonsterEffectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterEffectRsp::IsInitialized() const {

  for (int i = 0; i < effects_size(); i++) {
    if (!this->effects(i).IsInitialized()) return false;
  }
  return true;
}

void CSMonsterEffectRsp::Swap(CSMonsterEffectRsp* other) {
  if (other != this) {
    effects_.Swap(&other->effects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterEffectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterEffectRsp_descriptor_;
  metadata.reflection = CSMonsterEffectRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterHitRsp_UserInfo::kHurtTypeFieldNumber;
const int CSMonsterHitRsp_UserInfo::kUseridFieldNumber;
const int CSMonsterHitRsp_UserInfo::kBloodFieldNumber;
#endif  // !_MSC_VER

CSMonsterHitRsp_UserInfo::CSMonsterHitRsp_UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterHitRsp_UserInfo::InitAsDefaultInstance() {
}

CSMonsterHitRsp_UserInfo::CSMonsterHitRsp_UserInfo(const CSMonsterHitRsp_UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterHitRsp_UserInfo::SharedCtor() {
  _cached_size_ = 0;
  hurt_type_ = 0u;
  userid_ = 0u;
  blood_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterHitRsp_UserInfo::~CSMonsterHitRsp_UserInfo() {
  SharedDtor();
}

void CSMonsterHitRsp_UserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterHitRsp_UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterHitRsp_UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterHitRsp_UserInfo_descriptor_;
}

const CSMonsterHitRsp_UserInfo& CSMonsterHitRsp_UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSMonsterHitRsp_UserInfo* CSMonsterHitRsp_UserInfo::default_instance_ = NULL;

CSMonsterHitRsp_UserInfo* CSMonsterHitRsp_UserInfo::New() const {
  return new CSMonsterHitRsp_UserInfo;
}

void CSMonsterHitRsp_UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hurt_type_ = 0u;
    userid_ = 0u;
    blood_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterHitRsp_UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hurt_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurt_type_)));
          set_has_hurt_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // required uint32 userid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_blood;
        break;
      }

      // required uint32 blood = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterHitRsp_UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hurt_type = 2;
  if (has_hurt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hurt_type(), output);
  }

  // required uint32 userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->userid(), output);
  }

  // required uint32 blood = 4;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->blood(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterHitRsp_UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hurt_type = 2;
  if (has_hurt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hurt_type(), target);
  }

  // required uint32 userid = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->userid(), target);
  }

  // required uint32 blood = 4;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->blood(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterHitRsp_UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hurt_type = 2;
    if (has_hurt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurt_type());
    }

    // required uint32 userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // required uint32 blood = 4;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterHitRsp_UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterHitRsp_UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterHitRsp_UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterHitRsp_UserInfo::MergeFrom(const CSMonsterHitRsp_UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hurt_type()) {
      set_hurt_type(from.hurt_type());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterHitRsp_UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterHitRsp_UserInfo::CopyFrom(const CSMonsterHitRsp_UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterHitRsp_UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSMonsterHitRsp_UserInfo::Swap(CSMonsterHitRsp_UserInfo* other) {
  if (other != this) {
    std::swap(hurt_type_, other->hurt_type_);
    std::swap(userid_, other->userid_);
    std::swap(blood_, other->blood_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterHitRsp_UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterHitRsp_UserInfo_descriptor_;
  metadata.reflection = CSMonsterHitRsp_UserInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSMonsterHitRsp::kUsersFieldNumber;
#endif  // !_MSC_VER

CSMonsterHitRsp::CSMonsterHitRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterHitRsp::InitAsDefaultInstance() {
}

CSMonsterHitRsp::CSMonsterHitRsp(const CSMonsterHitRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterHitRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterHitRsp::~CSMonsterHitRsp() {
  SharedDtor();
}

void CSMonsterHitRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterHitRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterHitRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterHitRsp_descriptor_;
}

const CSMonsterHitRsp& CSMonsterHitRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSMonsterHitRsp* CSMonsterHitRsp::default_instance_ = NULL;

CSMonsterHitRsp* CSMonsterHitRsp::New() const {
  return new CSMonsterHitRsp;
}

void CSMonsterHitRsp::Clear() {
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterHitRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSMonsterHitRsp.UserInfo users = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterHitRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSMonsterHitRsp.UserInfo users = 3;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterHitRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSMonsterHitRsp.UserInfo users = 3;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterHitRsp::ByteSize() const {
  int total_size = 0;

  // repeated .CSMonsterHitRsp.UserInfo users = 3;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterHitRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterHitRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterHitRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterHitRsp::MergeFrom(const CSMonsterHitRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterHitRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterHitRsp::CopyFrom(const CSMonsterHitRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterHitRsp::IsInitialized() const {

  for (int i = 0; i < users_size(); i++) {
    if (!this->users(i).IsInitialized()) return false;
  }
  return true;
}

void CSMonsterHitRsp::Swap(CSMonsterHitRsp* other) {
  if (other != this) {
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterHitRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterHitRsp_descriptor_;
  metadata.reflection = CSMonsterHitRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSkillBeginReq::kUseridFieldNumber;
const int CSSkillBeginReq::kActionIdFieldNumber;
const int CSSkillBeginReq::kPosFieldNumber;
const int CSSkillBeginReq::kStartDirXFieldNumber;
const int CSSkillBeginReq::kStartDirYFieldNumber;
const int CSSkillBeginReq::kTargetPosFieldNumber;
const int CSSkillBeginReq::kDirectXFieldNumber;
const int CSSkillBeginReq::kDirectYFieldNumber;
const int CSSkillBeginReq::kAimFieldNumber;
#endif  // !_MSC_VER

CSSkillBeginReq::CSSkillBeginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSkillBeginReq::InitAsDefaultInstance() {
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  target_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSSkillBeginReq::CSSkillBeginReq(const CSSkillBeginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSkillBeginReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  action_id_ = 0u;
  pos_ = NULL;
  start_dir_x_ = 0;
  start_dir_y_ = 0;
  target_pos_ = NULL;
  direct_x_ = 0;
  direct_y_ = 0;
  aim_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSkillBeginReq::~CSSkillBeginReq() {
  SharedDtor();
}

void CSSkillBeginReq::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete target_pos_;
  }
}

void CSSkillBeginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSkillBeginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSkillBeginReq_descriptor_;
}

const CSSkillBeginReq& CSSkillBeginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSSkillBeginReq* CSSkillBeginReq::default_instance_ = NULL;

CSSkillBeginReq* CSSkillBeginReq::New() const {
  return new CSSkillBeginReq;
}

void CSSkillBeginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    action_id_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
    start_dir_x_ = 0;
    start_dir_y_ = 0;
    if (has_target_pos()) {
      if (target_pos_ != NULL) target_pos_->::CSPoint::Clear();
    }
    direct_x_ = 0;
    direct_y_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    aim_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSkillBeginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action_id;
        break;
      }

      // required uint32 action_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // required .CSPoint pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_start_dir_x;
        break;
      }

      // required float start_dir_x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_dir_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_dir_x_)));
          set_has_start_dir_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_start_dir_y;
        break;
      }

      // required float start_dir_y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_dir_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_dir_y_)));
          set_has_start_dir_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_target_pos;
        break;
      }

      // required .CSPoint target_pos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_direct_x;
        break;
      }

      // required float direct_x = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_direct_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direct_x_)));
          set_has_direct_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_direct_y;
        break;
      }

      // required float direct_y = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_direct_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direct_y_)));
          set_has_direct_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_aim;
        break;
      }

      // required bool aim = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aim_)));
          set_has_aim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSkillBeginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // required uint32 action_id = 2;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->action_id(), output);
  }

  // required .CSPoint pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // required float start_dir_x = 4;
  if (has_start_dir_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->start_dir_x(), output);
  }

  // required float start_dir_y = 5;
  if (has_start_dir_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->start_dir_y(), output);
  }

  // required .CSPoint target_pos = 6;
  if (has_target_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->target_pos(), output);
  }

  // required float direct_x = 7;
  if (has_direct_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->direct_x(), output);
  }

  // required float direct_y = 8;
  if (has_direct_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->direct_y(), output);
  }

  // required bool aim = 9;
  if (has_aim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->aim(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSkillBeginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // required uint32 action_id = 2;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->action_id(), target);
  }

  // required .CSPoint pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // required float start_dir_x = 4;
  if (has_start_dir_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->start_dir_x(), target);
  }

  // required float start_dir_y = 5;
  if (has_start_dir_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->start_dir_y(), target);
  }

  // required .CSPoint target_pos = 6;
  if (has_target_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->target_pos(), target);
  }

  // required float direct_x = 7;
  if (has_direct_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->direct_x(), target);
  }

  // required float direct_y = 8;
  if (has_direct_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->direct_y(), target);
  }

  // required bool aim = 9;
  if (has_aim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->aim(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSkillBeginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // required uint32 action_id = 2;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }

    // required .CSPoint pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required float start_dir_x = 4;
    if (has_start_dir_x()) {
      total_size += 1 + 4;
    }

    // required float start_dir_y = 5;
    if (has_start_dir_y()) {
      total_size += 1 + 4;
    }

    // required .CSPoint target_pos = 6;
    if (has_target_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_pos());
    }

    // required float direct_x = 7;
    if (has_direct_x()) {
      total_size += 1 + 4;
    }

    // required float direct_y = 8;
    if (has_direct_y()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool aim = 9;
    if (has_aim()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSkillBeginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSkillBeginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSkillBeginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSkillBeginReq::MergeFrom(const CSSkillBeginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
    if (from.has_start_dir_x()) {
      set_start_dir_x(from.start_dir_x());
    }
    if (from.has_start_dir_y()) {
      set_start_dir_y(from.start_dir_y());
    }
    if (from.has_target_pos()) {
      mutable_target_pos()->::CSPoint::MergeFrom(from.target_pos());
    }
    if (from.has_direct_x()) {
      set_direct_x(from.direct_x());
    }
    if (from.has_direct_y()) {
      set_direct_y(from.direct_y());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_aim()) {
      set_aim(from.aim());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSkillBeginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSkillBeginReq::CopyFrom(const CSSkillBeginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSkillBeginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_target_pos()) {
    if (!this->target_pos().IsInitialized()) return false;
  }
  return true;
}

void CSSkillBeginReq::Swap(CSSkillBeginReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(action_id_, other->action_id_);
    std::swap(pos_, other->pos_);
    std::swap(start_dir_x_, other->start_dir_x_);
    std::swap(start_dir_y_, other->start_dir_y_);
    std::swap(target_pos_, other->target_pos_);
    std::swap(direct_x_, other->direct_x_);
    std::swap(direct_y_, other->direct_y_);
    std::swap(aim_, other->aim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSkillBeginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSkillBeginReq_descriptor_;
  metadata.reflection = CSSkillBeginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSkillBeginRsp::kUseridFieldNumber;
const int CSSkillBeginRsp::kActionIdFieldNumber;
const int CSSkillBeginRsp::kPosFieldNumber;
const int CSSkillBeginRsp::kStartDirXFieldNumber;
const int CSSkillBeginRsp::kStartDirYFieldNumber;
const int CSSkillBeginRsp::kTargetPosFieldNumber;
const int CSSkillBeginRsp::kDirectXFieldNumber;
const int CSSkillBeginRsp::kDirectYFieldNumber;
const int CSSkillBeginRsp::kAimFieldNumber;
#endif  // !_MSC_VER

CSSkillBeginRsp::CSSkillBeginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSkillBeginRsp::InitAsDefaultInstance() {
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  target_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSSkillBeginRsp::CSSkillBeginRsp(const CSSkillBeginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSkillBeginRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  action_id_ = 0u;
  pos_ = NULL;
  start_dir_x_ = 0;
  start_dir_y_ = 0;
  target_pos_ = NULL;
  direct_x_ = 0;
  direct_y_ = 0;
  aim_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSkillBeginRsp::~CSSkillBeginRsp() {
  SharedDtor();
}

void CSSkillBeginRsp::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete target_pos_;
  }
}

void CSSkillBeginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSkillBeginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSkillBeginRsp_descriptor_;
}

const CSSkillBeginRsp& CSSkillBeginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSSkillBeginRsp* CSSkillBeginRsp::default_instance_ = NULL;

CSSkillBeginRsp* CSSkillBeginRsp::New() const {
  return new CSSkillBeginRsp;
}

void CSSkillBeginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    action_id_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
    start_dir_x_ = 0;
    start_dir_y_ = 0;
    if (has_target_pos()) {
      if (target_pos_ != NULL) target_pos_->::CSPoint::Clear();
    }
    direct_x_ = 0;
    direct_y_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    aim_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSkillBeginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action_id;
        break;
      }

      // required uint32 action_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // required .CSPoint pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_start_dir_x;
        break;
      }

      // required float start_dir_x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_dir_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_dir_x_)));
          set_has_start_dir_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_start_dir_y;
        break;
      }

      // required float start_dir_y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_dir_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_dir_y_)));
          set_has_start_dir_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_target_pos;
        break;
      }

      // required .CSPoint target_pos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_direct_x;
        break;
      }

      // required float direct_x = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_direct_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direct_x_)));
          set_has_direct_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_direct_y;
        break;
      }

      // required float direct_y = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_direct_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direct_y_)));
          set_has_direct_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_aim;
        break;
      }

      // required bool aim = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aim_)));
          set_has_aim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSkillBeginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // required uint32 action_id = 2;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->action_id(), output);
  }

  // required .CSPoint pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // required float start_dir_x = 4;
  if (has_start_dir_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->start_dir_x(), output);
  }

  // required float start_dir_y = 5;
  if (has_start_dir_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->start_dir_y(), output);
  }

  // required .CSPoint target_pos = 6;
  if (has_target_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->target_pos(), output);
  }

  // required float direct_x = 7;
  if (has_direct_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->direct_x(), output);
  }

  // required float direct_y = 8;
  if (has_direct_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->direct_y(), output);
  }

  // required bool aim = 9;
  if (has_aim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->aim(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSkillBeginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // required uint32 action_id = 2;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->action_id(), target);
  }

  // required .CSPoint pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // required float start_dir_x = 4;
  if (has_start_dir_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->start_dir_x(), target);
  }

  // required float start_dir_y = 5;
  if (has_start_dir_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->start_dir_y(), target);
  }

  // required .CSPoint target_pos = 6;
  if (has_target_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->target_pos(), target);
  }

  // required float direct_x = 7;
  if (has_direct_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->direct_x(), target);
  }

  // required float direct_y = 8;
  if (has_direct_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->direct_y(), target);
  }

  // required bool aim = 9;
  if (has_aim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->aim(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSkillBeginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // required uint32 action_id = 2;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }

    // required .CSPoint pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required float start_dir_x = 4;
    if (has_start_dir_x()) {
      total_size += 1 + 4;
    }

    // required float start_dir_y = 5;
    if (has_start_dir_y()) {
      total_size += 1 + 4;
    }

    // required .CSPoint target_pos = 6;
    if (has_target_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_pos());
    }

    // required float direct_x = 7;
    if (has_direct_x()) {
      total_size += 1 + 4;
    }

    // required float direct_y = 8;
    if (has_direct_y()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool aim = 9;
    if (has_aim()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSkillBeginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSkillBeginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSkillBeginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSkillBeginRsp::MergeFrom(const CSSkillBeginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
    if (from.has_start_dir_x()) {
      set_start_dir_x(from.start_dir_x());
    }
    if (from.has_start_dir_y()) {
      set_start_dir_y(from.start_dir_y());
    }
    if (from.has_target_pos()) {
      mutable_target_pos()->::CSPoint::MergeFrom(from.target_pos());
    }
    if (from.has_direct_x()) {
      set_direct_x(from.direct_x());
    }
    if (from.has_direct_y()) {
      set_direct_y(from.direct_y());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_aim()) {
      set_aim(from.aim());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSkillBeginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSkillBeginRsp::CopyFrom(const CSSkillBeginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSkillBeginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_target_pos()) {
    if (!this->target_pos().IsInitialized()) return false;
  }
  return true;
}

void CSSkillBeginRsp::Swap(CSSkillBeginRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(action_id_, other->action_id_);
    std::swap(pos_, other->pos_);
    std::swap(start_dir_x_, other->start_dir_x_);
    std::swap(start_dir_y_, other->start_dir_y_);
    std::swap(target_pos_, other->target_pos_);
    std::swap(direct_x_, other->direct_x_);
    std::swap(direct_y_, other->direct_y_);
    std::swap(aim_, other->aim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSkillBeginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSkillBeginRsp_descriptor_;
  metadata.reflection = CSSkillBeginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerAttackReq::kUseridFieldNumber;
const int CSPlayerAttackReq::kStartPosFieldNumber;
const int CSPlayerAttackReq::kStartDirectFieldNumber;
const int CSPlayerAttackReq::kEndPosFieldNumber;
const int CSPlayerAttackReq::kEndDirectFieldNumber;
const int CSPlayerAttackReq::kActionIdFieldNumber;
const int CSPlayerAttackReq::kMonstersFieldNumber;
#endif  // !_MSC_VER

CSPlayerAttackReq::CSPlayerAttackReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerAttackReq::InitAsDefaultInstance() {
  start_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  start_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSPlayerAttackReq::CSPlayerAttackReq(const CSPlayerAttackReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerAttackReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  start_pos_ = NULL;
  start_direct_ = NULL;
  end_pos_ = NULL;
  end_direct_ = NULL;
  action_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerAttackReq::~CSPlayerAttackReq() {
  SharedDtor();
}

void CSPlayerAttackReq::SharedDtor() {
  if (this != default_instance_) {
    delete start_pos_;
    delete start_direct_;
    delete end_pos_;
    delete end_direct_;
  }
}

void CSPlayerAttackReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerAttackReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerAttackReq_descriptor_;
}

const CSPlayerAttackReq& CSPlayerAttackReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSPlayerAttackReq* CSPlayerAttackReq::default_instance_ = NULL;

CSPlayerAttackReq* CSPlayerAttackReq::New() const {
  return new CSPlayerAttackReq;
}

void CSPlayerAttackReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    if (has_start_pos()) {
      if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
    }
    if (has_start_direct()) {
      if (start_direct_ != NULL) start_direct_->::CSPoint::Clear();
    }
    if (has_end_pos()) {
      if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
    }
    if (has_end_direct()) {
      if (end_direct_ != NULL) end_direct_->::CSPoint::Clear();
    }
    action_id_ = 0u;
  }
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerAttackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_start_pos;
        break;
      }

      // required .CSPoint start_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_start_direct;
        break;
      }

      // required .CSPoint start_direct = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_end_pos;
        break;
      }

      // required .CSPoint end_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_end_direct;
        break;
      }

      // required .CSPoint end_direct = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_action_id;
        break;
      }

      // required uint32 action_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_monsters;
        break;
      }

      // repeated .AttackMonsterInfo monsters = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_monsters;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerAttackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // required .CSPoint start_pos = 2;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->start_pos(), output);
  }

  // required .CSPoint start_direct = 3;
  if (has_start_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->start_direct(), output);
  }

  // required .CSPoint end_pos = 4;
  if (has_end_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->end_pos(), output);
  }

  // required .CSPoint end_direct = 5;
  if (has_end_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->end_direct(), output);
  }

  // required uint32 action_id = 6;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->action_id(), output);
  }

  // repeated .AttackMonsterInfo monsters = 7;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->monsters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerAttackReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // required .CSPoint start_pos = 2;
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->start_pos(), target);
  }

  // required .CSPoint start_direct = 3;
  if (has_start_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->start_direct(), target);
  }

  // required .CSPoint end_pos = 4;
  if (has_end_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->end_pos(), target);
  }

  // required .CSPoint end_direct = 5;
  if (has_end_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->end_direct(), target);
  }

  // required uint32 action_id = 6;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->action_id(), target);
  }

  // repeated .AttackMonsterInfo monsters = 7;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->monsters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerAttackReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // required .CSPoint start_pos = 2;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_pos());
    }

    // required .CSPoint start_direct = 3;
    if (has_start_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_direct());
    }

    // required .CSPoint end_pos = 4;
    if (has_end_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_pos());
    }

    // required .CSPoint end_direct = 5;
    if (has_end_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_direct());
    }

    // required uint32 action_id = 6;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }

  }
  // repeated .AttackMonsterInfo monsters = 7;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerAttackReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerAttackReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerAttackReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerAttackReq::MergeFrom(const CSPlayerAttackReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_start_pos()) {
      mutable_start_pos()->::CSPoint::MergeFrom(from.start_pos());
    }
    if (from.has_start_direct()) {
      mutable_start_direct()->::CSPoint::MergeFrom(from.start_direct());
    }
    if (from.has_end_pos()) {
      mutable_end_pos()->::CSPoint::MergeFrom(from.end_pos());
    }
    if (from.has_end_direct()) {
      mutable_end_direct()->::CSPoint::MergeFrom(from.end_direct());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerAttackReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerAttackReq::CopyFrom(const CSPlayerAttackReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerAttackReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_start_pos()) {
    if (!this->start_pos().IsInitialized()) return false;
  }
  if (has_start_direct()) {
    if (!this->start_direct().IsInitialized()) return false;
  }
  if (has_end_pos()) {
    if (!this->end_pos().IsInitialized()) return false;
  }
  if (has_end_direct()) {
    if (!this->end_direct().IsInitialized()) return false;
  }
  for (int i = 0; i < monsters_size(); i++) {
    if (!this->monsters(i).IsInitialized()) return false;
  }
  return true;
}

void CSPlayerAttackReq::Swap(CSPlayerAttackReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(start_pos_, other->start_pos_);
    std::swap(start_direct_, other->start_direct_);
    std::swap(end_pos_, other->end_pos_);
    std::swap(end_direct_, other->end_direct_);
    std::swap(action_id_, other->action_id_);
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerAttackReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerAttackReq_descriptor_;
  metadata.reflection = CSPlayerAttackReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerAttackRsp::kUseridFieldNumber;
const int CSPlayerAttackRsp::kStartPosFieldNumber;
const int CSPlayerAttackRsp::kStartDirectFieldNumber;
const int CSPlayerAttackRsp::kEndPosFieldNumber;
const int CSPlayerAttackRsp::kEndDirectFieldNumber;
const int CSPlayerAttackRsp::kActionIdFieldNumber;
const int CSPlayerAttackRsp::kMonstersFieldNumber;
#endif  // !_MSC_VER

CSPlayerAttackRsp::CSPlayerAttackRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerAttackRsp::InitAsDefaultInstance() {
  start_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  start_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSPlayerAttackRsp::CSPlayerAttackRsp(const CSPlayerAttackRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerAttackRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  start_pos_ = NULL;
  start_direct_ = NULL;
  end_pos_ = NULL;
  end_direct_ = NULL;
  action_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerAttackRsp::~CSPlayerAttackRsp() {
  SharedDtor();
}

void CSPlayerAttackRsp::SharedDtor() {
  if (this != default_instance_) {
    delete start_pos_;
    delete start_direct_;
    delete end_pos_;
    delete end_direct_;
  }
}

void CSPlayerAttackRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerAttackRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerAttackRsp_descriptor_;
}

const CSPlayerAttackRsp& CSPlayerAttackRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSPlayerAttackRsp* CSPlayerAttackRsp::default_instance_ = NULL;

CSPlayerAttackRsp* CSPlayerAttackRsp::New() const {
  return new CSPlayerAttackRsp;
}

void CSPlayerAttackRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    if (has_start_pos()) {
      if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
    }
    if (has_start_direct()) {
      if (start_direct_ != NULL) start_direct_->::CSPoint::Clear();
    }
    if (has_end_pos()) {
      if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
    }
    if (has_end_direct()) {
      if (end_direct_ != NULL) end_direct_->::CSPoint::Clear();
    }
    action_id_ = 0u;
  }
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerAttackRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_start_pos;
        break;
      }

      // required .CSPoint start_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_start_direct;
        break;
      }

      // required .CSPoint start_direct = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_end_pos;
        break;
      }

      // required .CSPoint end_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_end_direct;
        break;
      }

      // required .CSPoint end_direct = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_action_id;
        break;
      }

      // required uint32 action_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_monsters;
        break;
      }

      // repeated .AttackMonsterInfo monsters = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_monsters;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerAttackRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // required .CSPoint start_pos = 2;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->start_pos(), output);
  }

  // required .CSPoint start_direct = 3;
  if (has_start_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->start_direct(), output);
  }

  // required .CSPoint end_pos = 4;
  if (has_end_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->end_pos(), output);
  }

  // required .CSPoint end_direct = 5;
  if (has_end_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->end_direct(), output);
  }

  // required uint32 action_id = 6;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->action_id(), output);
  }

  // repeated .AttackMonsterInfo monsters = 7;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->monsters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerAttackRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // required .CSPoint start_pos = 2;
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->start_pos(), target);
  }

  // required .CSPoint start_direct = 3;
  if (has_start_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->start_direct(), target);
  }

  // required .CSPoint end_pos = 4;
  if (has_end_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->end_pos(), target);
  }

  // required .CSPoint end_direct = 5;
  if (has_end_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->end_direct(), target);
  }

  // required uint32 action_id = 6;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->action_id(), target);
  }

  // repeated .AttackMonsterInfo monsters = 7;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->monsters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerAttackRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // required .CSPoint start_pos = 2;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_pos());
    }

    // required .CSPoint start_direct = 3;
    if (has_start_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_direct());
    }

    // required .CSPoint end_pos = 4;
    if (has_end_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_pos());
    }

    // required .CSPoint end_direct = 5;
    if (has_end_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_direct());
    }

    // required uint32 action_id = 6;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }

  }
  // repeated .AttackMonsterInfo monsters = 7;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerAttackRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerAttackRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerAttackRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerAttackRsp::MergeFrom(const CSPlayerAttackRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_start_pos()) {
      mutable_start_pos()->::CSPoint::MergeFrom(from.start_pos());
    }
    if (from.has_start_direct()) {
      mutable_start_direct()->::CSPoint::MergeFrom(from.start_direct());
    }
    if (from.has_end_pos()) {
      mutable_end_pos()->::CSPoint::MergeFrom(from.end_pos());
    }
    if (from.has_end_direct()) {
      mutable_end_direct()->::CSPoint::MergeFrom(from.end_direct());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerAttackRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerAttackRsp::CopyFrom(const CSPlayerAttackRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerAttackRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_start_pos()) {
    if (!this->start_pos().IsInitialized()) return false;
  }
  if (has_start_direct()) {
    if (!this->start_direct().IsInitialized()) return false;
  }
  if (has_end_pos()) {
    if (!this->end_pos().IsInitialized()) return false;
  }
  if (has_end_direct()) {
    if (!this->end_direct().IsInitialized()) return false;
  }
  for (int i = 0; i < monsters_size(); i++) {
    if (!this->monsters(i).IsInitialized()) return false;
  }
  return true;
}

void CSPlayerAttackRsp::Swap(CSPlayerAttackRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(start_pos_, other->start_pos_);
    std::swap(start_direct_, other->start_direct_);
    std::swap(end_pos_, other->end_pos_);
    std::swap(end_direct_, other->end_direct_);
    std::swap(action_id_, other->action_id_);
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerAttackRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerAttackRsp_descriptor_;
  metadata.reflection = CSPlayerAttackRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttackPlayerInfo::kUseridFieldNumber;
const int AttackPlayerInfo::kBloodFieldNumber;
const int AttackPlayerInfo::kHurtTypeFieldNumber;
#endif  // !_MSC_VER

AttackPlayerInfo::AttackPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttackPlayerInfo::InitAsDefaultInstance() {
}

AttackPlayerInfo::AttackPlayerInfo(const AttackPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttackPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  blood_ = 0u;
  hurt_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttackPlayerInfo::~AttackPlayerInfo() {
  SharedDtor();
}

void AttackPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttackPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttackPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttackPlayerInfo_descriptor_;
}

const AttackPlayerInfo& AttackPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

AttackPlayerInfo* AttackPlayerInfo::default_instance_ = NULL;

AttackPlayerInfo* AttackPlayerInfo::New() const {
  return new AttackPlayerInfo;
}

void AttackPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    blood_ = 0u;
    hurt_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttackPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_blood;
        break;
      }

      // required uint32 blood = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hurt_type;
        break;
      }

      // required uint32 hurt_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurt_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurt_type_)));
          set_has_hurt_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttackPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // required uint32 blood = 2;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->blood(), output);
  }

  // required uint32 hurt_type = 3;
  if (has_hurt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hurt_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttackPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // required uint32 blood = 2;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->blood(), target);
  }

  // required uint32 hurt_type = 3;
  if (has_hurt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hurt_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttackPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // required uint32 blood = 2;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }

    // required uint32 hurt_type = 3;
    if (has_hurt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurt_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttackPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttackPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttackPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttackPlayerInfo::MergeFrom(const AttackPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_hurt_type()) {
      set_hurt_type(from.hurt_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttackPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttackPlayerInfo::CopyFrom(const AttackPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttackPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AttackPlayerInfo::Swap(AttackPlayerInfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(blood_, other->blood_);
    std::swap(hurt_type_, other->hurt_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttackPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttackPlayerInfo_descriptor_;
  metadata.reflection = AttackPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerHitPlayerReq::kUseridFieldNumber;
const int CSPlayerHitPlayerReq::kStartPosFieldNumber;
const int CSPlayerHitPlayerReq::kStartDirectFieldNumber;
const int CSPlayerHitPlayerReq::kEndPosFieldNumber;
const int CSPlayerHitPlayerReq::kEndDirectFieldNumber;
const int CSPlayerHitPlayerReq::kActionIdFieldNumber;
const int CSPlayerHitPlayerReq::kUsersFieldNumber;
#endif  // !_MSC_VER

CSPlayerHitPlayerReq::CSPlayerHitPlayerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerHitPlayerReq::InitAsDefaultInstance() {
  start_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  start_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSPlayerHitPlayerReq::CSPlayerHitPlayerReq(const CSPlayerHitPlayerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerHitPlayerReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  start_pos_ = NULL;
  start_direct_ = NULL;
  end_pos_ = NULL;
  end_direct_ = NULL;
  action_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerHitPlayerReq::~CSPlayerHitPlayerReq() {
  SharedDtor();
}

void CSPlayerHitPlayerReq::SharedDtor() {
  if (this != default_instance_) {
    delete start_pos_;
    delete start_direct_;
    delete end_pos_;
    delete end_direct_;
  }
}

void CSPlayerHitPlayerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerHitPlayerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerHitPlayerReq_descriptor_;
}

const CSPlayerHitPlayerReq& CSPlayerHitPlayerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSPlayerHitPlayerReq* CSPlayerHitPlayerReq::default_instance_ = NULL;

CSPlayerHitPlayerReq* CSPlayerHitPlayerReq::New() const {
  return new CSPlayerHitPlayerReq;
}

void CSPlayerHitPlayerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    if (has_start_pos()) {
      if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
    }
    if (has_start_direct()) {
      if (start_direct_ != NULL) start_direct_->::CSPoint::Clear();
    }
    if (has_end_pos()) {
      if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
    }
    if (has_end_direct()) {
      if (end_direct_ != NULL) end_direct_->::CSPoint::Clear();
    }
    action_id_ = 0u;
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerHitPlayerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_start_pos;
        break;
      }

      // required .CSPoint start_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_start_direct;
        break;
      }

      // required .CSPoint start_direct = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_end_pos;
        break;
      }

      // required .CSPoint end_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_end_direct;
        break;
      }

      // required .CSPoint end_direct = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_action_id;
        break;
      }

      // required uint32 action_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_users;
        break;
      }

      // repeated .AttackPlayerInfo users = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerHitPlayerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // required .CSPoint start_pos = 2;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->start_pos(), output);
  }

  // required .CSPoint start_direct = 3;
  if (has_start_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->start_direct(), output);
  }

  // required .CSPoint end_pos = 4;
  if (has_end_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->end_pos(), output);
  }

  // required .CSPoint end_direct = 5;
  if (has_end_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->end_direct(), output);
  }

  // required uint32 action_id = 6;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->action_id(), output);
  }

  // repeated .AttackPlayerInfo users = 7;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerHitPlayerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // required .CSPoint start_pos = 2;
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->start_pos(), target);
  }

  // required .CSPoint start_direct = 3;
  if (has_start_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->start_direct(), target);
  }

  // required .CSPoint end_pos = 4;
  if (has_end_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->end_pos(), target);
  }

  // required .CSPoint end_direct = 5;
  if (has_end_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->end_direct(), target);
  }

  // required uint32 action_id = 6;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->action_id(), target);
  }

  // repeated .AttackPlayerInfo users = 7;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerHitPlayerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // required .CSPoint start_pos = 2;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_pos());
    }

    // required .CSPoint start_direct = 3;
    if (has_start_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_direct());
    }

    // required .CSPoint end_pos = 4;
    if (has_end_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_pos());
    }

    // required .CSPoint end_direct = 5;
    if (has_end_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_direct());
    }

    // required uint32 action_id = 6;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }

  }
  // repeated .AttackPlayerInfo users = 7;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerHitPlayerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerHitPlayerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerHitPlayerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerHitPlayerReq::MergeFrom(const CSPlayerHitPlayerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_start_pos()) {
      mutable_start_pos()->::CSPoint::MergeFrom(from.start_pos());
    }
    if (from.has_start_direct()) {
      mutable_start_direct()->::CSPoint::MergeFrom(from.start_direct());
    }
    if (from.has_end_pos()) {
      mutable_end_pos()->::CSPoint::MergeFrom(from.end_pos());
    }
    if (from.has_end_direct()) {
      mutable_end_direct()->::CSPoint::MergeFrom(from.end_direct());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerHitPlayerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerHitPlayerReq::CopyFrom(const CSPlayerHitPlayerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerHitPlayerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_start_pos()) {
    if (!this->start_pos().IsInitialized()) return false;
  }
  if (has_start_direct()) {
    if (!this->start_direct().IsInitialized()) return false;
  }
  if (has_end_pos()) {
    if (!this->end_pos().IsInitialized()) return false;
  }
  if (has_end_direct()) {
    if (!this->end_direct().IsInitialized()) return false;
  }
  for (int i = 0; i < users_size(); i++) {
    if (!this->users(i).IsInitialized()) return false;
  }
  return true;
}

void CSPlayerHitPlayerReq::Swap(CSPlayerHitPlayerReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(start_pos_, other->start_pos_);
    std::swap(start_direct_, other->start_direct_);
    std::swap(end_pos_, other->end_pos_);
    std::swap(end_direct_, other->end_direct_);
    std::swap(action_id_, other->action_id_);
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerHitPlayerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerHitPlayerReq_descriptor_;
  metadata.reflection = CSPlayerHitPlayerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerHitPlayerRsp::kUseridFieldNumber;
const int CSPlayerHitPlayerRsp::kStartPosFieldNumber;
const int CSPlayerHitPlayerRsp::kStartDirectFieldNumber;
const int CSPlayerHitPlayerRsp::kEndPosFieldNumber;
const int CSPlayerHitPlayerRsp::kEndDirectFieldNumber;
const int CSPlayerHitPlayerRsp::kActionIdFieldNumber;
const int CSPlayerHitPlayerRsp::kUsersFieldNumber;
#endif  // !_MSC_VER

CSPlayerHitPlayerRsp::CSPlayerHitPlayerRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerHitPlayerRsp::InitAsDefaultInstance() {
  start_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  start_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSPlayerHitPlayerRsp::CSPlayerHitPlayerRsp(const CSPlayerHitPlayerRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerHitPlayerRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  start_pos_ = NULL;
  start_direct_ = NULL;
  end_pos_ = NULL;
  end_direct_ = NULL;
  action_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerHitPlayerRsp::~CSPlayerHitPlayerRsp() {
  SharedDtor();
}

void CSPlayerHitPlayerRsp::SharedDtor() {
  if (this != default_instance_) {
    delete start_pos_;
    delete start_direct_;
    delete end_pos_;
    delete end_direct_;
  }
}

void CSPlayerHitPlayerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerHitPlayerRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerHitPlayerRsp_descriptor_;
}

const CSPlayerHitPlayerRsp& CSPlayerHitPlayerRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSPlayerHitPlayerRsp* CSPlayerHitPlayerRsp::default_instance_ = NULL;

CSPlayerHitPlayerRsp* CSPlayerHitPlayerRsp::New() const {
  return new CSPlayerHitPlayerRsp;
}

void CSPlayerHitPlayerRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    if (has_start_pos()) {
      if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
    }
    if (has_start_direct()) {
      if (start_direct_ != NULL) start_direct_->::CSPoint::Clear();
    }
    if (has_end_pos()) {
      if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
    }
    if (has_end_direct()) {
      if (end_direct_ != NULL) end_direct_->::CSPoint::Clear();
    }
    action_id_ = 0u;
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerHitPlayerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_start_pos;
        break;
      }

      // required .CSPoint start_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_start_direct;
        break;
      }

      // required .CSPoint start_direct = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_end_pos;
        break;
      }

      // required .CSPoint end_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_end_direct;
        break;
      }

      // required .CSPoint end_direct = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_action_id;
        break;
      }

      // required uint32 action_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_users;
        break;
      }

      // repeated .AttackPlayerInfo users = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerHitPlayerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // required .CSPoint start_pos = 2;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->start_pos(), output);
  }

  // required .CSPoint start_direct = 3;
  if (has_start_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->start_direct(), output);
  }

  // required .CSPoint end_pos = 4;
  if (has_end_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->end_pos(), output);
  }

  // required .CSPoint end_direct = 5;
  if (has_end_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->end_direct(), output);
  }

  // required uint32 action_id = 6;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->action_id(), output);
  }

  // repeated .AttackPlayerInfo users = 7;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerHitPlayerRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // required .CSPoint start_pos = 2;
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->start_pos(), target);
  }

  // required .CSPoint start_direct = 3;
  if (has_start_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->start_direct(), target);
  }

  // required .CSPoint end_pos = 4;
  if (has_end_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->end_pos(), target);
  }

  // required .CSPoint end_direct = 5;
  if (has_end_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->end_direct(), target);
  }

  // required uint32 action_id = 6;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->action_id(), target);
  }

  // repeated .AttackPlayerInfo users = 7;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerHitPlayerRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // required .CSPoint start_pos = 2;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_pos());
    }

    // required .CSPoint start_direct = 3;
    if (has_start_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_direct());
    }

    // required .CSPoint end_pos = 4;
    if (has_end_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_pos());
    }

    // required .CSPoint end_direct = 5;
    if (has_end_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_direct());
    }

    // required uint32 action_id = 6;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }

  }
  // repeated .AttackPlayerInfo users = 7;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerHitPlayerRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerHitPlayerRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerHitPlayerRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerHitPlayerRsp::MergeFrom(const CSPlayerHitPlayerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_start_pos()) {
      mutable_start_pos()->::CSPoint::MergeFrom(from.start_pos());
    }
    if (from.has_start_direct()) {
      mutable_start_direct()->::CSPoint::MergeFrom(from.start_direct());
    }
    if (from.has_end_pos()) {
      mutable_end_pos()->::CSPoint::MergeFrom(from.end_pos());
    }
    if (from.has_end_direct()) {
      mutable_end_direct()->::CSPoint::MergeFrom(from.end_direct());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerHitPlayerRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerHitPlayerRsp::CopyFrom(const CSPlayerHitPlayerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerHitPlayerRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_start_pos()) {
    if (!this->start_pos().IsInitialized()) return false;
  }
  if (has_start_direct()) {
    if (!this->start_direct().IsInitialized()) return false;
  }
  if (has_end_pos()) {
    if (!this->end_pos().IsInitialized()) return false;
  }
  if (has_end_direct()) {
    if (!this->end_direct().IsInitialized()) return false;
  }
  for (int i = 0; i < users_size(); i++) {
    if (!this->users(i).IsInitialized()) return false;
  }
  return true;
}

void CSPlayerHitPlayerRsp::Swap(CSPlayerHitPlayerRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(start_pos_, other->start_pos_);
    std::swap(start_direct_, other->start_direct_);
    std::swap(end_pos_, other->end_pos_);
    std::swap(end_direct_, other->end_direct_);
    std::swap(action_id_, other->action_id_);
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerHitPlayerRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerHitPlayerRsp_descriptor_;
  metadata.reflection = CSPlayerHitPlayerRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerHPRsp::kUseridFieldNumber;
const int CSPlayerHPRsp::kBloodFieldNumber;
#endif  // !_MSC_VER

CSPlayerHPRsp::CSPlayerHPRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerHPRsp::InitAsDefaultInstance() {
}

CSPlayerHPRsp::CSPlayerHPRsp(const CSPlayerHPRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerHPRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  blood_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerHPRsp::~CSPlayerHPRsp() {
  SharedDtor();
}

void CSPlayerHPRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPlayerHPRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerHPRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerHPRsp_descriptor_;
}

const CSPlayerHPRsp& CSPlayerHPRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSPlayerHPRsp* CSPlayerHPRsp::default_instance_ = NULL;

CSPlayerHPRsp* CSPlayerHPRsp::New() const {
  return new CSPlayerHPRsp;
}

void CSPlayerHPRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    blood_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerHPRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_blood;
        break;
      }

      // required uint32 blood = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerHPRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // required uint32 blood = 2;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->blood(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerHPRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // required uint32 blood = 2;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->blood(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerHPRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // required uint32 blood = 2;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerHPRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerHPRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerHPRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerHPRsp::MergeFrom(const CSPlayerHPRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerHPRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerHPRsp::CopyFrom(const CSPlayerHPRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerHPRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSPlayerHPRsp::Swap(CSPlayerHPRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(blood_, other->blood_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerHPRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerHPRsp_descriptor_;
  metadata.reflection = CSPlayerHPRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterBloodRsp::kMonstersFieldNumber;
#endif  // !_MSC_VER

CSMonsterBloodRsp::CSMonsterBloodRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterBloodRsp::InitAsDefaultInstance() {
}

CSMonsterBloodRsp::CSMonsterBloodRsp(const CSMonsterBloodRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterBloodRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterBloodRsp::~CSMonsterBloodRsp() {
  SharedDtor();
}

void CSMonsterBloodRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterBloodRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterBloodRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterBloodRsp_descriptor_;
}

const CSMonsterBloodRsp& CSMonsterBloodRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSMonsterBloodRsp* CSMonsterBloodRsp::default_instance_ = NULL;

CSMonsterBloodRsp* CSMonsterBloodRsp::New() const {
  return new CSMonsterBloodRsp;
}

void CSMonsterBloodRsp::Clear() {
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterBloodRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSAttackMonsterBackInfo monsters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monsters;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterBloodRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSAttackMonsterBackInfo monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monsters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterBloodRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSAttackMonsterBackInfo monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monsters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterBloodRsp::ByteSize() const {
  int total_size = 0;

  // repeated .CSAttackMonsterBackInfo monsters = 1;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterBloodRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterBloodRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterBloodRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterBloodRsp::MergeFrom(const CSMonsterBloodRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterBloodRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterBloodRsp::CopyFrom(const CSMonsterBloodRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterBloodRsp::IsInitialized() const {

  for (int i = 0; i < monsters_size(); i++) {
    if (!this->monsters(i).IsInitialized()) return false;
  }
  return true;
}

void CSMonsterBloodRsp::Swap(CSMonsterBloodRsp* other) {
  if (other != this) {
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterBloodRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterBloodRsp_descriptor_;
  metadata.reflection = CSMonsterBloodRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterDieRsp::kMonstersFieldNumber;
#endif  // !_MSC_VER

CSMonsterDieRsp::CSMonsterDieRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterDieRsp::InitAsDefaultInstance() {
}

CSMonsterDieRsp::CSMonsterDieRsp(const CSMonsterDieRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterDieRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterDieRsp::~CSMonsterDieRsp() {
  SharedDtor();
}

void CSMonsterDieRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterDieRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterDieRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterDieRsp_descriptor_;
}

const CSMonsterDieRsp& CSMonsterDieRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSMonsterDieRsp* CSMonsterDieRsp::default_instance_ = NULL;

CSMonsterDieRsp* CSMonsterDieRsp::New() const {
  return new CSMonsterDieRsp;
}

void CSMonsterDieRsp::Clear() {
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterDieRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 monsters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_monsters())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_monsters())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_monsters;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterDieRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->monsters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterDieRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->monsters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterDieRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 monsters = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->monsters_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->monsters(i));
    }
    total_size += 1 * this->monsters_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterDieRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterDieRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterDieRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterDieRsp::MergeFrom(const CSMonsterDieRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterDieRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterDieRsp::CopyFrom(const CSMonsterDieRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterDieRsp::IsInitialized() const {

  return true;
}

void CSMonsterDieRsp::Swap(CSMonsterDieRsp* other) {
  if (other != this) {
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterDieRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterDieRsp_descriptor_;
  metadata.reflection = CSMonsterDieRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSABMonsterReq::kInstanceIdFieldNumber;
#endif  // !_MSC_VER

CSABMonsterReq::CSABMonsterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSABMonsterReq::InitAsDefaultInstance() {
}

CSABMonsterReq::CSABMonsterReq(const CSABMonsterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSABMonsterReq::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSABMonsterReq::~CSABMonsterReq() {
  SharedDtor();
}

void CSABMonsterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSABMonsterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSABMonsterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSABMonsterReq_descriptor_;
}

const CSABMonsterReq& CSABMonsterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSABMonsterReq* CSABMonsterReq::default_instance_ = NULL;

CSABMonsterReq* CSABMonsterReq::New() const {
  return new CSABMonsterReq;
}

void CSABMonsterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSABMonsterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSABMonsterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->instance_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSABMonsterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->instance_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSABMonsterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSABMonsterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSABMonsterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSABMonsterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSABMonsterReq::MergeFrom(const CSABMonsterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSABMonsterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSABMonsterReq::CopyFrom(const CSABMonsterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSABMonsterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSABMonsterReq::Swap(CSABMonsterReq* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSABMonsterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSABMonsterReq_descriptor_;
  metadata.reflection = CSABMonsterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSABMonsterRsp_MonInfo::kMonIdFieldNumber;
const int CSABMonsterRsp_MonInfo::kMonNumFieldNumber;
#endif  // !_MSC_VER

CSABMonsterRsp_MonInfo::CSABMonsterRsp_MonInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSABMonsterRsp_MonInfo::InitAsDefaultInstance() {
}

CSABMonsterRsp_MonInfo::CSABMonsterRsp_MonInfo(const CSABMonsterRsp_MonInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSABMonsterRsp_MonInfo::SharedCtor() {
  _cached_size_ = 0;
  mon_id_ = 0u;
  mon_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSABMonsterRsp_MonInfo::~CSABMonsterRsp_MonInfo() {
  SharedDtor();
}

void CSABMonsterRsp_MonInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSABMonsterRsp_MonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSABMonsterRsp_MonInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSABMonsterRsp_MonInfo_descriptor_;
}

const CSABMonsterRsp_MonInfo& CSABMonsterRsp_MonInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSABMonsterRsp_MonInfo* CSABMonsterRsp_MonInfo::default_instance_ = NULL;

CSABMonsterRsp_MonInfo* CSABMonsterRsp_MonInfo::New() const {
  return new CSABMonsterRsp_MonInfo;
}

void CSABMonsterRsp_MonInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mon_id_ = 0u;
    mon_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSABMonsterRsp_MonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mon_id_)));
          set_has_mon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mon_num;
        break;
      }

      // required uint32 mon_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mon_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mon_num_)));
          set_has_mon_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSABMonsterRsp_MonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mon_id = 1;
  if (has_mon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mon_id(), output);
  }

  // required uint32 mon_num = 2;
  if (has_mon_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mon_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSABMonsterRsp_MonInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mon_id = 1;
  if (has_mon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mon_id(), target);
  }

  // required uint32 mon_num = 2;
  if (has_mon_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mon_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSABMonsterRsp_MonInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mon_id = 1;
    if (has_mon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mon_id());
    }

    // required uint32 mon_num = 2;
    if (has_mon_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mon_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSABMonsterRsp_MonInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSABMonsterRsp_MonInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSABMonsterRsp_MonInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSABMonsterRsp_MonInfo::MergeFrom(const CSABMonsterRsp_MonInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mon_id()) {
      set_mon_id(from.mon_id());
    }
    if (from.has_mon_num()) {
      set_mon_num(from.mon_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSABMonsterRsp_MonInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSABMonsterRsp_MonInfo::CopyFrom(const CSABMonsterRsp_MonInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSABMonsterRsp_MonInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSABMonsterRsp_MonInfo::Swap(CSABMonsterRsp_MonInfo* other) {
  if (other != this) {
    std::swap(mon_id_, other->mon_id_);
    std::swap(mon_num_, other->mon_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSABMonsterRsp_MonInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSABMonsterRsp_MonInfo_descriptor_;
  metadata.reflection = CSABMonsterRsp_MonInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSABMonsterRsp::kInstanceIdFieldNumber;
const int CSABMonsterRsp::kMonInfosFieldNumber;
#endif  // !_MSC_VER

CSABMonsterRsp::CSABMonsterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSABMonsterRsp::InitAsDefaultInstance() {
}

CSABMonsterRsp::CSABMonsterRsp(const CSABMonsterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSABMonsterRsp::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSABMonsterRsp::~CSABMonsterRsp() {
  SharedDtor();
}

void CSABMonsterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSABMonsterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSABMonsterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSABMonsterRsp_descriptor_;
}

const CSABMonsterRsp& CSABMonsterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSABMonsterRsp* CSABMonsterRsp::default_instance_ = NULL;

CSABMonsterRsp* CSABMonsterRsp::New() const {
  return new CSABMonsterRsp;
}

void CSABMonsterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0u;
  }
  mon_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSABMonsterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mon_infos;
        break;
      }

      // repeated .CSABMonsterRsp.MonInfo mon_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mon_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mon_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mon_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSABMonsterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->instance_id(), output);
  }

  // repeated .CSABMonsterRsp.MonInfo mon_infos = 2;
  for (int i = 0; i < this->mon_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mon_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSABMonsterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->instance_id(), target);
  }

  // repeated .CSABMonsterRsp.MonInfo mon_infos = 2;
  for (int i = 0; i < this->mon_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mon_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSABMonsterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }

  }
  // repeated .CSABMonsterRsp.MonInfo mon_infos = 2;
  total_size += 1 * this->mon_infos_size();
  for (int i = 0; i < this->mon_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mon_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSABMonsterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSABMonsterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSABMonsterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSABMonsterRsp::MergeFrom(const CSABMonsterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mon_infos_.MergeFrom(from.mon_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSABMonsterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSABMonsterRsp::CopyFrom(const CSABMonsterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSABMonsterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < mon_infos_size(); i++) {
    if (!this->mon_infos(i).IsInitialized()) return false;
  }
  return true;
}

void CSABMonsterRsp::Swap(CSABMonsterRsp* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    mon_infos_.Swap(&other->mon_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSABMonsterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSABMonsterRsp_descriptor_;
  metadata.reflection = CSABMonsterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSAutoBattleReq::kInstanceIdFieldNumber;
const int CSAutoBattleReq::kTurnNumFieldNumber;
#endif  // !_MSC_VER

CSAutoBattleReq::CSAutoBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSAutoBattleReq::InitAsDefaultInstance() {
}

CSAutoBattleReq::CSAutoBattleReq(const CSAutoBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSAutoBattleReq::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0u;
  turn_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAutoBattleReq::~CSAutoBattleReq() {
  SharedDtor();
}

void CSAutoBattleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSAutoBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSAutoBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSAutoBattleReq_descriptor_;
}

const CSAutoBattleReq& CSAutoBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSAutoBattleReq* CSAutoBattleReq::default_instance_ = NULL;

CSAutoBattleReq* CSAutoBattleReq::New() const {
  return new CSAutoBattleReq;
}

void CSAutoBattleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0u;
    turn_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSAutoBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_turn_num;
        break;
      }

      // required uint32 turn_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turn_num_)));
          set_has_turn_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAutoBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->instance_id(), output);
  }

  // required uint32 turn_num = 2;
  if (has_turn_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->turn_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSAutoBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->instance_id(), target);
  }

  // required uint32 turn_num = 2;
  if (has_turn_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->turn_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSAutoBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }

    // required uint32 turn_num = 2;
    if (has_turn_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->turn_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAutoBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSAutoBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSAutoBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSAutoBattleReq::MergeFrom(const CSAutoBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_turn_num()) {
      set_turn_num(from.turn_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSAutoBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAutoBattleReq::CopyFrom(const CSAutoBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAutoBattleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSAutoBattleReq::Swap(CSAutoBattleReq* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(turn_num_, other->turn_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSAutoBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSAutoBattleReq_descriptor_;
  metadata.reflection = CSAutoBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSAutoBattleRsp::kRetFieldNumber;
const int CSAutoBattleRsp::kCdFieldNumber;
const int CSAutoBattleRsp::kInstanceIdFieldNumber;
#endif  // !_MSC_VER

CSAutoBattleRsp::CSAutoBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSAutoBattleRsp::InitAsDefaultInstance() {
}

CSAutoBattleRsp::CSAutoBattleRsp(const CSAutoBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSAutoBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  cd_ = 0u;
  instance_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAutoBattleRsp::~CSAutoBattleRsp() {
  SharedDtor();
}

void CSAutoBattleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSAutoBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSAutoBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSAutoBattleRsp_descriptor_;
}

const CSAutoBattleRsp& CSAutoBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSAutoBattleRsp* CSAutoBattleRsp::default_instance_ = NULL;

CSAutoBattleRsp* CSAutoBattleRsp::New() const {
  return new CSAutoBattleRsp;
}

void CSAutoBattleRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    cd_ = 0u;
    instance_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSAutoBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cd;
        break;
      }

      // required uint32 cd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_instance_id;
        break;
      }

      // required uint32 instance_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAutoBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // required uint32 cd = 2;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cd(), output);
  }

  // required uint32 instance_id = 3;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->instance_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSAutoBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // required uint32 cd = 2;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cd(), target);
  }

  // required uint32 instance_id = 3;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->instance_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSAutoBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint32 cd = 2;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cd());
    }

    // required uint32 instance_id = 3;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAutoBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSAutoBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSAutoBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSAutoBattleRsp::MergeFrom(const CSAutoBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSAutoBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAutoBattleRsp::CopyFrom(const CSAutoBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAutoBattleRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSAutoBattleRsp::Swap(CSAutoBattleRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(cd_, other->cd_);
    std::swap(instance_id_, other->instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSAutoBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSAutoBattleRsp_descriptor_;
  metadata.reflection = CSAutoBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSABRewardRsp::kInstanceIdFieldNumber;
const int CSABRewardRsp::kRewardsFieldNumber;
#endif  // !_MSC_VER

CSABRewardRsp::CSABRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSABRewardRsp::InitAsDefaultInstance() {
  rewards_ = const_cast< ::CSReward*>(&::CSReward::default_instance());
}

CSABRewardRsp::CSABRewardRsp(const CSABRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSABRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0u;
  rewards_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSABRewardRsp::~CSABRewardRsp() {
  SharedDtor();
}

void CSABRewardRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rewards_;
  }
}

void CSABRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSABRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSABRewardRsp_descriptor_;
}

const CSABRewardRsp& CSABRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSABRewardRsp* CSABRewardRsp::default_instance_ = NULL;

CSABRewardRsp* CSABRewardRsp::New() const {
  return new CSABRewardRsp;
}

void CSABRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0u;
    if (has_rewards()) {
      if (rewards_ != NULL) rewards_->::CSReward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSABRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        break;
      }

      // required .CSReward rewards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSABRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->instance_id(), output);
  }

  // required .CSReward rewards = 2;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewards(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSABRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->instance_id(), target);
  }

  // required .CSReward rewards = 2;
  if (has_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewards(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSABRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }

    // required .CSReward rewards = 2;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewards());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSABRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSABRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSABRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSABRewardRsp::MergeFrom(const CSABRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_rewards()) {
      mutable_rewards()->::CSReward::MergeFrom(from.rewards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSABRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSABRewardRsp::CopyFrom(const CSABRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSABRewardRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_rewards()) {
    if (!this->rewards().IsInitialized()) return false;
  }
  return true;
}

void CSABRewardRsp::Swap(CSABRewardRsp* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(rewards_, other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSABRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSABRewardRsp_descriptor_;
  metadata.reflection = CSABRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSCancelAutoBattleReq::CSCancelAutoBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCancelAutoBattleReq::InitAsDefaultInstance() {
}

CSCancelAutoBattleReq::CSCancelAutoBattleReq(const CSCancelAutoBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCancelAutoBattleReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCancelAutoBattleReq::~CSCancelAutoBattleReq() {
  SharedDtor();
}

void CSCancelAutoBattleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSCancelAutoBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCancelAutoBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCancelAutoBattleReq_descriptor_;
}

const CSCancelAutoBattleReq& CSCancelAutoBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSCancelAutoBattleReq* CSCancelAutoBattleReq::default_instance_ = NULL;

CSCancelAutoBattleReq* CSCancelAutoBattleReq::New() const {
  return new CSCancelAutoBattleReq;
}

void CSCancelAutoBattleReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCancelAutoBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSCancelAutoBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCancelAutoBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCancelAutoBattleReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCancelAutoBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCancelAutoBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCancelAutoBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCancelAutoBattleReq::MergeFrom(const CSCancelAutoBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCancelAutoBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCancelAutoBattleReq::CopyFrom(const CSCancelAutoBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCancelAutoBattleReq::IsInitialized() const {

  return true;
}

void CSCancelAutoBattleReq::Swap(CSCancelAutoBattleReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCancelAutoBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCancelAutoBattleReq_descriptor_;
  metadata.reflection = CSCancelAutoBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSCancelAutoBattleRsp::CSCancelAutoBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCancelAutoBattleRsp::InitAsDefaultInstance() {
}

CSCancelAutoBattleRsp::CSCancelAutoBattleRsp(const CSCancelAutoBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCancelAutoBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCancelAutoBattleRsp::~CSCancelAutoBattleRsp() {
  SharedDtor();
}

void CSCancelAutoBattleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSCancelAutoBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCancelAutoBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCancelAutoBattleRsp_descriptor_;
}

const CSCancelAutoBattleRsp& CSCancelAutoBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

CSCancelAutoBattleRsp* CSCancelAutoBattleRsp::default_instance_ = NULL;

CSCancelAutoBattleRsp* CSCancelAutoBattleRsp::New() const {
  return new CSCancelAutoBattleRsp;
}

void CSCancelAutoBattleRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCancelAutoBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSCancelAutoBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCancelAutoBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCancelAutoBattleRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCancelAutoBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCancelAutoBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCancelAutoBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCancelAutoBattleRsp::MergeFrom(const CSCancelAutoBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCancelAutoBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCancelAutoBattleRsp::CopyFrom(const CSCancelAutoBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCancelAutoBattleRsp::IsInitialized() const {

  return true;
}

void CSCancelAutoBattleRsp::Swap(CSCancelAutoBattleRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCancelAutoBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCancelAutoBattleRsp_descriptor_;
  metadata.reflection = CSCancelAutoBattleRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
