// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_config.proto

#ifndef PROTOBUF_cs_5fconfig_2eproto__INCLUDED
#define PROTOBUF_cs_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "cs_battle.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cs_5fconfig_2eproto();
void protobuf_AssignDesc_cs_5fconfig_2eproto();
void protobuf_ShutdownFile_cs_5fconfig_2eproto();

class CSRangeInfo;
class CSSkillInfo;
class CSMonsterInfo;
class CSMonsterGroup;
class CSMapContent;
class InstanceInfo;

// ===================================================================

class CSRangeInfo : public ::google::protobuf::Message {
 public:
  CSRangeInfo();
  virtual ~CSRangeInfo();
  
  CSRangeInfo(const CSRangeInfo& from);
  
  inline CSRangeInfo& operator=(const CSRangeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSRangeInfo& default_instance();
  
  void Swap(CSRangeInfo* other);
  
  // implements Message ----------------------------------------------
  
  CSRangeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSRangeInfo& from);
  void MergeFrom(const CSRangeInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .CSPoint start = 1;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 1;
  inline const ::CSPoint& start() const;
  inline ::CSPoint* mutable_start();
  inline ::CSPoint* release_start();
  
  // required .CSPoint end = 2;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 2;
  inline const ::CSPoint& end() const;
  inline ::CSPoint* mutable_end();
  inline ::CSPoint* release_end();
  
  // @@protoc_insertion_point(class_scope:CSRangeInfo)
 private:
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CSPoint* start_;
  ::CSPoint* end_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fconfig_2eproto();
  friend void protobuf_AssignDesc_cs_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_cs_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static CSRangeInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSSkillInfo : public ::google::protobuf::Message {
 public:
  CSSkillInfo();
  virtual ~CSSkillInfo();
  
  CSSkillInfo(const CSSkillInfo& from);
  
  inline CSSkillInfo& operator=(const CSSkillInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSSkillInfo& default_instance();
  
  void Swap(CSSkillInfo* other);
  
  // implements Message ----------------------------------------------
  
  CSSkillInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSSkillInfo& from);
  void MergeFrom(const CSSkillInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:CSSkillInfo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_cs_5fconfig_2eproto();
  friend void protobuf_AssignDesc_cs_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_cs_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static CSSkillInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterInfo : public ::google::protobuf::Message {
 public:
  CSMonsterInfo();
  virtual ~CSMonsterInfo();
  
  CSMonsterInfo(const CSMonsterInfo& from);
  
  inline CSMonsterInfo& operator=(const CSMonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterInfo& default_instance();
  
  void Swap(CSMonsterInfo* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterInfo& from);
  void MergeFrom(const CSMonsterInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 raid_id = 1;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 1;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);
  
  // required uint32 speed = 2;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 2;
  inline ::google::protobuf::uint32 speed() const;
  inline void set_speed(::google::protobuf::uint32 value);
  
  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required bool is_boss = 4;
  inline bool has_is_boss() const;
  inline void clear_is_boss();
  static const int kIsBossFieldNumber = 4;
  inline bool is_boss() const;
  inline void set_is_boss(bool value);
  
  // required .CSRangeInfo body_range = 5;
  inline bool has_body_range() const;
  inline void clear_body_range();
  static const int kBodyRangeFieldNumber = 5;
  inline const ::CSRangeInfo& body_range() const;
  inline ::CSRangeInfo* mutable_body_range();
  inline ::CSRangeInfo* release_body_range();
  
  // required uint32 physical_attack = 6;
  inline bool has_physical_attack() const;
  inline void clear_physical_attack();
  static const int kPhysicalAttackFieldNumber = 6;
  inline ::google::protobuf::uint32 physical_attack() const;
  inline void set_physical_attack(::google::protobuf::uint32 value);
  
  // required uint32 magic_attack = 7;
  inline bool has_magic_attack() const;
  inline void clear_magic_attack();
  static const int kMagicAttackFieldNumber = 7;
  inline ::google::protobuf::uint32 magic_attack() const;
  inline void set_magic_attack(::google::protobuf::uint32 value);
  
  // required uint32 skill_attack = 8;
  inline bool has_skill_attack() const;
  inline void clear_skill_attack();
  static const int kSkillAttackFieldNumber = 8;
  inline ::google::protobuf::uint32 skill_attack() const;
  inline void set_skill_attack(::google::protobuf::uint32 value);
  
  // required uint32 physical_defence = 9;
  inline bool has_physical_defence() const;
  inline void clear_physical_defence();
  static const int kPhysicalDefenceFieldNumber = 9;
  inline ::google::protobuf::uint32 physical_defence() const;
  inline void set_physical_defence(::google::protobuf::uint32 value);
  
  // required uint32 magic_defence = 10;
  inline bool has_magic_defence() const;
  inline void clear_magic_defence();
  static const int kMagicDefenceFieldNumber = 10;
  inline ::google::protobuf::uint32 magic_defence() const;
  inline void set_magic_defence(::google::protobuf::uint32 value);
  
  // required uint32 skill_defence = 11;
  inline bool has_skill_defence() const;
  inline void clear_skill_defence();
  static const int kSkillDefenceFieldNumber = 11;
  inline ::google::protobuf::uint32 skill_defence() const;
  inline void set_skill_defence(::google::protobuf::uint32 value);
  
  // required uint32 health_point = 12;
  inline bool has_health_point() const;
  inline void clear_health_point();
  static const int kHealthPointFieldNumber = 12;
  inline ::google::protobuf::uint32 health_point() const;
  inline void set_health_point(::google::protobuf::uint32 value);
  
  // required uint32 accurate = 13;
  inline bool has_accurate() const;
  inline void clear_accurate();
  static const int kAccurateFieldNumber = 13;
  inline ::google::protobuf::uint32 accurate() const;
  inline void set_accurate(::google::protobuf::uint32 value);
  
  // required uint32 dodge = 14;
  inline bool has_dodge() const;
  inline void clear_dodge();
  static const int kDodgeFieldNumber = 14;
  inline ::google::protobuf::uint32 dodge() const;
  inline void set_dodge(::google::protobuf::uint32 value);
  
  // required uint32 wreck = 15;
  inline bool has_wreck() const;
  inline void clear_wreck();
  static const int kWreckFieldNumber = 15;
  inline ::google::protobuf::uint32 wreck() const;
  inline void set_wreck(::google::protobuf::uint32 value);
  
  // required uint32 parry = 16;
  inline bool has_parry() const;
  inline void clear_parry();
  static const int kParryFieldNumber = 16;
  inline ::google::protobuf::uint32 parry() const;
  inline void set_parry(::google::protobuf::uint32 value);
  
  // required uint32 critical_strike = 17;
  inline bool has_critical_strike() const;
  inline void clear_critical_strike();
  static const int kCriticalStrikeFieldNumber = 17;
  inline ::google::protobuf::uint32 critical_strike() const;
  inline void set_critical_strike(::google::protobuf::uint32 value);
  
  // required uint32 tenacity = 18;
  inline bool has_tenacity() const;
  inline void clear_tenacity();
  static const int kTenacityFieldNumber = 18;
  inline ::google::protobuf::uint32 tenacity() const;
  inline void set_tenacity(::google::protobuf::uint32 value);
  
  // required uint32 slay = 19;
  inline bool has_slay() const;
  inline void clear_slay();
  static const int kSlayFieldNumber = 19;
  inline ::google::protobuf::uint32 slay() const;
  inline void set_slay(::google::protobuf::uint32 value);
  
  // required uint32 proficiency = 20;
  inline bool has_proficiency() const;
  inline void clear_proficiency();
  static const int kProficiencyFieldNumber = 20;
  inline ::google::protobuf::uint32 proficiency() const;
  inline void set_proficiency(::google::protobuf::uint32 value);
  
  // required uint32 vision = 21;
  inline bool has_vision() const;
  inline void clear_vision();
  static const int kVisionFieldNumber = 21;
  inline ::google::protobuf::uint32 vision() const;
  inline void set_vision(::google::protobuf::uint32 value);
  
  // required .CSRangeInfo birth = 22;
  inline bool has_birth() const;
  inline void clear_birth();
  static const int kBirthFieldNumber = 22;
  inline const ::CSRangeInfo& birth() const;
  inline ::CSRangeInfo* mutable_birth();
  inline ::CSRangeInfo* release_birth();
  
  // required .CSMonsterInfo patrol = 23;
  inline bool has_patrol() const;
  inline void clear_patrol();
  static const int kPatrolFieldNumber = 23;
  inline const ::CSMonsterInfo& patrol() const;
  inline ::CSMonsterInfo* mutable_patrol();
  inline ::CSMonsterInfo* release_patrol();
  
  // @@protoc_insertion_point(class_scope:CSMonsterInfo)
 private:
  inline void set_has_raid_id();
  inline void clear_has_raid_id();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_is_boss();
  inline void clear_has_is_boss();
  inline void set_has_body_range();
  inline void clear_has_body_range();
  inline void set_has_physical_attack();
  inline void clear_has_physical_attack();
  inline void set_has_magic_attack();
  inline void clear_has_magic_attack();
  inline void set_has_skill_attack();
  inline void clear_has_skill_attack();
  inline void set_has_physical_defence();
  inline void clear_has_physical_defence();
  inline void set_has_magic_defence();
  inline void clear_has_magic_defence();
  inline void set_has_skill_defence();
  inline void clear_has_skill_defence();
  inline void set_has_health_point();
  inline void clear_has_health_point();
  inline void set_has_accurate();
  inline void clear_has_accurate();
  inline void set_has_dodge();
  inline void clear_has_dodge();
  inline void set_has_wreck();
  inline void clear_has_wreck();
  inline void set_has_parry();
  inline void clear_has_parry();
  inline void set_has_critical_strike();
  inline void clear_has_critical_strike();
  inline void set_has_tenacity();
  inline void clear_has_tenacity();
  inline void set_has_slay();
  inline void clear_has_slay();
  inline void set_has_proficiency();
  inline void clear_has_proficiency();
  inline void set_has_vision();
  inline void clear_has_vision();
  inline void set_has_birth();
  inline void clear_has_birth();
  inline void set_has_patrol();
  inline void clear_has_patrol();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 raid_id_;
  ::google::protobuf::uint32 speed_;
  ::google::protobuf::uint32 type_;
  bool is_boss_;
  ::CSRangeInfo* body_range_;
  ::google::protobuf::uint32 physical_attack_;
  ::google::protobuf::uint32 magic_attack_;
  ::google::protobuf::uint32 skill_attack_;
  ::google::protobuf::uint32 physical_defence_;
  ::google::protobuf::uint32 magic_defence_;
  ::google::protobuf::uint32 skill_defence_;
  ::google::protobuf::uint32 health_point_;
  ::google::protobuf::uint32 accurate_;
  ::google::protobuf::uint32 dodge_;
  ::google::protobuf::uint32 wreck_;
  ::google::protobuf::uint32 parry_;
  ::google::protobuf::uint32 critical_strike_;
  ::google::protobuf::uint32 tenacity_;
  ::google::protobuf::uint32 slay_;
  ::google::protobuf::uint32 proficiency_;
  ::google::protobuf::uint32 vision_;
  ::CSRangeInfo* birth_;
  ::CSMonsterInfo* patrol_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fconfig_2eproto();
  friend void protobuf_AssignDesc_cs_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_cs_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterGroup : public ::google::protobuf::Message {
 public:
  CSMonsterGroup();
  virtual ~CSMonsterGroup();
  
  CSMonsterGroup(const CSMonsterGroup& from);
  
  inline CSMonsterGroup& operator=(const CSMonsterGroup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterGroup& default_instance();
  
  void Swap(CSMonsterGroup* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterGroup& from);
  void MergeFrom(const CSMonsterGroup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 referesh_time = 1;
  inline bool has_referesh_time() const;
  inline void clear_referesh_time();
  static const int kRefereshTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 referesh_time() const;
  inline void set_referesh_time(::google::protobuf::uint32 value);
  
  // required uint32 times = 2;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 times() const;
  inline void set_times(::google::protobuf::uint32 value);
  
  // repeated .CSMonsterInfo monsters = 3;
  inline int monsters_size() const;
  inline void clear_monsters();
  static const int kMonstersFieldNumber = 3;
  inline const ::CSMonsterInfo& monsters(int index) const;
  inline ::CSMonsterInfo* mutable_monsters(int index);
  inline ::CSMonsterInfo* add_monsters();
  inline const ::google::protobuf::RepeatedPtrField< ::CSMonsterInfo >&
      monsters() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSMonsterInfo >*
      mutable_monsters();
  
  // @@protoc_insertion_point(class_scope:CSMonsterGroup)
 private:
  inline void set_has_referesh_time();
  inline void clear_has_referesh_time();
  inline void set_has_times();
  inline void clear_has_times();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 referesh_time_;
  ::google::protobuf::uint32 times_;
  ::google::protobuf::RepeatedPtrField< ::CSMonsterInfo > monsters_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fconfig_2eproto();
  friend void protobuf_AssignDesc_cs_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_cs_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterGroup* default_instance_;
};
// -------------------------------------------------------------------

class CSMapContent : public ::google::protobuf::Message {
 public:
  CSMapContent();
  virtual ~CSMapContent();
  
  CSMapContent(const CSMapContent& from);
  
  inline CSMapContent& operator=(const CSMapContent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMapContent& default_instance();
  
  void Swap(CSMapContent* other);
  
  // implements Message ----------------------------------------------
  
  CSMapContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMapContent& from);
  void MergeFrom(const CSMapContent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 map_id = 1;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 1;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);
  
  // required uint32 hero_born = 2;
  inline bool has_hero_born() const;
  inline void clear_hero_born();
  static const int kHeroBornFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_born() const;
  inline void set_hero_born(::google::protobuf::uint32 value);
  
  // required uint32 portal = 3;
  inline bool has_portal() const;
  inline void clear_portal();
  static const int kPortalFieldNumber = 3;
  inline ::google::protobuf::uint32 portal() const;
  inline void set_portal(::google::protobuf::uint32 value);
  
  // optional uint32 next_map_id = 4;
  inline bool has_next_map_id() const;
  inline void clear_next_map_id();
  static const int kNextMapIdFieldNumber = 4;
  inline ::google::protobuf::uint32 next_map_id() const;
  inline void set_next_map_id(::google::protobuf::uint32 value);
  
  // repeated .CSMonsterGroup monster_group = 5;
  inline int monster_group_size() const;
  inline void clear_monster_group();
  static const int kMonsterGroupFieldNumber = 5;
  inline const ::CSMonsterGroup& monster_group(int index) const;
  inline ::CSMonsterGroup* mutable_monster_group(int index);
  inline ::CSMonsterGroup* add_monster_group();
  inline const ::google::protobuf::RepeatedPtrField< ::CSMonsterGroup >&
      monster_group() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSMonsterGroup >*
      mutable_monster_group();
  
  // @@protoc_insertion_point(class_scope:CSMapContent)
 private:
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_hero_born();
  inline void clear_has_hero_born();
  inline void set_has_portal();
  inline void clear_has_portal();
  inline void set_has_next_map_id();
  inline void clear_has_next_map_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 map_id_;
  ::google::protobuf::uint32 hero_born_;
  ::google::protobuf::uint32 portal_;
  ::google::protobuf::uint32 next_map_id_;
  ::google::protobuf::RepeatedPtrField< ::CSMonsterGroup > monster_group_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fconfig_2eproto();
  friend void protobuf_AssignDesc_cs_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_cs_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static CSMapContent* default_instance_;
};
// -------------------------------------------------------------------

class InstanceInfo : public ::google::protobuf::Message {
 public:
  InstanceInfo();
  virtual ~InstanceInfo();
  
  InstanceInfo(const InstanceInfo& from);
  
  inline InstanceInfo& operator=(const InstanceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InstanceInfo& default_instance();
  
  void Swap(InstanceInfo* other);
  
  // implements Message ----------------------------------------------
  
  InstanceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstanceInfo& from);
  void MergeFrom(const InstanceInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 instance_id = 1;
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  inline ::google::protobuf::uint32 instance_id() const;
  inline void set_instance_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:InstanceInfo)
 private:
  inline void set_has_instance_id();
  inline void clear_has_instance_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 instance_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fconfig_2eproto();
  friend void protobuf_AssignDesc_cs_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_cs_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static InstanceInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// CSRangeInfo

// required .CSPoint start = 1;
inline bool CSRangeInfo::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSRangeInfo::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSRangeInfo::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSRangeInfo::clear_start() {
  if (start_ != NULL) start_->::CSPoint::Clear();
  clear_has_start();
}
inline const ::CSPoint& CSRangeInfo::start() const {
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
inline ::CSPoint* CSRangeInfo::mutable_start() {
  set_has_start();
  if (start_ == NULL) start_ = new ::CSPoint;
  return start_;
}
inline ::CSPoint* CSRangeInfo::release_start() {
  clear_has_start();
  ::CSPoint* temp = start_;
  start_ = NULL;
  return temp;
}

// required .CSPoint end = 2;
inline bool CSRangeInfo::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSRangeInfo::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSRangeInfo::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSRangeInfo::clear_end() {
  if (end_ != NULL) end_->::CSPoint::Clear();
  clear_has_end();
}
inline const ::CSPoint& CSRangeInfo::end() const {
  return end_ != NULL ? *end_ : *default_instance_->end_;
}
inline ::CSPoint* CSRangeInfo::mutable_end() {
  set_has_end();
  if (end_ == NULL) end_ = new ::CSPoint;
  return end_;
}
inline ::CSPoint* CSRangeInfo::release_end() {
  clear_has_end();
  ::CSPoint* temp = end_;
  end_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CSSkillInfo

// -------------------------------------------------------------------

// CSMonsterInfo

// required uint32 raid_id = 1;
inline bool CSMonsterInfo::has_raid_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMonsterInfo::set_has_raid_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMonsterInfo::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMonsterInfo::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 CSMonsterInfo::raid_id() const {
  return raid_id_;
}
inline void CSMonsterInfo::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// required uint32 speed = 2;
inline bool CSMonsterInfo::has_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMonsterInfo::set_has_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMonsterInfo::clear_has_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMonsterInfo::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
inline ::google::protobuf::uint32 CSMonsterInfo::speed() const {
  return speed_;
}
inline void CSMonsterInfo::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
}

// required uint32 type = 3;
inline bool CSMonsterInfo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMonsterInfo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMonsterInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMonsterInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CSMonsterInfo::type() const {
  return type_;
}
inline void CSMonsterInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required bool is_boss = 4;
inline bool CSMonsterInfo::has_is_boss() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSMonsterInfo::set_has_is_boss() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSMonsterInfo::clear_has_is_boss() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSMonsterInfo::clear_is_boss() {
  is_boss_ = false;
  clear_has_is_boss();
}
inline bool CSMonsterInfo::is_boss() const {
  return is_boss_;
}
inline void CSMonsterInfo::set_is_boss(bool value) {
  set_has_is_boss();
  is_boss_ = value;
}

// required .CSRangeInfo body_range = 5;
inline bool CSMonsterInfo::has_body_range() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSMonsterInfo::set_has_body_range() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSMonsterInfo::clear_has_body_range() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSMonsterInfo::clear_body_range() {
  if (body_range_ != NULL) body_range_->::CSRangeInfo::Clear();
  clear_has_body_range();
}
inline const ::CSRangeInfo& CSMonsterInfo::body_range() const {
  return body_range_ != NULL ? *body_range_ : *default_instance_->body_range_;
}
inline ::CSRangeInfo* CSMonsterInfo::mutable_body_range() {
  set_has_body_range();
  if (body_range_ == NULL) body_range_ = new ::CSRangeInfo;
  return body_range_;
}
inline ::CSRangeInfo* CSMonsterInfo::release_body_range() {
  clear_has_body_range();
  ::CSRangeInfo* temp = body_range_;
  body_range_ = NULL;
  return temp;
}

// required uint32 physical_attack = 6;
inline bool CSMonsterInfo::has_physical_attack() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSMonsterInfo::set_has_physical_attack() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSMonsterInfo::clear_has_physical_attack() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSMonsterInfo::clear_physical_attack() {
  physical_attack_ = 0u;
  clear_has_physical_attack();
}
inline ::google::protobuf::uint32 CSMonsterInfo::physical_attack() const {
  return physical_attack_;
}
inline void CSMonsterInfo::set_physical_attack(::google::protobuf::uint32 value) {
  set_has_physical_attack();
  physical_attack_ = value;
}

// required uint32 magic_attack = 7;
inline bool CSMonsterInfo::has_magic_attack() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSMonsterInfo::set_has_magic_attack() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSMonsterInfo::clear_has_magic_attack() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSMonsterInfo::clear_magic_attack() {
  magic_attack_ = 0u;
  clear_has_magic_attack();
}
inline ::google::protobuf::uint32 CSMonsterInfo::magic_attack() const {
  return magic_attack_;
}
inline void CSMonsterInfo::set_magic_attack(::google::protobuf::uint32 value) {
  set_has_magic_attack();
  magic_attack_ = value;
}

// required uint32 skill_attack = 8;
inline bool CSMonsterInfo::has_skill_attack() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSMonsterInfo::set_has_skill_attack() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSMonsterInfo::clear_has_skill_attack() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSMonsterInfo::clear_skill_attack() {
  skill_attack_ = 0u;
  clear_has_skill_attack();
}
inline ::google::protobuf::uint32 CSMonsterInfo::skill_attack() const {
  return skill_attack_;
}
inline void CSMonsterInfo::set_skill_attack(::google::protobuf::uint32 value) {
  set_has_skill_attack();
  skill_attack_ = value;
}

// required uint32 physical_defence = 9;
inline bool CSMonsterInfo::has_physical_defence() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSMonsterInfo::set_has_physical_defence() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSMonsterInfo::clear_has_physical_defence() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSMonsterInfo::clear_physical_defence() {
  physical_defence_ = 0u;
  clear_has_physical_defence();
}
inline ::google::protobuf::uint32 CSMonsterInfo::physical_defence() const {
  return physical_defence_;
}
inline void CSMonsterInfo::set_physical_defence(::google::protobuf::uint32 value) {
  set_has_physical_defence();
  physical_defence_ = value;
}

// required uint32 magic_defence = 10;
inline bool CSMonsterInfo::has_magic_defence() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSMonsterInfo::set_has_magic_defence() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSMonsterInfo::clear_has_magic_defence() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSMonsterInfo::clear_magic_defence() {
  magic_defence_ = 0u;
  clear_has_magic_defence();
}
inline ::google::protobuf::uint32 CSMonsterInfo::magic_defence() const {
  return magic_defence_;
}
inline void CSMonsterInfo::set_magic_defence(::google::protobuf::uint32 value) {
  set_has_magic_defence();
  magic_defence_ = value;
}

// required uint32 skill_defence = 11;
inline bool CSMonsterInfo::has_skill_defence() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSMonsterInfo::set_has_skill_defence() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSMonsterInfo::clear_has_skill_defence() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSMonsterInfo::clear_skill_defence() {
  skill_defence_ = 0u;
  clear_has_skill_defence();
}
inline ::google::protobuf::uint32 CSMonsterInfo::skill_defence() const {
  return skill_defence_;
}
inline void CSMonsterInfo::set_skill_defence(::google::protobuf::uint32 value) {
  set_has_skill_defence();
  skill_defence_ = value;
}

// required uint32 health_point = 12;
inline bool CSMonsterInfo::has_health_point() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSMonsterInfo::set_has_health_point() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSMonsterInfo::clear_has_health_point() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSMonsterInfo::clear_health_point() {
  health_point_ = 0u;
  clear_has_health_point();
}
inline ::google::protobuf::uint32 CSMonsterInfo::health_point() const {
  return health_point_;
}
inline void CSMonsterInfo::set_health_point(::google::protobuf::uint32 value) {
  set_has_health_point();
  health_point_ = value;
}

// required uint32 accurate = 13;
inline bool CSMonsterInfo::has_accurate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSMonsterInfo::set_has_accurate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSMonsterInfo::clear_has_accurate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSMonsterInfo::clear_accurate() {
  accurate_ = 0u;
  clear_has_accurate();
}
inline ::google::protobuf::uint32 CSMonsterInfo::accurate() const {
  return accurate_;
}
inline void CSMonsterInfo::set_accurate(::google::protobuf::uint32 value) {
  set_has_accurate();
  accurate_ = value;
}

// required uint32 dodge = 14;
inline bool CSMonsterInfo::has_dodge() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSMonsterInfo::set_has_dodge() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CSMonsterInfo::clear_has_dodge() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CSMonsterInfo::clear_dodge() {
  dodge_ = 0u;
  clear_has_dodge();
}
inline ::google::protobuf::uint32 CSMonsterInfo::dodge() const {
  return dodge_;
}
inline void CSMonsterInfo::set_dodge(::google::protobuf::uint32 value) {
  set_has_dodge();
  dodge_ = value;
}

// required uint32 wreck = 15;
inline bool CSMonsterInfo::has_wreck() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSMonsterInfo::set_has_wreck() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CSMonsterInfo::clear_has_wreck() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CSMonsterInfo::clear_wreck() {
  wreck_ = 0u;
  clear_has_wreck();
}
inline ::google::protobuf::uint32 CSMonsterInfo::wreck() const {
  return wreck_;
}
inline void CSMonsterInfo::set_wreck(::google::protobuf::uint32 value) {
  set_has_wreck();
  wreck_ = value;
}

// required uint32 parry = 16;
inline bool CSMonsterInfo::has_parry() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSMonsterInfo::set_has_parry() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CSMonsterInfo::clear_has_parry() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CSMonsterInfo::clear_parry() {
  parry_ = 0u;
  clear_has_parry();
}
inline ::google::protobuf::uint32 CSMonsterInfo::parry() const {
  return parry_;
}
inline void CSMonsterInfo::set_parry(::google::protobuf::uint32 value) {
  set_has_parry();
  parry_ = value;
}

// required uint32 critical_strike = 17;
inline bool CSMonsterInfo::has_critical_strike() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSMonsterInfo::set_has_critical_strike() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CSMonsterInfo::clear_has_critical_strike() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CSMonsterInfo::clear_critical_strike() {
  critical_strike_ = 0u;
  clear_has_critical_strike();
}
inline ::google::protobuf::uint32 CSMonsterInfo::critical_strike() const {
  return critical_strike_;
}
inline void CSMonsterInfo::set_critical_strike(::google::protobuf::uint32 value) {
  set_has_critical_strike();
  critical_strike_ = value;
}

// required uint32 tenacity = 18;
inline bool CSMonsterInfo::has_tenacity() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSMonsterInfo::set_has_tenacity() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CSMonsterInfo::clear_has_tenacity() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CSMonsterInfo::clear_tenacity() {
  tenacity_ = 0u;
  clear_has_tenacity();
}
inline ::google::protobuf::uint32 CSMonsterInfo::tenacity() const {
  return tenacity_;
}
inline void CSMonsterInfo::set_tenacity(::google::protobuf::uint32 value) {
  set_has_tenacity();
  tenacity_ = value;
}

// required uint32 slay = 19;
inline bool CSMonsterInfo::has_slay() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSMonsterInfo::set_has_slay() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CSMonsterInfo::clear_has_slay() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CSMonsterInfo::clear_slay() {
  slay_ = 0u;
  clear_has_slay();
}
inline ::google::protobuf::uint32 CSMonsterInfo::slay() const {
  return slay_;
}
inline void CSMonsterInfo::set_slay(::google::protobuf::uint32 value) {
  set_has_slay();
  slay_ = value;
}

// required uint32 proficiency = 20;
inline bool CSMonsterInfo::has_proficiency() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CSMonsterInfo::set_has_proficiency() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CSMonsterInfo::clear_has_proficiency() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CSMonsterInfo::clear_proficiency() {
  proficiency_ = 0u;
  clear_has_proficiency();
}
inline ::google::protobuf::uint32 CSMonsterInfo::proficiency() const {
  return proficiency_;
}
inline void CSMonsterInfo::set_proficiency(::google::protobuf::uint32 value) {
  set_has_proficiency();
  proficiency_ = value;
}

// required uint32 vision = 21;
inline bool CSMonsterInfo::has_vision() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CSMonsterInfo::set_has_vision() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CSMonsterInfo::clear_has_vision() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CSMonsterInfo::clear_vision() {
  vision_ = 0u;
  clear_has_vision();
}
inline ::google::protobuf::uint32 CSMonsterInfo::vision() const {
  return vision_;
}
inline void CSMonsterInfo::set_vision(::google::protobuf::uint32 value) {
  set_has_vision();
  vision_ = value;
}

// required .CSRangeInfo birth = 22;
inline bool CSMonsterInfo::has_birth() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CSMonsterInfo::set_has_birth() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CSMonsterInfo::clear_has_birth() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CSMonsterInfo::clear_birth() {
  if (birth_ != NULL) birth_->::CSRangeInfo::Clear();
  clear_has_birth();
}
inline const ::CSRangeInfo& CSMonsterInfo::birth() const {
  return birth_ != NULL ? *birth_ : *default_instance_->birth_;
}
inline ::CSRangeInfo* CSMonsterInfo::mutable_birth() {
  set_has_birth();
  if (birth_ == NULL) birth_ = new ::CSRangeInfo;
  return birth_;
}
inline ::CSRangeInfo* CSMonsterInfo::release_birth() {
  clear_has_birth();
  ::CSRangeInfo* temp = birth_;
  birth_ = NULL;
  return temp;
}

// required .CSMonsterInfo patrol = 23;
inline bool CSMonsterInfo::has_patrol() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CSMonsterInfo::set_has_patrol() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CSMonsterInfo::clear_has_patrol() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CSMonsterInfo::clear_patrol() {
  if (patrol_ != NULL) patrol_->::CSMonsterInfo::Clear();
  clear_has_patrol();
}
inline const ::CSMonsterInfo& CSMonsterInfo::patrol() const {
  return patrol_ != NULL ? *patrol_ : *default_instance_->patrol_;
}
inline ::CSMonsterInfo* CSMonsterInfo::mutable_patrol() {
  set_has_patrol();
  if (patrol_ == NULL) patrol_ = new ::CSMonsterInfo;
  return patrol_;
}
inline ::CSMonsterInfo* CSMonsterInfo::release_patrol() {
  clear_has_patrol();
  ::CSMonsterInfo* temp = patrol_;
  patrol_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CSMonsterGroup

// required uint32 referesh_time = 1;
inline bool CSMonsterGroup::has_referesh_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMonsterGroup::set_has_referesh_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMonsterGroup::clear_has_referesh_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMonsterGroup::clear_referesh_time() {
  referesh_time_ = 0u;
  clear_has_referesh_time();
}
inline ::google::protobuf::uint32 CSMonsterGroup::referesh_time() const {
  return referesh_time_;
}
inline void CSMonsterGroup::set_referesh_time(::google::protobuf::uint32 value) {
  set_has_referesh_time();
  referesh_time_ = value;
}

// required uint32 times = 2;
inline bool CSMonsterGroup::has_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMonsterGroup::set_has_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMonsterGroup::clear_has_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMonsterGroup::clear_times() {
  times_ = 0u;
  clear_has_times();
}
inline ::google::protobuf::uint32 CSMonsterGroup::times() const {
  return times_;
}
inline void CSMonsterGroup::set_times(::google::protobuf::uint32 value) {
  set_has_times();
  times_ = value;
}

// repeated .CSMonsterInfo monsters = 3;
inline int CSMonsterGroup::monsters_size() const {
  return monsters_.size();
}
inline void CSMonsterGroup::clear_monsters() {
  monsters_.Clear();
}
inline const ::CSMonsterInfo& CSMonsterGroup::monsters(int index) const {
  return monsters_.Get(index);
}
inline ::CSMonsterInfo* CSMonsterGroup::mutable_monsters(int index) {
  return monsters_.Mutable(index);
}
inline ::CSMonsterInfo* CSMonsterGroup::add_monsters() {
  return monsters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSMonsterInfo >&
CSMonsterGroup::monsters() const {
  return monsters_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSMonsterInfo >*
CSMonsterGroup::mutable_monsters() {
  return &monsters_;
}

// -------------------------------------------------------------------

// CSMapContent

// required uint32 map_id = 1;
inline bool CSMapContent::has_map_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMapContent::set_has_map_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMapContent::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMapContent::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 CSMapContent::map_id() const {
  return map_id_;
}
inline void CSMapContent::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// required uint32 hero_born = 2;
inline bool CSMapContent::has_hero_born() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMapContent::set_has_hero_born() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMapContent::clear_has_hero_born() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMapContent::clear_hero_born() {
  hero_born_ = 0u;
  clear_has_hero_born();
}
inline ::google::protobuf::uint32 CSMapContent::hero_born() const {
  return hero_born_;
}
inline void CSMapContent::set_hero_born(::google::protobuf::uint32 value) {
  set_has_hero_born();
  hero_born_ = value;
}

// required uint32 portal = 3;
inline bool CSMapContent::has_portal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMapContent::set_has_portal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMapContent::clear_has_portal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMapContent::clear_portal() {
  portal_ = 0u;
  clear_has_portal();
}
inline ::google::protobuf::uint32 CSMapContent::portal() const {
  return portal_;
}
inline void CSMapContent::set_portal(::google::protobuf::uint32 value) {
  set_has_portal();
  portal_ = value;
}

// optional uint32 next_map_id = 4;
inline bool CSMapContent::has_next_map_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSMapContent::set_has_next_map_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSMapContent::clear_has_next_map_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSMapContent::clear_next_map_id() {
  next_map_id_ = 0u;
  clear_has_next_map_id();
}
inline ::google::protobuf::uint32 CSMapContent::next_map_id() const {
  return next_map_id_;
}
inline void CSMapContent::set_next_map_id(::google::protobuf::uint32 value) {
  set_has_next_map_id();
  next_map_id_ = value;
}

// repeated .CSMonsterGroup monster_group = 5;
inline int CSMapContent::monster_group_size() const {
  return monster_group_.size();
}
inline void CSMapContent::clear_monster_group() {
  monster_group_.Clear();
}
inline const ::CSMonsterGroup& CSMapContent::monster_group(int index) const {
  return monster_group_.Get(index);
}
inline ::CSMonsterGroup* CSMapContent::mutable_monster_group(int index) {
  return monster_group_.Mutable(index);
}
inline ::CSMonsterGroup* CSMapContent::add_monster_group() {
  return monster_group_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSMonsterGroup >&
CSMapContent::monster_group() const {
  return monster_group_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSMonsterGroup >*
CSMapContent::mutable_monster_group() {
  return &monster_group_;
}

// -------------------------------------------------------------------

// InstanceInfo

// required uint32 instance_id = 1;
inline bool InstanceInfo::has_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstanceInfo::set_has_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstanceInfo::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstanceInfo::clear_instance_id() {
  instance_id_ = 0u;
  clear_has_instance_id();
}
inline ::google::protobuf::uint32 InstanceInfo::instance_id() const {
  return instance_id_;
}
inline void InstanceInfo::set_instance_id(::google::protobuf::uint32 value) {
  set_has_instance_id();
  instance_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_5fconfig_2eproto__INCLUDED
